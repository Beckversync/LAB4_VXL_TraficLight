
LAB4_traffic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004304  08004304  00014304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004428  08004428  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  08004428  08004428  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004428  08004428  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800442c  0800442c  0001442c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08004430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000108  08004538  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08004538  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e13  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ee  00000000  00000000  00033f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00036938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  000376a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003913  00000000  00000000  000382f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010da8  00000000  00000000  0003bc0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000892a4  00000000  00000000  0004c9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5c57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a08  00000000  00000000  000d5cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000108 	.word	0x20000108
 8000128:	00000000 	.word	0x00000000
 800012c:	080042ec 	.word	0x080042ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000010c 	.word	0x2000010c
 8000148:	080042ec 	.word	0x080042ec

0800014c <setTimer>:

int timer_counter[NUM_TIMER] = {0};
int timer_flag[NUM_TIMER] = {0};
int timer_duration[NUM_TIMER] = {1000, 250, 0, 0};

void setTimer(int duration, int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	4a09      	ldr	r2, [pc, #36]	; (8000180 <setTimer+0x34>)
 800015a:	fb82 1203 	smull	r1, r2, r2, r3
 800015e:	1092      	asrs	r2, r2, #2
 8000160:	17db      	asrs	r3, r3, #31
 8000162:	1ad2      	subs	r2, r2, r3
 8000164:	4907      	ldr	r1, [pc, #28]	; (8000184 <setTimer+0x38>)
 8000166:	683b      	ldr	r3, [r7, #0]
 8000168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 800016c:	4a06      	ldr	r2, [pc, #24]	; (8000188 <setTimer+0x3c>)
 800016e:	683b      	ldr	r3, [r7, #0]
 8000170:	2100      	movs	r1, #0
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	66666667 	.word	0x66666667
 8000184:	20000124 	.word	0x20000124
 8000188:	20000134 	.word	0x20000134

0800018c <timerRun>:

void timerRun(){
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_TIMER; i++){
 8000192:	2300      	movs	r3, #0
 8000194:	607b      	str	r3, [r7, #4]
 8000196:	e01c      	b.n	80001d2 <timerRun+0x46>
		if (timer_counter[i] > 0){
 8000198:	4a12      	ldr	r2, [pc, #72]	; (80001e4 <timerRun+0x58>)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	dd13      	ble.n	80001cc <timerRun+0x40>
			timer_counter[i]--;
 80001a4:	4a0f      	ldr	r2, [pc, #60]	; (80001e4 <timerRun+0x58>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ac:	1e5a      	subs	r2, r3, #1
 80001ae:	490d      	ldr	r1, [pc, #52]	; (80001e4 <timerRun+0x58>)
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 80001b6:	4a0b      	ldr	r2, [pc, #44]	; (80001e4 <timerRun+0x58>)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	dc04      	bgt.n	80001cc <timerRun+0x40>
				timer_flag[i] = 1;
 80001c2:	4a09      	ldr	r2, [pc, #36]	; (80001e8 <timerRun+0x5c>)
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	2101      	movs	r1, #1
 80001c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_TIMER; i++){
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	3301      	adds	r3, #1
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	2b03      	cmp	r3, #3
 80001d6:	dddf      	ble.n	8000198 <timerRun+0xc>
			}
		}
	}
}
 80001d8:	bf00      	nop
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	20000124 	.word	0x20000124
 80001e8:	20000134 	.word	0x20000134

080001ec <switchAutoState>:


// ======================= CHẾ ĐỘ TỰ ĐỘNG =======================


void switchAutoState(int newState, int mainTime, int sideTime) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	60f8      	str	r0, [r7, #12]
 80001f4:	60b9      	str	r1, [r7, #8]
 80001f6:	607a      	str	r2, [r7, #4]
    autoStatus = newState;
 80001f8:	4a07      	ldr	r2, [pc, #28]	; (8000218 <switchAutoState+0x2c>)
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	6013      	str	r3, [r2, #0]
    clock_counter_main = mainTime;
 80001fe:	4a07      	ldr	r2, [pc, #28]	; (800021c <switchAutoState+0x30>)
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	6013      	str	r3, [r2, #0]
    clock_counter_side = sideTime;
 8000204:	4a06      	ldr	r2, [pc, #24]	; (8000220 <switchAutoState+0x34>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6013      	str	r3, [r2, #0]
    clearRoadLed();
 800020a:	f000 fc2f 	bl	8000a6c <clearRoadLed>
}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000014 	.word	0x20000014
 800021c:	2000014c 	.word	0x2000014c
 8000220:	20000150 	.word	0x20000150

08000224 <fsm_traffic_auto_mode>:

void fsm_traffic_auto_mode(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    switch (autoStatus) {
 8000228:	4b3e      	ldr	r3, [pc, #248]	; (8000324 <fsm_traffic_auto_mode+0x100>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b0a      	cmp	r3, #10
 800022e:	d86e      	bhi.n	800030e <fsm_traffic_auto_mode+0xea>
 8000230:	a201      	add	r2, pc, #4	; (adr r2, 8000238 <fsm_traffic_auto_mode+0x14>)
 8000232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000236:	bf00      	nop
 8000238:	0800030f 	.word	0x0800030f
 800023c:	08000277 	.word	0x08000277
 8000240:	0800029d 	.word	0x0800029d
 8000244:	080002c3 	.word	0x080002c3
 8000248:	080002e9 	.word	0x080002e9
 800024c:	0800030f 	.word	0x0800030f
 8000250:	0800030f 	.word	0x0800030f
 8000254:	0800030f 	.word	0x0800030f
 8000258:	0800030f 	.word	0x0800030f
 800025c:	0800030f 	.word	0x0800030f
 8000260:	08000265 	.word	0x08000265
        case OFF:
            break; // Không làm gì
        case INIT:
            switchAutoState(RED_GREEN, timeRed, timeGreen);
 8000264:	4b30      	ldr	r3, [pc, #192]	; (8000328 <fsm_traffic_auto_mode+0x104>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a30      	ldr	r2, [pc, #192]	; (800032c <fsm_traffic_auto_mode+0x108>)
 800026a:	6812      	ldr	r2, [r2, #0]
 800026c:	4619      	mov	r1, r3
 800026e:	2001      	movs	r0, #1
 8000270:	f7ff ffbc 	bl	80001ec <switchAutoState>
            break;
 8000274:	e054      	b.n	8000320 <fsm_traffic_auto_mode+0xfc>
        case RED_GREEN:
            turnOnRed(0);
 8000276:	2000      	movs	r0, #0
 8000278:	f000 fb82 	bl	8000980 <turnOnRed>
            turnOnGreen(1);
 800027c:	2001      	movs	r0, #1
 800027e:	f000 fb9b 	bl	80009b8 <turnOnGreen>
            if (clock_counter_side == 0)
 8000282:	4b2b      	ldr	r3, [pc, #172]	; (8000330 <fsm_traffic_auto_mode+0x10c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d143      	bne.n	8000312 <fsm_traffic_auto_mode+0xee>
                switchAutoState(RED_AMBER, clock_counter_main, timeAmber);
 800028a:	4b2a      	ldr	r3, [pc, #168]	; (8000334 <fsm_traffic_auto_mode+0x110>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a2a      	ldr	r2, [pc, #168]	; (8000338 <fsm_traffic_auto_mode+0x114>)
 8000290:	6812      	ldr	r2, [r2, #0]
 8000292:	4619      	mov	r1, r3
 8000294:	2002      	movs	r0, #2
 8000296:	f7ff ffa9 	bl	80001ec <switchAutoState>
            break;
 800029a:	e03a      	b.n	8000312 <fsm_traffic_auto_mode+0xee>
        case RED_AMBER:
            turnOnRed(0);
 800029c:	2000      	movs	r0, #0
 800029e:	f000 fb6f 	bl	8000980 <turnOnRed>
            turnOnAmber(1);
 80002a2:	2001      	movs	r0, #1
 80002a4:	f000 fb7a 	bl	800099c <turnOnAmber>
            if (clock_counter_side == 0)
 80002a8:	4b21      	ldr	r3, [pc, #132]	; (8000330 <fsm_traffic_auto_mode+0x10c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d132      	bne.n	8000316 <fsm_traffic_auto_mode+0xf2>
                switchAutoState(GREEN_RED, timeGreen, timeRed);
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <fsm_traffic_auto_mode+0x108>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a1c      	ldr	r2, [pc, #112]	; (8000328 <fsm_traffic_auto_mode+0x104>)
 80002b6:	6812      	ldr	r2, [r2, #0]
 80002b8:	4619      	mov	r1, r3
 80002ba:	2003      	movs	r0, #3
 80002bc:	f7ff ff96 	bl	80001ec <switchAutoState>
            break;
 80002c0:	e029      	b.n	8000316 <fsm_traffic_auto_mode+0xf2>
        case GREEN_RED:
            turnOnGreen(0);
 80002c2:	2000      	movs	r0, #0
 80002c4:	f000 fb78 	bl	80009b8 <turnOnGreen>
            turnOnRed(1);
 80002c8:	2001      	movs	r0, #1
 80002ca:	f000 fb59 	bl	8000980 <turnOnRed>
            if (clock_counter_main == 0)
 80002ce:	4b19      	ldr	r3, [pc, #100]	; (8000334 <fsm_traffic_auto_mode+0x110>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d121      	bne.n	800031a <fsm_traffic_auto_mode+0xf6>
                switchAutoState(AMBER_RED, timeAmber, clock_counter_side);
 80002d6:	4b18      	ldr	r3, [pc, #96]	; (8000338 <fsm_traffic_auto_mode+0x114>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a15      	ldr	r2, [pc, #84]	; (8000330 <fsm_traffic_auto_mode+0x10c>)
 80002dc:	6812      	ldr	r2, [r2, #0]
 80002de:	4619      	mov	r1, r3
 80002e0:	2004      	movs	r0, #4
 80002e2:	f7ff ff83 	bl	80001ec <switchAutoState>
            break;
 80002e6:	e018      	b.n	800031a <fsm_traffic_auto_mode+0xf6>
        case AMBER_RED:
            turnOnAmber(0);
 80002e8:	2000      	movs	r0, #0
 80002ea:	f000 fb57 	bl	800099c <turnOnAmber>
            turnOnRed(1);
 80002ee:	2001      	movs	r0, #1
 80002f0:	f000 fb46 	bl	8000980 <turnOnRed>
            if (clock_counter_main == 0)
 80002f4:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <fsm_traffic_auto_mode+0x110>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d110      	bne.n	800031e <fsm_traffic_auto_mode+0xfa>
                switchAutoState(RED_GREEN, timeRed, timeGreen);
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <fsm_traffic_auto_mode+0x104>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a0a      	ldr	r2, [pc, #40]	; (800032c <fsm_traffic_auto_mode+0x108>)
 8000302:	6812      	ldr	r2, [r2, #0]
 8000304:	4619      	mov	r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	f7ff ff70 	bl	80001ec <switchAutoState>
            break;
 800030c:	e007      	b.n	800031e <fsm_traffic_auto_mode+0xfa>
        default:
            break;
 800030e:	bf00      	nop
 8000310:	e006      	b.n	8000320 <fsm_traffic_auto_mode+0xfc>
            break;
 8000312:	bf00      	nop
 8000314:	e004      	b.n	8000320 <fsm_traffic_auto_mode+0xfc>
            break;
 8000316:	bf00      	nop
 8000318:	e002      	b.n	8000320 <fsm_traffic_auto_mode+0xfc>
            break;
 800031a:	bf00      	nop
 800031c:	e000      	b.n	8000320 <fsm_traffic_auto_mode+0xfc>
            break;
 800031e:	bf00      	nop
    }
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000014 	.word	0x20000014
 8000328:	20000018 	.word	0x20000018
 800032c:	20000020 	.word	0x20000020
 8000330:	20000150 	.word	0x20000150
 8000334:	2000014c 	.word	0x2000014c
 8000338:	2000001c 	.word	0x2000001c

0800033c <logNewTime>:


// ======================= CHẾ ĐỘ TINH CHỈNH =======================
void logNewTime(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	if (tuningStatus == RED_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER RED :%d#\r\n",timeRed),500);
 8000340:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <logNewTime+0x7c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d10e      	bne.n	8000366 <logNewTime+0x2a>
 8000348:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <logNewTime+0x80>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	461a      	mov	r2, r3
 800034e:	491c      	ldr	r1, [pc, #112]	; (80003c0 <logNewTime+0x84>)
 8000350:	481c      	ldr	r0, [pc, #112]	; (80003c4 <logNewTime+0x88>)
 8000352:	f003 fc47 	bl	8003be4 <siprintf>
 8000356:	4603      	mov	r3, r0
 8000358:	b29a      	uxth	r2, r3
 800035a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800035e:	4919      	ldr	r1, [pc, #100]	; (80003c4 <logNewTime+0x88>)
 8000360:	4819      	ldr	r0, [pc, #100]	; (80003c8 <logNewTime+0x8c>)
 8000362:	f002 fd89 	bl	8002e78 <HAL_UART_Transmit>
	if (tuningStatus == AMBER_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER AMBER :%d#\r\n",timeAmber),500);
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <logNewTime+0x7c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b02      	cmp	r3, #2
 800036c:	d10e      	bne.n	800038c <logNewTime+0x50>
 800036e:	4b17      	ldr	r3, [pc, #92]	; (80003cc <logNewTime+0x90>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	461a      	mov	r2, r3
 8000374:	4916      	ldr	r1, [pc, #88]	; (80003d0 <logNewTime+0x94>)
 8000376:	4813      	ldr	r0, [pc, #76]	; (80003c4 <logNewTime+0x88>)
 8000378:	f003 fc34 	bl	8003be4 <siprintf>
 800037c:	4603      	mov	r3, r0
 800037e:	b29a      	uxth	r2, r3
 8000380:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000384:	490f      	ldr	r1, [pc, #60]	; (80003c4 <logNewTime+0x88>)
 8000386:	4810      	ldr	r0, [pc, #64]	; (80003c8 <logNewTime+0x8c>)
 8000388:	f002 fd76 	bl	8002e78 <HAL_UART_Transmit>
	if (tuningStatus == GREEN_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER GREEN :%d#\r\n",timeGreen),500);
 800038c:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <logNewTime+0x7c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b03      	cmp	r3, #3
 8000392:	d10e      	bne.n	80003b2 <logNewTime+0x76>
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <logNewTime+0x98>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	461a      	mov	r2, r3
 800039a:	490f      	ldr	r1, [pc, #60]	; (80003d8 <logNewTime+0x9c>)
 800039c:	4809      	ldr	r0, [pc, #36]	; (80003c4 <logNewTime+0x88>)
 800039e:	f003 fc21 	bl	8003be4 <siprintf>
 80003a2:	4603      	mov	r3, r0
 80003a4:	b29a      	uxth	r2, r3
 80003a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003aa:	4906      	ldr	r1, [pc, #24]	; (80003c4 <logNewTime+0x88>)
 80003ac:	4806      	ldr	r0, [pc, #24]	; (80003c8 <logNewTime+0x8c>)
 80003ae:	f002 fd63 	bl	8002e78 <HAL_UART_Transmit>
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000148 	.word	0x20000148
 80003bc:	20000018 	.word	0x20000018
 80003c0:	08004304 	.word	0x08004304
 80003c4:	200001a8 	.word	0x200001a8
 80003c8:	20000160 	.word	0x20000160
 80003cc:	2000001c 	.word	0x2000001c
 80003d0:	08004318 	.word	0x08004318
 80003d4:	20000020 	.word	0x20000020
 80003d8:	0800432c 	.word	0x0800432c

080003dc <fsm_traffic_tunning_mode>:
int initialTimeRed = 5;
int initialTimeAmber = 2;
int initialTimeGreen = 3;
void fsm_traffic_tunning_mode(void){
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	switch(tuningStatus){
 80003e0:	4ba3      	ldr	r3, [pc, #652]	; (8000670 <fsm_traffic_tunning_mode+0x294>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b0a      	cmp	r3, #10
 80003e6:	f200 8139 	bhi.w	800065c <fsm_traffic_tunning_mode+0x280>
 80003ea:	a201      	add	r2, pc, #4	; (adr r2, 80003f0 <fsm_traffic_tunning_mode+0x14>)
 80003ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f0:	0800041d 	.word	0x0800041d
 80003f4:	08000439 	.word	0x08000439
 80003f8:	080005a7 	.word	0x080005a7
 80003fc:	080004f1 	.word	0x080004f1
 8000400:	0800065d 	.word	0x0800065d
 8000404:	0800065d 	.word	0x0800065d
 8000408:	0800065d 	.word	0x0800065d
 800040c:	0800065d 	.word	0x0800065d
 8000410:	0800065d 	.word	0x0800065d
 8000414:	0800065d 	.word	0x0800065d
 8000418:	0800041d 	.word	0x0800041d
	case OFF:
		// do nothing
	case INIT:
		tuningStatus = RED_ADJ;
 800041c:	4b94      	ldr	r3, [pc, #592]	; (8000670 <fsm_traffic_tunning_mode+0x294>)
 800041e:	2201      	movs	r2, #1
 8000420:	601a      	str	r2, [r3, #0]
		clearRoadLed();
 8000422:	f000 fb23 	bl	8000a6c <clearRoadLed>
		logNewTime();
 8000426:	f7ff ff89 	bl	800033c <logNewTime>
		setTimer(timer_duration[1], 1);
 800042a:	4b92      	ldr	r3, [pc, #584]	; (8000674 <fsm_traffic_tunning_mode+0x298>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	2101      	movs	r1, #1
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff fe8b 	bl	800014c <setTimer>
		break;
 8000436:	e118      	b.n	800066a <fsm_traffic_tunning_mode+0x28e>
	case RED_ADJ:
		blinkyRed();
 8000438:	f000 facc 	bl	80009d4 <blinkyRed>
		if (isButtonShortPress(2)){
 800043c:	2002      	movs	r0, #2
 800043e:	f000 fc3b 	bl	8000cb8 <isButtonShortPress>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d011      	beq.n	800046c <fsm_traffic_tunning_mode+0x90>
            timeRed = (timeRed + 1) % 100;
 8000448:	4b8b      	ldr	r3, [pc, #556]	; (8000678 <fsm_traffic_tunning_mode+0x29c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	1c5a      	adds	r2, r3, #1
 800044e:	4b8b      	ldr	r3, [pc, #556]	; (800067c <fsm_traffic_tunning_mode+0x2a0>)
 8000450:	fb83 1302 	smull	r1, r3, r3, r2
 8000454:	1159      	asrs	r1, r3, #5
 8000456:	17d3      	asrs	r3, r2, #31
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	2164      	movs	r1, #100	; 0x64
 800045c:	fb01 f303 	mul.w	r3, r1, r3
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	4a85      	ldr	r2, [pc, #532]	; (8000678 <fsm_traffic_tunning_mode+0x29c>)
 8000464:	6013      	str	r3, [r2, #0]
            logNewTime();
 8000466:	f7ff ff69 	bl	800033c <logNewTime>
            timeGreen = initialTimeGreen;
            logNewTime();  // Gửi thông tin thời gian mới
            tuningStatus = GREEN_ADJ;  // Giữ trạng thái GREEN_ADJ
            clearRoadLed();  // Tắt tất cả đèn
        }
		break;
 800046a:	e0f9      	b.n	8000660 <fsm_traffic_tunning_mode+0x284>
		else if (isButtonLongPress(2)){
 800046c:	2002      	movs	r0, #2
 800046e:	f000 fc47 	bl	8000d00 <isButtonLongPress>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d012      	beq.n	800049e <fsm_traffic_tunning_mode+0xc2>
            timeRed = (timeRed - 1 + 100) % 100;
 8000478:	4b7f      	ldr	r3, [pc, #508]	; (8000678 <fsm_traffic_tunning_mode+0x29c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f103 0263 	add.w	r2, r3, #99	; 0x63
 8000480:	4b7e      	ldr	r3, [pc, #504]	; (800067c <fsm_traffic_tunning_mode+0x2a0>)
 8000482:	fb83 1302 	smull	r1, r3, r3, r2
 8000486:	1159      	asrs	r1, r3, #5
 8000488:	17d3      	asrs	r3, r2, #31
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	2164      	movs	r1, #100	; 0x64
 800048e:	fb01 f303 	mul.w	r3, r1, r3
 8000492:	1ad3      	subs	r3, r2, r3
 8000494:	4a78      	ldr	r2, [pc, #480]	; (8000678 <fsm_traffic_tunning_mode+0x29c>)
 8000496:	6013      	str	r3, [r2, #0]
            logNewTime();
 8000498:	f7ff ff50 	bl	800033c <logNewTime>
		break;
 800049c:	e0e0      	b.n	8000660 <fsm_traffic_tunning_mode+0x284>
		else if (isButtonShortPress(1)){
 800049e:	2001      	movs	r0, #1
 80004a0:	f000 fc0a 	bl	8000cb8 <isButtonShortPress>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d007      	beq.n	80004ba <fsm_traffic_tunning_mode+0xde>
			tuningStatus = GREEN_ADJ;
 80004aa:	4b71      	ldr	r3, [pc, #452]	; (8000670 <fsm_traffic_tunning_mode+0x294>)
 80004ac:	2203      	movs	r2, #3
 80004ae:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 80004b0:	f000 fadc 	bl	8000a6c <clearRoadLed>
			logNewTime();
 80004b4:	f7ff ff42 	bl	800033c <logNewTime>
		break;
 80004b8:	e0d2      	b.n	8000660 <fsm_traffic_tunning_mode+0x284>
        else if(isButtonShortPress(0)){
 80004ba:	2000      	movs	r0, #0
 80004bc:	f000 fbfc 	bl	8000cb8 <isButtonShortPress>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	f000 80cc 	beq.w	8000660 <fsm_traffic_tunning_mode+0x284>
            timeRed = initialTimeRed;
 80004c8:	4b6d      	ldr	r3, [pc, #436]	; (8000680 <fsm_traffic_tunning_mode+0x2a4>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a6a      	ldr	r2, [pc, #424]	; (8000678 <fsm_traffic_tunning_mode+0x29c>)
 80004ce:	6013      	str	r3, [r2, #0]
            timeAmber = initialTimeAmber;
 80004d0:	4b6c      	ldr	r3, [pc, #432]	; (8000684 <fsm_traffic_tunning_mode+0x2a8>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a6c      	ldr	r2, [pc, #432]	; (8000688 <fsm_traffic_tunning_mode+0x2ac>)
 80004d6:	6013      	str	r3, [r2, #0]
            timeGreen = initialTimeGreen;
 80004d8:	4b6c      	ldr	r3, [pc, #432]	; (800068c <fsm_traffic_tunning_mode+0x2b0>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a6c      	ldr	r2, [pc, #432]	; (8000690 <fsm_traffic_tunning_mode+0x2b4>)
 80004de:	6013      	str	r3, [r2, #0]
            logNewTime();  // Gửi thông tin thời gian mới
 80004e0:	f7ff ff2c 	bl	800033c <logNewTime>
            tuningStatus = GREEN_ADJ;  // Giữ trạng thái GREEN_ADJ
 80004e4:	4b62      	ldr	r3, [pc, #392]	; (8000670 <fsm_traffic_tunning_mode+0x294>)
 80004e6:	2203      	movs	r2, #3
 80004e8:	601a      	str	r2, [r3, #0]
            clearRoadLed();  // Tắt tất cả đèn
 80004ea:	f000 fabf 	bl	8000a6c <clearRoadLed>
		break;
 80004ee:	e0b7      	b.n	8000660 <fsm_traffic_tunning_mode+0x284>
	case GREEN_ADJ:
		blinkyGreen();
 80004f0:	f000 faa2 	bl	8000a38 <blinkyGreen>
		if(isButtonShortPress(2)){
 80004f4:	2002      	movs	r0, #2
 80004f6:	f000 fbdf 	bl	8000cb8 <isButtonShortPress>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d011      	beq.n	8000524 <fsm_traffic_tunning_mode+0x148>
            timeGreen = (timeGreen + 1) % 100;
 8000500:	4b63      	ldr	r3, [pc, #396]	; (8000690 <fsm_traffic_tunning_mode+0x2b4>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	4b5d      	ldr	r3, [pc, #372]	; (800067c <fsm_traffic_tunning_mode+0x2a0>)
 8000508:	fb83 1302 	smull	r1, r3, r3, r2
 800050c:	1159      	asrs	r1, r3, #5
 800050e:	17d3      	asrs	r3, r2, #31
 8000510:	1acb      	subs	r3, r1, r3
 8000512:	2164      	movs	r1, #100	; 0x64
 8000514:	fb01 f303 	mul.w	r3, r1, r3
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	4a5d      	ldr	r2, [pc, #372]	; (8000690 <fsm_traffic_tunning_mode+0x2b4>)
 800051c:	6013      	str	r3, [r2, #0]
            logNewTime();;
 800051e:	f7ff ff0d 	bl	800033c <logNewTime>
            timeGreen = initialTimeGreen;
            logNewTime();  // Gửi thông tin thời gian mới
            tuningStatus = GREEN_ADJ;  // Giữ trạng thái GREEN_ADJ
            clearRoadLed();  // Tắt tất cả đèn
        }
		break;
 8000522:	e09f      	b.n	8000664 <fsm_traffic_tunning_mode+0x288>
		else if(isButtonLongPress(2)){
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fbeb 	bl	8000d00 <isButtonLongPress>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d012      	beq.n	8000556 <fsm_traffic_tunning_mode+0x17a>
            timeGreen = (timeGreen - 1 + 100) % 100;
 8000530:	4b57      	ldr	r3, [pc, #348]	; (8000690 <fsm_traffic_tunning_mode+0x2b4>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f103 0263 	add.w	r2, r3, #99	; 0x63
 8000538:	4b50      	ldr	r3, [pc, #320]	; (800067c <fsm_traffic_tunning_mode+0x2a0>)
 800053a:	fb83 1302 	smull	r1, r3, r3, r2
 800053e:	1159      	asrs	r1, r3, #5
 8000540:	17d3      	asrs	r3, r2, #31
 8000542:	1acb      	subs	r3, r1, r3
 8000544:	2164      	movs	r1, #100	; 0x64
 8000546:	fb01 f303 	mul.w	r3, r1, r3
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	4a50      	ldr	r2, [pc, #320]	; (8000690 <fsm_traffic_tunning_mode+0x2b4>)
 800054e:	6013      	str	r3, [r2, #0]
            logNewTime();
 8000550:	f7ff fef4 	bl	800033c <logNewTime>
		break;
 8000554:	e086      	b.n	8000664 <fsm_traffic_tunning_mode+0x288>
		else if(isButtonShortPress(1)){
 8000556:	2001      	movs	r0, #1
 8000558:	f000 fbae 	bl	8000cb8 <isButtonShortPress>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d007      	beq.n	8000572 <fsm_traffic_tunning_mode+0x196>
			tuningStatus = AMBER_ADJ;
 8000562:	4b43      	ldr	r3, [pc, #268]	; (8000670 <fsm_traffic_tunning_mode+0x294>)
 8000564:	2202      	movs	r2, #2
 8000566:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 8000568:	f000 fa80 	bl	8000a6c <clearRoadLed>
			logNewTime();
 800056c:	f7ff fee6 	bl	800033c <logNewTime>
		break;
 8000570:	e078      	b.n	8000664 <fsm_traffic_tunning_mode+0x288>
        else if(isButtonShortPress(0)){
 8000572:	2000      	movs	r0, #0
 8000574:	f000 fba0 	bl	8000cb8 <isButtonShortPress>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d072      	beq.n	8000664 <fsm_traffic_tunning_mode+0x288>
            timeRed = initialTimeRed;
 800057e:	4b40      	ldr	r3, [pc, #256]	; (8000680 <fsm_traffic_tunning_mode+0x2a4>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a3d      	ldr	r2, [pc, #244]	; (8000678 <fsm_traffic_tunning_mode+0x29c>)
 8000584:	6013      	str	r3, [r2, #0]
            timeAmber = initialTimeAmber;
 8000586:	4b3f      	ldr	r3, [pc, #252]	; (8000684 <fsm_traffic_tunning_mode+0x2a8>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a3f      	ldr	r2, [pc, #252]	; (8000688 <fsm_traffic_tunning_mode+0x2ac>)
 800058c:	6013      	str	r3, [r2, #0]
            timeGreen = initialTimeGreen;
 800058e:	4b3f      	ldr	r3, [pc, #252]	; (800068c <fsm_traffic_tunning_mode+0x2b0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a3f      	ldr	r2, [pc, #252]	; (8000690 <fsm_traffic_tunning_mode+0x2b4>)
 8000594:	6013      	str	r3, [r2, #0]
            logNewTime();  // Gửi thông tin thời gian mới
 8000596:	f7ff fed1 	bl	800033c <logNewTime>
            tuningStatus = GREEN_ADJ;  // Giữ trạng thái GREEN_ADJ
 800059a:	4b35      	ldr	r3, [pc, #212]	; (8000670 <fsm_traffic_tunning_mode+0x294>)
 800059c:	2203      	movs	r2, #3
 800059e:	601a      	str	r2, [r3, #0]
            clearRoadLed();  // Tắt tất cả đèn
 80005a0:	f000 fa64 	bl	8000a6c <clearRoadLed>
		break;
 80005a4:	e05e      	b.n	8000664 <fsm_traffic_tunning_mode+0x288>
	case AMBER_ADJ:
		blinkyAmber();
 80005a6:	f000 fa2d 	bl	8000a04 <blinkyAmber>
		if (isButtonShortPress(2)){
 80005aa:	2002      	movs	r0, #2
 80005ac:	f000 fb84 	bl	8000cb8 <isButtonShortPress>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d011      	beq.n	80005da <fsm_traffic_tunning_mode+0x1fe>
            timeAmber = (timeAmber + 1) % 100;
 80005b6:	4b34      	ldr	r3, [pc, #208]	; (8000688 <fsm_traffic_tunning_mode+0x2ac>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	4b2f      	ldr	r3, [pc, #188]	; (800067c <fsm_traffic_tunning_mode+0x2a0>)
 80005be:	fb83 1302 	smull	r1, r3, r3, r2
 80005c2:	1159      	asrs	r1, r3, #5
 80005c4:	17d3      	asrs	r3, r2, #31
 80005c6:	1acb      	subs	r3, r1, r3
 80005c8:	2164      	movs	r1, #100	; 0x64
 80005ca:	fb01 f303 	mul.w	r3, r1, r3
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	4a2d      	ldr	r2, [pc, #180]	; (8000688 <fsm_traffic_tunning_mode+0x2ac>)
 80005d2:	6013      	str	r3, [r2, #0]
            logNewTime();
 80005d4:	f7ff feb2 	bl	800033c <logNewTime>
            timeGreen = initialTimeGreen;
            logNewTime();  // Gửi thông tin thời gian mới
            tuningStatus = GREEN_ADJ;  // Giữ trạng thái GREEN_ADJ
            clearRoadLed();  // Tắt tất cả đèn
        }
		break;
 80005d8:	e046      	b.n	8000668 <fsm_traffic_tunning_mode+0x28c>
		else if(isButtonLongPress(2)){
 80005da:	2002      	movs	r0, #2
 80005dc:	f000 fb90 	bl	8000d00 <isButtonLongPress>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d012      	beq.n	800060c <fsm_traffic_tunning_mode+0x230>
            timeAmber = (timeAmber - 1 + 100) % 100;
 80005e6:	4b28      	ldr	r3, [pc, #160]	; (8000688 <fsm_traffic_tunning_mode+0x2ac>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f103 0263 	add.w	r2, r3, #99	; 0x63
 80005ee:	4b23      	ldr	r3, [pc, #140]	; (800067c <fsm_traffic_tunning_mode+0x2a0>)
 80005f0:	fb83 1302 	smull	r1, r3, r3, r2
 80005f4:	1159      	asrs	r1, r3, #5
 80005f6:	17d3      	asrs	r3, r2, #31
 80005f8:	1acb      	subs	r3, r1, r3
 80005fa:	2164      	movs	r1, #100	; 0x64
 80005fc:	fb01 f303 	mul.w	r3, r1, r3
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	4a21      	ldr	r2, [pc, #132]	; (8000688 <fsm_traffic_tunning_mode+0x2ac>)
 8000604:	6013      	str	r3, [r2, #0]
            logNewTime();
 8000606:	f7ff fe99 	bl	800033c <logNewTime>
		break;
 800060a:	e02d      	b.n	8000668 <fsm_traffic_tunning_mode+0x28c>
		else if (isButtonShortPress(1)){
 800060c:	2001      	movs	r0, #1
 800060e:	f000 fb53 	bl	8000cb8 <isButtonShortPress>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d007      	beq.n	8000628 <fsm_traffic_tunning_mode+0x24c>
			tuningStatus = RED_ADJ;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <fsm_traffic_tunning_mode+0x294>)
 800061a:	2201      	movs	r2, #1
 800061c:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 800061e:	f000 fa25 	bl	8000a6c <clearRoadLed>
			logNewTime();
 8000622:	f7ff fe8b 	bl	800033c <logNewTime>
		break;
 8000626:	e01f      	b.n	8000668 <fsm_traffic_tunning_mode+0x28c>
        else if(isButtonShortPress(0)){
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fb45 	bl	8000cb8 <isButtonShortPress>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d019      	beq.n	8000668 <fsm_traffic_tunning_mode+0x28c>
            timeRed = initialTimeRed;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <fsm_traffic_tunning_mode+0x2a4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <fsm_traffic_tunning_mode+0x29c>)
 800063a:	6013      	str	r3, [r2, #0]
            timeAmber = initialTimeAmber;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <fsm_traffic_tunning_mode+0x2a8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a11      	ldr	r2, [pc, #68]	; (8000688 <fsm_traffic_tunning_mode+0x2ac>)
 8000642:	6013      	str	r3, [r2, #0]
            timeGreen = initialTimeGreen;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <fsm_traffic_tunning_mode+0x2b0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a11      	ldr	r2, [pc, #68]	; (8000690 <fsm_traffic_tunning_mode+0x2b4>)
 800064a:	6013      	str	r3, [r2, #0]
            logNewTime();  // Gửi thông tin thời gian mới
 800064c:	f7ff fe76 	bl	800033c <logNewTime>
            tuningStatus = GREEN_ADJ;  // Giữ trạng thái GREEN_ADJ
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <fsm_traffic_tunning_mode+0x294>)
 8000652:	2203      	movs	r2, #3
 8000654:	601a      	str	r2, [r3, #0]
            clearRoadLed();  // Tắt tất cả đèn
 8000656:	f000 fa09 	bl	8000a6c <clearRoadLed>
		break;
 800065a:	e005      	b.n	8000668 <fsm_traffic_tunning_mode+0x28c>

	default:
		break;
 800065c:	bf00      	nop
 800065e:	e004      	b.n	800066a <fsm_traffic_tunning_mode+0x28e>
		break;
 8000660:	bf00      	nop
 8000662:	e002      	b.n	800066a <fsm_traffic_tunning_mode+0x28e>
		break;
 8000664:	bf00      	nop
 8000666:	e000      	b.n	800066a <fsm_traffic_tunning_mode+0x28e>
		break;
 8000668:	bf00      	nop
	}
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000148 	.word	0x20000148
 8000674:	20000000 	.word	0x20000000
 8000678:	20000018 	.word	0x20000018
 800067c:	51eb851f 	.word	0x51eb851f
 8000680:	20000024 	.word	0x20000024
 8000684:	20000028 	.word	0x20000028
 8000688:	2000001c 	.word	0x2000001c
 800068c:	2000002c 	.word	0x2000002c
 8000690:	20000020 	.word	0x20000020

08000694 <fsm_switch_mode>:
// ======================= CHUYỂN ĐỔI CHẾ ĐỘ =======================
void fsm_switch_mode(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	if (isButtonLongPress(0)){
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fb31 	bl	8000d00 <isButtonLongPress>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d02c      	beq.n	80006fe <fsm_switch_mode+0x6a>
		if (trafficMode != MANUAL_MODE) {
 80006a4:	4b30      	ldr	r3, [pc, #192]	; (8000768 <fsm_switch_mode+0xd4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d018      	beq.n	80006de <fsm_switch_mode+0x4a>
			trafficMode = MANUAL_MODE;
 80006ac:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <fsm_switch_mode+0xd4>)
 80006ae:	2202      	movs	r2, #2
 80006b0:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO MANUAL MODE#\r\n"),500);
 80006b2:	492e      	ldr	r1, [pc, #184]	; (800076c <fsm_switch_mode+0xd8>)
 80006b4:	482e      	ldr	r0, [pc, #184]	; (8000770 <fsm_switch_mode+0xdc>)
 80006b6:	f003 fa95 	bl	8003be4 <siprintf>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29a      	uxth	r2, r3
 80006be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006c2:	492b      	ldr	r1, [pc, #172]	; (8000770 <fsm_switch_mode+0xdc>)
 80006c4:	482b      	ldr	r0, [pc, #172]	; (8000774 <fsm_switch_mode+0xe0>)
 80006c6:	f002 fbd7 	bl	8002e78 <HAL_UART_Transmit>
			// TODO: prepare for manual mode
			manualStatus = INIT;
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <fsm_switch_mode+0xe4>)
 80006cc:	220a      	movs	r2, #10
 80006ce:	601a      	str	r2, [r3, #0]
			autoStatus= OFF;
 80006d0:	4b2a      	ldr	r3, [pc, #168]	; (800077c <fsm_switch_mode+0xe8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
			tuningStatus = OFF;
 80006d6:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <fsm_switch_mode+0xec>)
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
		else {
			trafficMode = INIT;
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"),500);
		}
	}
}
 80006dc:	e041      	b.n	8000762 <fsm_switch_mode+0xce>
			trafficMode = INIT;
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <fsm_switch_mode+0xd4>)
 80006e0:	220a      	movs	r2, #10
 80006e2:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"),500);
 80006e4:	4927      	ldr	r1, [pc, #156]	; (8000784 <fsm_switch_mode+0xf0>)
 80006e6:	4822      	ldr	r0, [pc, #136]	; (8000770 <fsm_switch_mode+0xdc>)
 80006e8:	f003 fa7c 	bl	8003be4 <siprintf>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006f4:	491e      	ldr	r1, [pc, #120]	; (8000770 <fsm_switch_mode+0xdc>)
 80006f6:	481f      	ldr	r0, [pc, #124]	; (8000774 <fsm_switch_mode+0xe0>)
 80006f8:	f002 fbbe 	bl	8002e78 <HAL_UART_Transmit>
}
 80006fc:	e031      	b.n	8000762 <fsm_switch_mode+0xce>
	else if (isButtonLongPress(1)){
 80006fe:	2001      	movs	r0, #1
 8000700:	f000 fafe 	bl	8000d00 <isButtonLongPress>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d02b      	beq.n	8000762 <fsm_switch_mode+0xce>
		if (trafficMode != TUNING_MODE) {
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <fsm_switch_mode+0xd4>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b03      	cmp	r3, #3
 8000710:	d018      	beq.n	8000744 <fsm_switch_mode+0xb0>
			trafficMode = TUNING_MODE;
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <fsm_switch_mode+0xd4>)
 8000714:	2203      	movs	r2, #3
 8000716:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO TUNING MODE#\r\n"),500);
 8000718:	491b      	ldr	r1, [pc, #108]	; (8000788 <fsm_switch_mode+0xf4>)
 800071a:	4815      	ldr	r0, [pc, #84]	; (8000770 <fsm_switch_mode+0xdc>)
 800071c:	f003 fa62 	bl	8003be4 <siprintf>
 8000720:	4603      	mov	r3, r0
 8000722:	b29a      	uxth	r2, r3
 8000724:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000728:	4911      	ldr	r1, [pc, #68]	; (8000770 <fsm_switch_mode+0xdc>)
 800072a:	4812      	ldr	r0, [pc, #72]	; (8000774 <fsm_switch_mode+0xe0>)
 800072c:	f002 fba4 	bl	8002e78 <HAL_UART_Transmit>
			tuningStatus = INIT;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <fsm_switch_mode+0xec>)
 8000732:	220a      	movs	r2, #10
 8000734:	601a      	str	r2, [r3, #0]
			autoStatus = OFF;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <fsm_switch_mode+0xe8>)
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
			manualStatus = OFF;
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <fsm_switch_mode+0xe4>)
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
}
 8000742:	e00e      	b.n	8000762 <fsm_switch_mode+0xce>
			trafficMode = INIT;
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <fsm_switch_mode+0xd4>)
 8000746:	220a      	movs	r2, #10
 8000748:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"),500);
 800074a:	490e      	ldr	r1, [pc, #56]	; (8000784 <fsm_switch_mode+0xf0>)
 800074c:	4808      	ldr	r0, [pc, #32]	; (8000770 <fsm_switch_mode+0xdc>)
 800074e:	f003 fa49 	bl	8003be4 <siprintf>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800075a:	4905      	ldr	r1, [pc, #20]	; (8000770 <fsm_switch_mode+0xdc>)
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <fsm_switch_mode+0xe0>)
 800075e:	f002 fb8b 	bl	8002e78 <HAL_UART_Transmit>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000010 	.word	0x20000010
 800076c:	08004340 	.word	0x08004340
 8000770:	200001a8 	.word	0x200001a8
 8000774:	20000160 	.word	0x20000160
 8000778:	20000144 	.word	0x20000144
 800077c:	20000014 	.word	0x20000014
 8000780:	20000148 	.word	0x20000148
 8000784:	0800435c 	.word	0x0800435c
 8000788:	08004374 	.word	0x08004374

0800078c <fsm_traffic>:
// ======================= VÒNG LẶP CHÍNH =======================
void fsm_traffic(void){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	switch(trafficMode){
 8000790:	4b25      	ldr	r3, [pc, #148]	; (8000828 <fsm_traffic+0x9c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b0a      	cmp	r3, #10
 8000796:	d006      	beq.n	80007a6 <fsm_traffic+0x1a>
 8000798:	2b0a      	cmp	r3, #10
 800079a:	dc41      	bgt.n	8000820 <fsm_traffic+0x94>
 800079c:	2b01      	cmp	r3, #1
 800079e:	d039      	beq.n	8000814 <fsm_traffic+0x88>
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	d03a      	beq.n	800081a <fsm_traffic+0x8e>
		break;
	case TUNING_MODE:
		fsm_traffic_tunning_mode();
		break;
	default:
		break;
 80007a4:	e03c      	b.n	8000820 <fsm_traffic+0x94>
		if (timeRed != (timeAmber + timeGreen)){
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <fsm_traffic+0xa0>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <fsm_traffic+0xa4>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	441a      	add	r2, r3
 80007b0:	4b20      	ldr	r3, [pc, #128]	; (8000834 <fsm_traffic+0xa8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d018      	beq.n	80007ea <fsm_traffic+0x5e>
			trafficMode = ERROR_MODE;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <fsm_traffic+0x9c>)
 80007ba:	2204      	movs	r2, #4
 80007bc:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER ERROR#\r\n"),500);
 80007be:	491e      	ldr	r1, [pc, #120]	; (8000838 <fsm_traffic+0xac>)
 80007c0:	481e      	ldr	r0, [pc, #120]	; (800083c <fsm_traffic+0xb0>)
 80007c2:	f003 fa0f 	bl	8003be4 <siprintf>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ce:	491b      	ldr	r1, [pc, #108]	; (800083c <fsm_traffic+0xb0>)
 80007d0:	481b      	ldr	r0, [pc, #108]	; (8000840 <fsm_traffic+0xb4>)
 80007d2:	f002 fb51 	bl	8002e78 <HAL_UART_Transmit>
			autoStatus = OFF;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <fsm_traffic+0xb8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
			manualStatus = OFF;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <fsm_traffic+0xbc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
			tuningStatus = OFF;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <fsm_traffic+0xc0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	e011      	b.n	800080e <fsm_traffic+0x82>
			trafficMode = AUTO_MODE;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <fsm_traffic+0x9c>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
			autoStatus = INIT;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <fsm_traffic+0xb8>)
 80007f2:	220a      	movs	r2, #10
 80007f4:	601a      	str	r2, [r3, #0]
			manualStatus = OFF;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <fsm_traffic+0xbc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
			tuningStatus = OFF;
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <fsm_traffic+0xc0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
			setTimer(timer_duration[0], 0);
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <fsm_traffic+0xc4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fc9f 	bl	800014c <setTimer>
		turnOffAllLED();
 800080e:	f000 f8ab 	bl	8000968 <turnOffAllLED>
		break;
 8000812:	e006      	b.n	8000822 <fsm_traffic+0x96>
		fsm_traffic_auto_mode();
 8000814:	f7ff fd06 	bl	8000224 <fsm_traffic_auto_mode>
		break;
 8000818:	e003      	b.n	8000822 <fsm_traffic+0x96>
		fsm_traffic_tunning_mode();
 800081a:	f7ff fddf 	bl	80003dc <fsm_traffic_tunning_mode>
		break;
 800081e:	e000      	b.n	8000822 <fsm_traffic+0x96>
		break;
 8000820:	bf00      	nop
	}
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000010 	.word	0x20000010
 800082c:	2000001c 	.word	0x2000001c
 8000830:	20000020 	.word	0x20000020
 8000834:	20000018 	.word	0x20000018
 8000838:	08004390 	.word	0x08004390
 800083c:	200001a8 	.word	0x200001a8
 8000840:	20000160 	.word	0x20000160
 8000844:	20000014 	.word	0x20000014
 8000848:	20000144 	.word	0x20000144
 800084c:	20000148 	.word	0x20000148
 8000850:	20000000 	.word	0x20000000

08000854 <clock_counter_traffic_update>:

void clock_counter_traffic_update(void){
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	if((timer_flag[0] == 1) && (trafficMode == AUTO_MODE)){
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <clock_counter_traffic_update+0x74>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d131      	bne.n	80008c4 <clock_counter_traffic_update+0x70>
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <clock_counter_traffic_update+0x78>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d12d      	bne.n	80008c4 <clock_counter_traffic_update+0x70>
		clock_counter_main--;
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <clock_counter_traffic_update+0x7c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3b01      	subs	r3, #1
 800086e:	4a18      	ldr	r2, [pc, #96]	; (80008d0 <clock_counter_traffic_update+0x7c>)
 8000870:	6013      	str	r3, [r2, #0]
		clock_counter_side--;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <clock_counter_traffic_update+0x80>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	3b01      	subs	r3, #1
 8000878:	4a16      	ldr	r2, [pc, #88]	; (80008d4 <clock_counter_traffic_update+0x80>)
 800087a:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "\n!7SEG WAY1:%d#\r\n",clock_counter_main),500);
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <clock_counter_traffic_update+0x7c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4915      	ldr	r1, [pc, #84]	; (80008d8 <clock_counter_traffic_update+0x84>)
 8000884:	4815      	ldr	r0, [pc, #84]	; (80008dc <clock_counter_traffic_update+0x88>)
 8000886:	f003 f9ad 	bl	8003be4 <siprintf>
 800088a:	4603      	mov	r3, r0
 800088c:	b29a      	uxth	r2, r3
 800088e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000892:	4912      	ldr	r1, [pc, #72]	; (80008dc <clock_counter_traffic_update+0x88>)
 8000894:	4812      	ldr	r0, [pc, #72]	; (80008e0 <clock_counter_traffic_update+0x8c>)
 8000896:	f002 faef 	bl	8002e78 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!7SEG WAY2:%d#\r\n",clock_counter_side),500);
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <clock_counter_traffic_update+0x80>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	4910      	ldr	r1, [pc, #64]	; (80008e4 <clock_counter_traffic_update+0x90>)
 80008a2:	480e      	ldr	r0, [pc, #56]	; (80008dc <clock_counter_traffic_update+0x88>)
 80008a4:	f003 f99e 	bl	8003be4 <siprintf>
 80008a8:	4603      	mov	r3, r0
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008b0:	490a      	ldr	r1, [pc, #40]	; (80008dc <clock_counter_traffic_update+0x88>)
 80008b2:	480b      	ldr	r0, [pc, #44]	; (80008e0 <clock_counter_traffic_update+0x8c>)
 80008b4:	f002 fae0 	bl	8002e78 <HAL_UART_Transmit>

		setTimer(timer_duration[0], 0);
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <clock_counter_traffic_update+0x94>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fc44 	bl	800014c <setTimer>
	}
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000134 	.word	0x20000134
 80008cc:	20000010 	.word	0x20000010
 80008d0:	2000014c 	.word	0x2000014c
 80008d4:	20000150 	.word	0x20000150
 80008d8:	080043a0 	.word	0x080043a0
 80008dc:	200001a8 	.word	0x200001a8
 80008e0:	20000160 	.word	0x20000160
 80008e4:	080043b4 	.word	0x080043b4
 80008e8:	20000000 	.word	0x20000000

080008ec <setLEDState>:
 */

#include "Traffic_Light_FSM.h"

// Common function to control LED states
void setLEDState(GPIO_PinState red, GPIO_PinState amber, GPIO_PinState green, int index) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	4603      	mov	r3, r0
 80008f6:	71fb      	strb	r3, [r7, #7]
 80008f8:	460b      	mov	r3, r1
 80008fa:	71bb      	strb	r3, [r7, #6]
 80008fc:	4613      	mov	r3, r2
 80008fe:	717b      	strb	r3, [r7, #5]
    if (index == 0) { // Way 1
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d112      	bne.n	800092c <setLEDState+0x40>
        HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin, red);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	461a      	mov	r2, r3
 800090a:	2110      	movs	r1, #16
 800090c:	4815      	ldr	r0, [pc, #84]	; (8000964 <setLEDState+0x78>)
 800090e:	f001 fa48 	bl	8001da2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, AMBER_LED1_Pin, amber);
 8000912:	79bb      	ldrb	r3, [r7, #6]
 8000914:	461a      	mov	r2, r3
 8000916:	2120      	movs	r1, #32
 8000918:	4812      	ldr	r0, [pc, #72]	; (8000964 <setLEDState+0x78>)
 800091a:	f001 fa42 	bl	8001da2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GREEN_LED1_Pin, green);
 800091e:	797b      	ldrb	r3, [r7, #5]
 8000920:	461a      	mov	r2, r3
 8000922:	2140      	movs	r1, #64	; 0x40
 8000924:	480f      	ldr	r0, [pc, #60]	; (8000964 <setLEDState+0x78>)
 8000926:	f001 fa3c 	bl	8001da2 <HAL_GPIO_WritePin>
    } else if (index == 1) { // Way 2
        HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin, red);
        HAL_GPIO_WritePin(GPIOA, AMBER_LED2_Pin, amber);
        HAL_GPIO_WritePin(GPIOA, GREEN_LED2_Pin, green);
    }
}
 800092a:	e016      	b.n	800095a <setLEDState+0x6e>
    } else if (index == 1) { // Way 2
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d113      	bne.n	800095a <setLEDState+0x6e>
        HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin, red);
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	461a      	mov	r2, r3
 8000936:	2180      	movs	r1, #128	; 0x80
 8000938:	480a      	ldr	r0, [pc, #40]	; (8000964 <setLEDState+0x78>)
 800093a:	f001 fa32 	bl	8001da2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, AMBER_LED2_Pin, amber);
 800093e:	79bb      	ldrb	r3, [r7, #6]
 8000940:	461a      	mov	r2, r3
 8000942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000946:	4807      	ldr	r0, [pc, #28]	; (8000964 <setLEDState+0x78>)
 8000948:	f001 fa2b 	bl	8001da2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GREEN_LED2_Pin, green);
 800094c:	797b      	ldrb	r3, [r7, #5]
 800094e:	461a      	mov	r2, r3
 8000950:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <setLEDState+0x78>)
 8000956:	f001 fa24 	bl	8001da2 <HAL_GPIO_WritePin>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40010800 	.word	0x40010800

08000968 <turnOffAllLED>:

// Turn off all LEDs
void turnOffAllLED(void) {
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | RED_LED2_Pin | AMBER_LED1_Pin |
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8000972:	4802      	ldr	r0, [pc, #8]	; (800097c <turnOffAllLED+0x14>)
 8000974:	f001 fa15 	bl	8001da2 <HAL_GPIO_WritePin>
                      AMBER_LED2_Pin | GREEN_LED1_Pin | GREEN_LED2_Pin, GPIO_PIN_SET);
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40010800 	.word	0x40010800

08000980 <turnOnRed>:
    HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | RED_LED2_Pin | AMBER_LED1_Pin |
                      AMBER_LED2_Pin | GREEN_LED1_Pin | GREEN_LED2_Pin, GPIO_PIN_RESET);
}

// Turn on RED LED for specified way
void turnOnRed(int index) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
    setLEDState(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, index);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2201      	movs	r2, #1
 800098c:	2101      	movs	r1, #1
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff ffac 	bl	80008ec <setLEDState>
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <turnOnAmber>:

// Turn on AMBER LED for specified way
void turnOnAmber(int index) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    setLEDState(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, index);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2201      	movs	r2, #1
 80009a8:	2100      	movs	r1, #0
 80009aa:	2001      	movs	r0, #1
 80009ac:	f7ff ff9e 	bl	80008ec <setLEDState>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <turnOnGreen>:

// Turn on GREEN LED for specified way
void turnOnGreen(int index) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    setLEDState(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, index);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2200      	movs	r2, #0
 80009c4:	2101      	movs	r1, #1
 80009c6:	2001      	movs	r0, #1
 80009c8:	f7ff ff90 	bl	80008ec <setLEDState>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <blinkyRed>:

// Blink RED LEDs
void blinkyRed(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
    if (timer_flag[1] == 1) {
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <blinkyRed+0x24>)
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d109      	bne.n	80009f4 <blinkyRed+0x20>
        HAL_GPIO_TogglePin(GPIOA, RED_LED1_Pin | RED_LED2_Pin);
 80009e0:	2190      	movs	r1, #144	; 0x90
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <blinkyRed+0x28>)
 80009e4:	f001 f9f5 	bl	8001dd2 <HAL_GPIO_TogglePin>
        setTimer(timer_duration[1], 1);
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <blinkyRed+0x2c>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	2101      	movs	r1, #1
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fbac 	bl	800014c <setTimer>
    }
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000134 	.word	0x20000134
 80009fc:	40010800 	.word	0x40010800
 8000a00:	20000000 	.word	0x20000000

08000a04 <blinkyAmber>:

// Blink AMBER LEDs
void blinkyAmber(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    if (timer_flag[1] == 1) {
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <blinkyAmber+0x28>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d10a      	bne.n	8000a26 <blinkyAmber+0x22>
        HAL_GPIO_TogglePin(GPIOA, AMBER_LED1_Pin | AMBER_LED2_Pin);
 8000a10:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <blinkyAmber+0x2c>)
 8000a16:	f001 f9dc 	bl	8001dd2 <HAL_GPIO_TogglePin>
        setTimer(timer_duration[1], 1);
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <blinkyAmber+0x30>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	2101      	movs	r1, #1
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fb93 	bl	800014c <setTimer>
    }
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000134 	.word	0x20000134
 8000a30:	40010800 	.word	0x40010800
 8000a34:	20000000 	.word	0x20000000

08000a38 <blinkyGreen>:

// Blink GREEN LEDs
void blinkyGreen(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
    if (timer_flag[1] == 1) {
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <blinkyGreen+0x28>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10a      	bne.n	8000a5a <blinkyGreen+0x22>
        HAL_GPIO_TogglePin(GPIOA, GREEN_LED1_Pin | GREEN_LED2_Pin);
 8000a44:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a48:	4806      	ldr	r0, [pc, #24]	; (8000a64 <blinkyGreen+0x2c>)
 8000a4a:	f001 f9c2 	bl	8001dd2 <HAL_GPIO_TogglePin>
        setTimer(timer_duration[1], 1);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <blinkyGreen+0x30>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	2101      	movs	r1, #1
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fb79 	bl	800014c <setTimer>
    }
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000134 	.word	0x20000134
 8000a64:	40010800 	.word	0x40010800
 8000a68:	20000000 	.word	0x20000000

08000a6c <clearRoadLed>:

// Clear all road LEDs
void clearRoadLed(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
    turnOffAllLED();
 8000a70:	f7ff ff7a 	bl	8000968 <turnOffAllLED>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <getButtonValue>:

struct keyget listButton[NUM_BUTTON] = {{RELEASE, RELEASE, RELEASE, RELEASE, 0, 0}};
GPIO_TypeDef * BUTTON_GPIO[NUM_BUTTON] = {BUTTON1_GPIO_Port, BUTTON2_GPIO_Port, BUTTON3_GPIO_Port};
uint16_t BUTTON_PIN[NUM_BUTTON] = {BUTTON1_Pin, BUTTON2_Pin, BUTTON3_Pin};

void getButtonValue(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTON; i++){
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	e109      	b.n	8000c98 <getButtonValue+0x220>
		listButton[i].keyget1 = listButton[i].keyget2;
 8000a84:	4989      	ldr	r1, [pc, #548]	; (8000cac <getButtonValue+0x234>)
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	1a9b      	subs	r3, r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	440b      	add	r3, r1
 8000a92:	3304      	adds	r3, #4
 8000a94:	6819      	ldr	r1, [r3, #0]
 8000a96:	4885      	ldr	r0, [pc, #532]	; (8000cac <getButtonValue+0x234>)
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	1a9b      	subs	r3, r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4403      	add	r3, r0
 8000aa4:	6019      	str	r1, [r3, #0]
		listButton[i].keyget2 = listButton[i].keyget3;
 8000aa6:	4981      	ldr	r1, [pc, #516]	; (8000cac <getButtonValue+0x234>)
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	1a9b      	subs	r3, r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3308      	adds	r3, #8
 8000ab6:	6819      	ldr	r1, [r3, #0]
 8000ab8:	487c      	ldr	r0, [pc, #496]	; (8000cac <getButtonValue+0x234>)
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	4613      	mov	r3, r2
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	1a9b      	subs	r3, r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	4403      	add	r3, r0
 8000ac6:	3304      	adds	r3, #4
 8000ac8:	6019      	str	r1, [r3, #0]
		listButton[i].keyget3 = HAL_GPIO_ReadPin(BUTTON_GPIO[i], BUTTON_PIN[i]);
 8000aca:	4a79      	ldr	r2, [pc, #484]	; (8000cb0 <getButtonValue+0x238>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ad2:	4978      	ldr	r1, [pc, #480]	; (8000cb4 <getButtonValue+0x23c>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ada:	4619      	mov	r1, r3
 8000adc:	4610      	mov	r0, r2
 8000ade:	f001 f949 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	4971      	ldr	r1, [pc, #452]	; (8000cac <getButtonValue+0x234>)
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	4613      	mov	r3, r2
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	1a9b      	subs	r3, r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	440b      	add	r3, r1
 8000af4:	3308      	adds	r3, #8
 8000af6:	6018      	str	r0, [r3, #0]
		if((listButton[i].keyget1 == listButton[i].keyget2) && (listButton[i].keyget2 == listButton[i].keyget3)){
 8000af8:	496c      	ldr	r1, [pc, #432]	; (8000cac <getButtonValue+0x234>)
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	4613      	mov	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	1a9b      	subs	r3, r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	440b      	add	r3, r1
 8000b06:	6819      	ldr	r1, [r3, #0]
 8000b08:	4868      	ldr	r0, [pc, #416]	; (8000cac <getButtonValue+0x234>)
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	1a9b      	subs	r3, r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4403      	add	r3, r0
 8000b16:	3304      	adds	r3, #4
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4299      	cmp	r1, r3
 8000b1c:	f040 80b9 	bne.w	8000c92 <getButtonValue+0x21a>
 8000b20:	4962      	ldr	r1, [pc, #392]	; (8000cac <getButtonValue+0x234>)
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	4613      	mov	r3, r2
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	1a9b      	subs	r3, r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	3304      	adds	r3, #4
 8000b30:	6819      	ldr	r1, [r3, #0]
 8000b32:	485e      	ldr	r0, [pc, #376]	; (8000cac <getButtonValue+0x234>)
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	4613      	mov	r3, r2
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4403      	add	r3, r0
 8000b40:	3308      	adds	r3, #8
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4299      	cmp	r1, r3
 8000b46:	f040 80a4 	bne.w	8000c92 <getButtonValue+0x21a>
			if (listButton[i].oldState != listButton[i].keyget3){
 8000b4a:	4958      	ldr	r1, [pc, #352]	; (8000cac <getButtonValue+0x234>)
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	440b      	add	r3, r1
 8000b58:	330c      	adds	r3, #12
 8000b5a:	6819      	ldr	r1, [r3, #0]
 8000b5c:	4853      	ldr	r0, [pc, #332]	; (8000cac <getButtonValue+0x234>)
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	4613      	mov	r3, r2
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	1a9b      	subs	r3, r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4403      	add	r3, r0
 8000b6a:	3308      	adds	r3, #8
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	d052      	beq.n	8000c18 <getButtonValue+0x1a0>
				listButton[i].oldState = listButton[i].keyget3;
 8000b72:	494e      	ldr	r1, [pc, #312]	; (8000cac <getButtonValue+0x234>)
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	1a9b      	subs	r3, r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	440b      	add	r3, r1
 8000b80:	3308      	adds	r3, #8
 8000b82:	6819      	ldr	r1, [r3, #0]
 8000b84:	4849      	ldr	r0, [pc, #292]	; (8000cac <getButtonValue+0x234>)
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	1a9b      	subs	r3, r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4403      	add	r3, r0
 8000b92:	330c      	adds	r3, #12
 8000b94:	6019      	str	r1, [r3, #0]
				if (listButton[i].keyget3 == PRESSED){
 8000b96:	4945      	ldr	r1, [pc, #276]	; (8000cac <getButtonValue+0x234>)
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	1a9b      	subs	r3, r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	3308      	adds	r3, #8
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d114      	bne.n	8000bd6 <getButtonValue+0x15e>
					listButton[i].shortPress = 1;
 8000bac:	493f      	ldr	r1, [pc, #252]	; (8000cac <getButtonValue+0x234>)
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	1a9b      	subs	r3, r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	440b      	add	r3, r1
 8000bba:	3310      	adds	r3, #16
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	601a      	str	r2, [r3, #0]
					listButton[i].timePress = KEY_PRESS_TIME / TIME_CYCLE;
 8000bc0:	493a      	ldr	r1, [pc, #232]	; (8000cac <getButtonValue+0x234>)
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	1a9b      	subs	r3, r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	440b      	add	r3, r1
 8000bce:	3318      	adds	r3, #24
 8000bd0:	2264      	movs	r2, #100	; 0x64
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	e05d      	b.n	8000c92 <getButtonValue+0x21a>
				}
				else if (listButton[i].keyget3 == RELEASE){
 8000bd6:	4935      	ldr	r1, [pc, #212]	; (8000cac <getButtonValue+0x234>)
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	1a9b      	subs	r3, r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	440b      	add	r3, r1
 8000be4:	3308      	adds	r3, #8
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d152      	bne.n	8000c92 <getButtonValue+0x21a>
					// if new state != old state and button is released -> Short Press is complete
					 if(listButton[i].shortPress == 1) listButton[i].shortPress = 2;
 8000bec:	492f      	ldr	r1, [pc, #188]	; (8000cac <getButtonValue+0x234>)
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	1a9b      	subs	r3, r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	3310      	adds	r3, #16
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d147      	bne.n	8000c92 <getButtonValue+0x21a>
 8000c02:	492a      	ldr	r1, [pc, #168]	; (8000cac <getButtonValue+0x234>)
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4613      	mov	r3, r2
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	1a9b      	subs	r3, r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	440b      	add	r3, r1
 8000c10:	3310      	adds	r3, #16
 8000c12:	2202      	movs	r2, #2
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	e03c      	b.n	8000c92 <getButtonValue+0x21a>
				}
			}
			else if (listButton[i].keyget3 == PRESSED){
 8000c18:	4924      	ldr	r1, [pc, #144]	; (8000cac <getButtonValue+0x234>)
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	1a9b      	subs	r3, r3, r2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	440b      	add	r3, r1
 8000c26:	3308      	adds	r3, #8
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d131      	bne.n	8000c92 <getButtonValue+0x21a>
				listButton[i].timePress--;
 8000c2e:	491f      	ldr	r1, [pc, #124]	; (8000cac <getButtonValue+0x234>)
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	4613      	mov	r3, r2
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	1a9b      	subs	r3, r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3318      	adds	r3, #24
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	1e59      	subs	r1, r3, #1
 8000c42:	481a      	ldr	r0, [pc, #104]	; (8000cac <getButtonValue+0x234>)
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4403      	add	r3, r0
 8000c50:	3318      	adds	r3, #24
 8000c52:	6019      	str	r1, [r3, #0]
				if (listButton[i].timePress == 0){
 8000c54:	4915      	ldr	r1, [pc, #84]	; (8000cac <getButtonValue+0x234>)
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	1a9b      	subs	r3, r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	440b      	add	r3, r1
 8000c62:	3318      	adds	r3, #24
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d113      	bne.n	8000c92 <getButtonValue+0x21a>
					listButton[i].longPress = 1;
 8000c6a:	4910      	ldr	r1, [pc, #64]	; (8000cac <getButtonValue+0x234>)
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	1a9b      	subs	r3, r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	440b      	add	r3, r1
 8000c78:	3314      	adds	r3, #20
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]
					listButton[i].shortPress = 0; // When press time >= KEY_PRESS_TIME -> long press -> terminate short press
 8000c7e:	490b      	ldr	r1, [pc, #44]	; (8000cac <getButtonValue+0x234>)
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	1a9b      	subs	r3, r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	3310      	adds	r3, #16
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTON; i++){
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	f77f aef2 	ble.w	8000a84 <getButtonValue+0xc>
				}
			}
		}
	}
}
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000030 	.word	0x20000030
 8000cb0:	20000084 	.word	0x20000084
 8000cb4:	20000090 	.word	0x20000090

08000cb8 <isButtonShortPress>:



int isButtonShortPress(int index){
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	if (listButton[index].shortPress == 2){
 8000cc0:	490e      	ldr	r1, [pc, #56]	; (8000cfc <isButtonShortPress+0x44>)
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	1a9b      	subs	r3, r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	440b      	add	r3, r1
 8000cce:	3310      	adds	r3, #16
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d10b      	bne.n	8000cee <isButtonShortPress+0x36>
		listButton[index].shortPress = 0;
 8000cd6:	4909      	ldr	r1, [pc, #36]	; (8000cfc <isButtonShortPress+0x44>)
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	1a9b      	subs	r3, r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	3310      	adds	r3, #16
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
		return 1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <isButtonShortPress+0x38>
	}
	else return 0;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000030 	.word	0x20000030

08000d00 <isButtonLongPress>:

int isButtonLongPress(int index){
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	if (listButton[index].longPress == 1){
 8000d08:	490e      	ldr	r1, [pc, #56]	; (8000d44 <isButtonLongPress+0x44>)
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	1a9b      	subs	r3, r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	440b      	add	r3, r1
 8000d16:	3314      	adds	r3, #20
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d10b      	bne.n	8000d36 <isButtonLongPress+0x36>
		listButton[index].longPress = 0;
 8000d1e:	4909      	ldr	r1, [pc, #36]	; (8000d44 <isButtonLongPress+0x44>)
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4613      	mov	r3, r2
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	3314      	adds	r3, #20
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
		return 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <isButtonLongPress+0x38>
	}
	else return 0;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000030 	.word	0x20000030

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4c:	f000 fc76 	bl	800163c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d50:	f000 f83c 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d54:	f000 f8ec 	bl	8000f30 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d58:	f000 f874 	bl	8000e44 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000d5c:	f000 f8be 	bl	8000edc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d60:	4813      	ldr	r0, [pc, #76]	; (8000db0 <main+0x68>)
 8000d62:	f001 fcad 	bl	80026c0 <HAL_TIM_Base_Start_IT>

  setTimer(timer_duration[0], 0);
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <main+0x6c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff f9ed 	bl	800014c <setTimer>
  SCH_Init();
 8000d72:	f000 f979 	bl	8001068 <SCH_Init>
  SCH_Add_Task(fsm_traffic, 0, 1);
 8000d76:	2201      	movs	r2, #1
 8000d78:	2100      	movs	r1, #0
 8000d7a:	480f      	ldr	r0, [pc, #60]	; (8000db8 <main+0x70>)
 8000d7c:	f000 f98e 	bl	800109c <SCH_Add_Task>
  SCH_Add_Task(clock_counter_traffic_update, 0, 1);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2100      	movs	r1, #0
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <main+0x74>)
 8000d86:	f000 f989 	bl	800109c <SCH_Add_Task>
  SCH_Add_Task(fsm_switch_mode, 0, 1);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <main+0x78>)
 8000d90:	f000 f984 	bl	800109c <SCH_Add_Task>
  SCH_Add_Task(timerRun, 0, 1);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2100      	movs	r1, #0
 8000d98:	480a      	ldr	r0, [pc, #40]	; (8000dc4 <main+0x7c>)
 8000d9a:	f000 f97f 	bl	800109c <SCH_Add_Task>
  SCH_Add_Task(getButtonValue, 0, 1);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2100      	movs	r1, #0
 8000da2:	4809      	ldr	r0, [pc, #36]	; (8000dc8 <main+0x80>)
 8000da4:	f000 f97a 	bl	800109c <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000da8:	f000 fad4 	bl	8001354 <SCH_Dispatch_Tasks>
 8000dac:	e7fc      	b.n	8000da8 <main+0x60>
 8000dae:	bf00      	nop
 8000db0:	200001dc 	.word	0x200001dc
 8000db4:	20000000 	.word	0x20000000
 8000db8:	0800078d 	.word	0x0800078d
 8000dbc:	08000855 	.word	0x08000855
 8000dc0:	08000695 	.word	0x08000695
 8000dc4:	0800018d 	.word	0x0800018d
 8000dc8:	08000a79 	.word	0x08000a79

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b090      	sub	sp, #64	; 0x40
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	2228      	movs	r2, #40	; 0x28
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 fe44 	bl	8003a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df2:	2301      	movs	r3, #1
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df6:	2310      	movs	r3, #16
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fffe 	bl	8001e04 <HAL_RCC_OscConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e0e:	f000 f8fb 	bl	8001008 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e12:	230f      	movs	r3, #15
 8000e14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 fa6a 	bl	8002304 <HAL_RCC_ClockConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e36:	f000 f8e7 	bl	8001008 <Error_Handler>
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3740      	adds	r7, #64	; 0x40
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <MX_TIM2_Init+0x94>)
 8000e62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_TIM2_Init+0x94>)
 8000e6a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <MX_TIM2_Init+0x94>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_TIM2_Init+0x94>)
 8000e78:	2209      	movs	r2, #9
 8000e7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_TIM2_Init+0x94>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_TIM2_Init+0x94>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e88:	4813      	ldr	r0, [pc, #76]	; (8000ed8 <MX_TIM2_Init+0x94>)
 8000e8a:	f001 fbc9 	bl	8002620 <HAL_TIM_Base_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e94:	f000 f8b8 	bl	8001008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_TIM2_Init+0x94>)
 8000ea6:	f001 fd47 	bl	8002938 <HAL_TIM_ConfigClockSource>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000eb0:	f000 f8aa 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_TIM2_Init+0x94>)
 8000ec2:	f001 ff1f 	bl	8002d04 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ecc:	f000 f89c 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200001dc 	.word	0x200001dc

08000edc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <MX_USART2_UART_Init+0x50>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000ee8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000eec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000f14:	f001 ff60 	bl	8002dd8 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f1e:	f000 f873 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000160 	.word	0x20000160
 8000f2c:	40004400 	.word	0x40004400

08000f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <MX_GPIO_Init+0xb8>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <MX_GPIO_Init+0xb8>)
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <MX_GPIO_Init+0xb8>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <MX_GPIO_Init+0xb8>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <MX_GPIO_Init+0xb8>)
 8000f62:	f043 0308 	orr.w	r3, r3, #8
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <MX_GPIO_Init+0xb8>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0308 	and.w	r3, r3, #8
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin|AMBER_LED1_Pin|GREEN_LED1_Pin|RED_LED2_Pin
 8000f74:	2200      	movs	r2, #0
 8000f76:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 8000f7a:	481c      	ldr	r0, [pc, #112]	; (8000fec <MX_GPIO_Init+0xbc>)
 8000f7c:	f000 ff11 	bl	8001da2 <HAL_GPIO_WritePin>
                          |AMBER_LED2_Pin|GREEN_LED2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin
 8000f80:	2200      	movs	r2, #0
 8000f82:	217f      	movs	r1, #127	; 0x7f
 8000f84:	481a      	ldr	r0, [pc, #104]	; (8000ff0 <MX_GPIO_Init+0xc0>)
 8000f86:	f000 ff0c 	bl	8001da2 <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_LED1_Pin AMBER_LED1_Pin GREEN_LED1_Pin RED_LED2_Pin
                           AMBER_LED2_Pin GREEN_LED2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED_LED1_Pin|AMBER_LED1_Pin|GREEN_LED1_Pin|RED_LED2_Pin
 8000f8a:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000f8e:	60bb      	str	r3, [r7, #8]
                          |AMBER_LED2_Pin|GREEN_LED2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4812      	ldr	r0, [pc, #72]	; (8000fec <MX_GPIO_Init+0xbc>)
 8000fa4:	f000 fd6c 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 8000fa8:	237f      	movs	r3, #127	; 0x7f
 8000faa:	60bb      	str	r3, [r7, #8]
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <MX_GPIO_Init+0xc0>)
 8000fc0:	f000 fd5e 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000fc4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000fc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_GPIO_Init+0xc0>)
 8000fda:	f000 fd51 	bl	8001a80 <HAL_GPIO_Init>

}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40010c00 	.word	0x40010c00

08000ff4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000ffc:	f000 f98e 	bl	800131c <SCH_Update>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	e7fe      	b.n	8001010 <Error_Handler+0x8>

08001012 <Add_Node>:
};

struct container* container;


struct sTask* Add_Node(struct sTask** curr, void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	603b      	str	r3, [r7, #0]
    struct sTask *temp = (struct sTask*)malloc(sizeof(struct sTask));
 8001020:	2010      	movs	r0, #16
 8001022:	f002 fd19 	bl	8003a58 <malloc>
 8001026:	4603      	mov	r3, r0
 8001028:	617b      	str	r3, [r7, #20]
    temp -> pTask = pFunction;
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	601a      	str	r2, [r3, #0]
    temp -> Delay = DELAY;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	605a      	str	r2, [r3, #4]
    temp -> Period = PERIOD;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	609a      	str	r2, [r3, #8]
    if (curr == NULL || *curr == NULL) {
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <Add_Node+0x38>
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d103      	bne.n	8001052 <Add_Node+0x40>
        temp -> next = temp;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	e004      	b.n	800105c <Add_Node+0x4a>
    }
    else {
        temp -> next = (*curr) -> next;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	60da      	str	r2, [r3, #12]
    }
    return temp;
 800105c:	697b      	ldr	r3, [r7, #20]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <SCH_Init>:

void SCH_Init(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
    container = (struct container*)malloc(sizeof(struct container));
 800106c:	200c      	movs	r0, #12
 800106e:	f002 fcf3 	bl	8003a58 <malloc>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <SCH_Init+0x30>)
 8001078:	601a      	str	r2, [r3, #0]
	container -> tail = NULL;
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <SCH_Init+0x30>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
	container -> numSlot = 0;
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SCH_Init+0x30>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	605a      	str	r2, [r3, #4]
	container -> emptySlot = 0;
 800108a:	4b03      	ldr	r3, [pc, #12]	; (8001098 <SCH_Init+0x30>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000224 	.word	0x20000224

0800109c <SCH_Add_Task>:

void SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b08b      	sub	sp, #44	; 0x2c
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
	// container empty
	if (container -> tail == NULL) {
 80010a8:	4b6e      	ldr	r3, [pc, #440]	; (8001264 <SCH_Add_Task+0x1c8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10f      	bne.n	80010d2 <SCH_Add_Task+0x36>
		container -> tail = Add_Node(NULL, pFunction, DELAY, PERIOD);
 80010b2:	4b6c      	ldr	r3, [pc, #432]	; (8001264 <SCH_Add_Task+0x1c8>)
 80010b4:	681c      	ldr	r4, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	68f9      	ldr	r1, [r7, #12]
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff ffa8 	bl	8001012 <Add_Node>
 80010c2:	4603      	mov	r3, r0
 80010c4:	6023      	str	r3, [r4, #0]
		(container -> numSlot)++;
 80010c6:	4b67      	ldr	r3, [pc, #412]	; (8001264 <SCH_Add_Task+0x1c8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	3201      	adds	r2, #1
 80010ce:	605a      	str	r2, [r3, #4]
			}
			temp = temp -> next;
		}
	}

}
 80010d0:	e0c4      	b.n	800125c <SCH_Add_Task+0x1c0>
		struct sTask* temp = container -> tail;
 80010d2:	4b64      	ldr	r3, [pc, #400]	; (8001264 <SCH_Add_Task+0x1c8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	617b      	str	r3, [r7, #20]
		uint32_t sumDelay = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t newDelay = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < container -> numSlot; i++) {
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
 80010e6:	e0b1      	b.n	800124c <SCH_Add_Task+0x1b0>
			sumDelay = sumDelay + temp -> next -> Delay;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f0:	4413      	add	r3, r2
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
			if (sumDelay > DELAY) {
 80010f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d965      	bls.n	80011c8 <SCH_Add_Task+0x12c>
				newDelay = DELAY - (sumDelay - temp -> next -> Delay);
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	4413      	add	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
				temp -> next -> Delay = sumDelay - DELAY;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	1a8a      	subs	r2, r1, r2
 8001116:	605a      	str	r2, [r3, #4]
				if (container -> emptySlot == 0) {
 8001118:	4b52      	ldr	r3, [pc, #328]	; (8001264 <SCH_Add_Task+0x1c8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10f      	bne.n	8001142 <SCH_Add_Task+0xa6>
					temp -> next = Add_Node(&temp, pFunction, newDelay, PERIOD);
 8001122:	697c      	ldr	r4, [r7, #20]
 8001124:	f107 0014 	add.w	r0, r7, #20
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	68f9      	ldr	r1, [r7, #12]
 800112e:	f7ff ff70 	bl	8001012 <Add_Node>
 8001132:	4603      	mov	r3, r0
 8001134:	60e3      	str	r3, [r4, #12]
					(container -> numSlot)++;
 8001136:	4b4b      	ldr	r3, [pc, #300]	; (8001264 <SCH_Add_Task+0x1c8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	3201      	adds	r2, #1
 800113e:	605a      	str	r2, [r3, #4]
                break;
 8001140:	e08c      	b.n	800125c <SCH_Add_Task+0x1c0>
					container -> tail -> pTask = pFunction;
 8001142:	4b48      	ldr	r3, [pc, #288]	; (8001264 <SCH_Add_Task+0x1c8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	601a      	str	r2, [r3, #0]
					container -> tail -> Delay = newDelay;
 800114c:	4b45      	ldr	r3, [pc, #276]	; (8001264 <SCH_Add_Task+0x1c8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	605a      	str	r2, [r3, #4]
					container -> tail -> Period = PERIOD;
 8001156:	4b43      	ldr	r3, [pc, #268]	; (8001264 <SCH_Add_Task+0x1c8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	609a      	str	r2, [r3, #8]
					struct sTask *newTail = temp -> next;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61fb      	str	r3, [r7, #28]
					while (newTail -> next != container -> tail) {
 8001166:	e002      	b.n	800116e <SCH_Add_Task+0xd2>
						newTail = newTail -> next;
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61fb      	str	r3, [r7, #28]
					while (newTail -> next != container -> tail) {
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <SCH_Add_Task+0x1c8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d1f5      	bne.n	8001168 <SCH_Add_Task+0xcc>
					if (temp == container -> tail) container -> tail = newTail;
 800117c:	4b39      	ldr	r3, [pc, #228]	; (8001264 <SCH_Add_Task+0x1c8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	429a      	cmp	r2, r3
 8001186:	d104      	bne.n	8001192 <SCH_Add_Task+0xf6>
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <SCH_Add_Task+0x1c8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	e014      	b.n	80011bc <SCH_Add_Task+0x120>
						newTail -> next = container -> tail -> next;
 8001192:	4b34      	ldr	r3, [pc, #208]	; (8001264 <SCH_Add_Task+0x1c8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	60da      	str	r2, [r3, #12]
						container -> tail -> next = temp -> next;
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <SCH_Add_Task+0x1c8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68d2      	ldr	r2, [r2, #12]
 80011a8:	60da      	str	r2, [r3, #12]
						temp -> next = container -> tail;
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <SCH_Add_Task+0x1c8>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	60da      	str	r2, [r3, #12]
						container -> tail = newTail;
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <SCH_Add_Task+0x1c8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	601a      	str	r2, [r3, #0]
                    (container -> emptySlot)--;
 80011bc:	4b29      	ldr	r3, [pc, #164]	; (8001264 <SCH_Add_Task+0x1c8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	3a01      	subs	r2, #1
 80011c4:	609a      	str	r2, [r3, #8]
                break;
 80011c6:	e049      	b.n	800125c <SCH_Add_Task+0x1c0>
                if (temp -> next -> pTask == 0x0000) {
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d113      	bne.n	80011fa <SCH_Add_Task+0x15e>
					temp -> next -> pTask = pFunction;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	601a      	str	r2, [r3, #0]
					temp -> next -> Delay = DELAY - sumDelay;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e2:	1a8a      	subs	r2, r1, r2
 80011e4:	605a      	str	r2, [r3, #4]
					temp -> next -> Period = PERIOD;
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	609a      	str	r2, [r3, #8]
                    (container -> emptySlot)--;
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <SCH_Add_Task+0x1c8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	3a01      	subs	r2, #1
 80011f6:	609a      	str	r2, [r3, #8]
					break;
 80011f8:	e030      	b.n	800125c <SCH_Add_Task+0x1c0>
					if (temp -> next == container -> tail) {
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <SCH_Add_Task+0x1c8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d11b      	bne.n	8001240 <SCH_Add_Task+0x1a4>
						container -> tail -> next = Add_Node(&(container -> tail), pFunction, DELAY - sumDelay, PERIOD);
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <SCH_Add_Task+0x1c8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	1ad2      	subs	r2, r2, r3
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <SCH_Add_Task+0x1c8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681c      	ldr	r4, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68f9      	ldr	r1, [r7, #12]
 800121e:	f7ff fef8 	bl	8001012 <Add_Node>
 8001222:	4603      	mov	r3, r0
 8001224:	60e3      	str	r3, [r4, #12]
						container -> tail = container -> tail -> next;
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <SCH_Add_Task+0x1c8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <SCH_Add_Task+0x1c8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68d2      	ldr	r2, [r2, #12]
 8001232:	601a      	str	r2, [r3, #0]
						(container -> numSlot)++;
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <SCH_Add_Task+0x1c8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	3201      	adds	r2, #1
 800123c:	605a      	str	r2, [r3, #4]
						break;
 800123e:	e00d      	b.n	800125c <SCH_Add_Task+0x1c0>
			temp = temp -> next;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < container -> numSlot; i++) {
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	3301      	adds	r3, #1
 800124a:	623b      	str	r3, [r7, #32]
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SCH_Add_Task+0x1c8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	6a3a      	ldr	r2, [r7, #32]
 8001254:	429a      	cmp	r2, r3
 8001256:	f6ff af47 	blt.w	80010e8 <SCH_Add_Task+0x4c>
}
 800125a:	e7ff      	b.n	800125c <SCH_Add_Task+0x1c0>
 800125c:	bf00      	nop
 800125e:	372c      	adds	r7, #44	; 0x2c
 8001260:	46bd      	mov	sp, r7
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	20000224 	.word	0x20000224

08001268 <SCH_Delete_Task>:

void SCH_Delete_Task(struct sTask** preDel) {
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
    struct sTask* del = (*preDel) -> next;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	60fb      	str	r3, [r7, #12]
    if (del != container -> tail) del -> next -> Delay += del -> Delay;
 8001278:	4b27      	ldr	r3, [pc, #156]	; (8001318 <SCH_Delete_Task+0xb0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	d008      	beq.n	8001296 <SCH_Delete_Task+0x2e>
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	6859      	ldr	r1, [r3, #4]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	440a      	add	r2, r1
 8001294:	605a      	str	r2, [r3, #4]
	del -> pTask = 0x0000;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
	del -> Delay = 0;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
	del -> Period = 0;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
	if (*preDel == container -> tail)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <SCH_Delete_Task+0xb0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d107      	bne.n	80012c6 <SCH_Delete_Task+0x5e>
		container -> tail = container -> tail -> next;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <SCH_Delete_Task+0xb0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <SCH_Delete_Task+0xb0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68d2      	ldr	r2, [r2, #12]
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	e01e      	b.n	8001304 <SCH_Delete_Task+0x9c>
	else {
		if (del -> next -> pTask != 0 && del != container -> tail) {
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d019      	beq.n	8001304 <SCH_Delete_Task+0x9c>
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <SCH_Delete_Task+0xb0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d013      	beq.n	8001304 <SCH_Delete_Task+0x9c>
			(*preDel) -> next = del -> next;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	68d2      	ldr	r2, [r2, #12]
 80012e4:	60da      	str	r2, [r3, #12]
			del -> next = container -> tail -> next;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <SCH_Delete_Task+0xb0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	60da      	str	r2, [r3, #12]
			container -> tail -> next = del;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <SCH_Delete_Task+0xb0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	60da      	str	r2, [r3, #12]
			container -> tail = del;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <SCH_Delete_Task+0xb0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	601a      	str	r2, [r3, #0]
		}
	}
	(container -> emptySlot)++;
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SCH_Delete_Task+0xb0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	3201      	adds	r2, #1
 800130c:	609a      	str	r2, [r3, #8]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	20000224 	.word	0x20000224

0800131c <SCH_Update>:


void SCH_Update(void) {
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
	if (container -> tail) {
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <SCH_Update+0x34>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00d      	beq.n	8001346 <SCH_Update+0x2a>
		if (container -> tail -> next -> Delay > 0)
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <SCH_Update+0x34>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <SCH_Update+0x2a>
			(container -> tail -> next -> Delay)--;
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <SCH_Update+0x34>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	3a01      	subs	r2, #1
 8001344:	605a      	str	r2, [r3, #4]
	}
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000224 	.word	0x20000224

08001354 <SCH_Dispatch_Tasks>:


void SCH_Dispatch_Tasks(void) {
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
	while (container -> tail -> next -> Delay <= 0) {
 800135a:	e01b      	b.n	8001394 <SCH_Dispatch_Tasks+0x40>
		(*(container -> tail -> next -> pTask))();
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <SCH_Dispatch_Tasks+0x58>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4798      	blx	r3
		struct sTask temp = *(container -> tail -> next);
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <SCH_Dispatch_Tasks+0x58>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	463c      	mov	r4, r7
 8001372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001374:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		SCH_Delete_Task(&(container -> tail));
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <SCH_Dispatch_Tasks+0x58>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff73 	bl	8001268 <SCH_Delete_Task>
		if (temp.Period != 0) {
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <SCH_Dispatch_Tasks+0x40>
			SCH_Add_Task(temp.pTask, temp.Period, temp.Period);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fe84 	bl	800109c <SCH_Add_Task>
	while (container -> tail -> next -> Delay <= 0) {
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SCH_Dispatch_Tasks+0x58>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0dc      	beq.n	800135c <SCH_Dispatch_Tasks+0x8>
		}
	}
}
 80013a2:	bf00      	nop
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	20000224 	.word	0x20000224

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_MspInit+0x5c>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	4a14      	ldr	r2, [pc, #80]	; (800140c <HAL_MspInit+0x5c>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6193      	str	r3, [r2, #24]
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_MspInit+0x5c>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_MspInit+0x5c>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a0e      	ldr	r2, [pc, #56]	; (800140c <HAL_MspInit+0x5c>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_MspInit+0x5c>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_MspInit+0x60>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_MspInit+0x60>)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000

08001414 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001424:	d113      	bne.n	800144e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_TIM_Base_MspInit+0x44>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <HAL_TIM_Base_MspInit+0x44>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	61d3      	str	r3, [r2, #28]
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_TIM_Base_MspInit+0x44>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	201c      	movs	r0, #28
 8001444:	f000 fa33 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001448:	201c      	movs	r0, #28
 800144a:	f000 fa4c 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a1f      	ldr	r2, [pc, #124]	; (80014f4 <HAL_UART_MspInit+0x98>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d137      	bne.n	80014ec <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <HAL_UART_MspInit+0x9c>)
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	4a1d      	ldr	r2, [pc, #116]	; (80014f8 <HAL_UART_MspInit+0x9c>)
 8001482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001486:	61d3      	str	r3, [r2, #28]
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_UART_MspInit+0x9c>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_UART_MspInit+0x9c>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <HAL_UART_MspInit+0x9c>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_UART_MspInit+0x9c>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014ac:	2304      	movs	r3, #4
 80014ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	480f      	ldr	r0, [pc, #60]	; (80014fc <HAL_UART_MspInit+0xa0>)
 80014c0:	f000 fade 	bl	8001a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014c4:	2308      	movs	r3, #8
 80014c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	4619      	mov	r1, r3
 80014d6:	4809      	ldr	r0, [pc, #36]	; (80014fc <HAL_UART_MspInit+0xa0>)
 80014d8:	f000 fad2 	bl	8001a80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	2026      	movs	r0, #38	; 0x26
 80014e2:	f000 f9e4 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014e6:	2026      	movs	r0, #38	; 0x26
 80014e8:	f000 f9fd 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ec:	bf00      	nop
 80014ee:	3720      	adds	r7, #32
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40004400 	.word	0x40004400
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010800 	.word	0x40010800

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler+0x4>

08001512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <UsageFault_Handler+0x4>

0800151e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001546:	f000 f8bf 	bl	80016c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <TIM2_IRQHandler+0x10>)
 8001556:	f001 f8ff 	bl	8002758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200001dc 	.word	0x200001dc

08001564 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <USART2_IRQHandler+0x10>)
 800156a:	f001 fd11 	bl	8002f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000160 	.word	0x20000160

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <_sbrk+0x5c>)
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <_sbrk+0x60>)
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <_sbrk+0x64>)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <_sbrk+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d207      	bcs.n	80015b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a8:	f002 fa2c 	bl	8003a04 <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	220c      	movs	r2, #12
 80015b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e009      	b.n	80015cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <_sbrk+0x64>)
 80015c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20002800 	.word	0x20002800
 80015d8:	00000400 	.word	0x00000400
 80015dc:	20000154 	.word	0x20000154
 80015e0:	20000240 	.word	0x20000240

080015e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <Reset_Handler>:
 80015f0:	f7ff fff8 	bl	80015e4 <SystemInit>
 80015f4:	480b      	ldr	r0, [pc, #44]	; (8001624 <LoopFillZerobss+0xe>)
 80015f6:	490c      	ldr	r1, [pc, #48]	; (8001628 <LoopFillZerobss+0x12>)
 80015f8:	4a0c      	ldr	r2, [pc, #48]	; (800162c <LoopFillZerobss+0x16>)
 80015fa:	2300      	movs	r3, #0
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:
 80015fe:	58d4      	ldr	r4, [r2, r3]
 8001600:	50c4      	str	r4, [r0, r3]
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:
 8001604:	18c4      	adds	r4, r0, r3
 8001606:	428c      	cmp	r4, r1
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <LoopFillZerobss+0x1a>)
 800160c:	4c09      	ldr	r4, [pc, #36]	; (8001634 <LoopFillZerobss+0x1e>)
 800160e:	2300      	movs	r3, #0
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:
 8001616:	42a2      	cmp	r2, r4
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>
 800161a:	f002 f9f9 	bl	8003a10 <__libc_init_array>
 800161e:	f7ff fb93 	bl	8000d48 <main>
 8001622:	4770      	bx	lr
 8001624:	20000000 	.word	0x20000000
 8001628:	20000108 	.word	0x20000108
 800162c:	08004430 	.word	0x08004430
 8001630:	20000108 	.word	0x20000108
 8001634:	2000023c 	.word	0x2000023c

08001638 <ADC1_2_IRQHandler>:
 8001638:	e7fe      	b.n	8001638 <ADC1_2_IRQHandler>
	...

0800163c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_Init+0x28>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a07      	ldr	r2, [pc, #28]	; (8001664 <HAL_Init+0x28>)
 8001646:	f043 0310 	orr.w	r3, r3, #16
 800164a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164c:	2003      	movs	r0, #3
 800164e:	f000 f923 	bl	8001898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001652:	200f      	movs	r0, #15
 8001654:	f000 f808 	bl	8001668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001658:	f7ff feaa 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40022000 	.word	0x40022000

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x54>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_InitTick+0x58>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f93b 	bl	8001902 <HAL_SYSTICK_Config>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e00e      	b.n	80016b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d80a      	bhi.n	80016b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f000 f903 	bl	80018ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <HAL_InitTick+0x5c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e000      	b.n	80016b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000098 	.word	0x20000098
 80016c0:	200000a0 	.word	0x200000a0
 80016c4:	2000009c 	.word	0x2000009c

080016c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_IncTick+0x1c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_IncTick+0x20>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a03      	ldr	r2, [pc, #12]	; (80016e8 <HAL_IncTick+0x20>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	200000a0 	.word	0x200000a0
 80016e8:	20000228 	.word	0x20000228

080016ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b02      	ldr	r3, [pc, #8]	; (80016fc <HAL_GetTick+0x10>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000228 	.word	0x20000228

08001700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800171c:	4013      	ands	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800172c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001732:	4a04      	ldr	r2, [pc, #16]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60d3      	str	r3, [r2, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <__NVIC_GetPriorityGrouping+0x18>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	f003 0307 	and.w	r3, r3, #7
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	2b00      	cmp	r3, #0
 8001774:	db0b      	blt.n	800178e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	4906      	ldr	r1, [pc, #24]	; (8001798 <__NVIC_EnableIRQ+0x34>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2001      	movs	r0, #1
 8001786:	fa00 f202 	lsl.w	r2, r0, r2
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100

0800179c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db0a      	blt.n	80017c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	490c      	ldr	r1, [pc, #48]	; (80017e8 <__NVIC_SetPriority+0x4c>)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	440b      	add	r3, r1
 80017c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c4:	e00a      	b.n	80017dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4908      	ldr	r1, [pc, #32]	; (80017ec <__NVIC_SetPriority+0x50>)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	3b04      	subs	r3, #4
 80017d4:	0112      	lsls	r2, r2, #4
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	440b      	add	r3, r1
 80017da:	761a      	strb	r2, [r3, #24]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f1c3 0307 	rsb	r3, r3, #7
 800180a:	2b04      	cmp	r3, #4
 800180c:	bf28      	it	cs
 800180e:	2304      	movcs	r3, #4
 8001810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3304      	adds	r3, #4
 8001816:	2b06      	cmp	r3, #6
 8001818:	d902      	bls.n	8001820 <NVIC_EncodePriority+0x30>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3b03      	subs	r3, #3
 800181e:	e000      	b.n	8001822 <NVIC_EncodePriority+0x32>
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	f04f 32ff 	mov.w	r2, #4294967295
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43d9      	mvns	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	4313      	orrs	r3, r2
         );
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	; 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001864:	d301      	bcc.n	800186a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001866:	2301      	movs	r3, #1
 8001868:	e00f      	b.n	800188a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <SysTick_Config+0x40>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001872:	210f      	movs	r1, #15
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f7ff ff90 	bl	800179c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <SysTick_Config+0x40>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <SysTick_Config+0x40>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff2d 	bl	8001700 <__NVIC_SetPriorityGrouping>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c0:	f7ff ff42 	bl	8001748 <__NVIC_GetPriorityGrouping>
 80018c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff ff90 	bl	80017f0 <NVIC_EncodePriority>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff5f 	bl	800179c <__NVIC_SetPriority>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff35 	bl	8001764 <__NVIC_EnableIRQ>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffa2 	bl	8001854 <SysTick_Config>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800191a:	b480      	push	{r7}
 800191c:	b085      	sub	sp, #20
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d008      	beq.n	8001944 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2204      	movs	r2, #4
 8001936:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e020      	b.n	8001986 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 020e 	bic.w	r2, r2, #14
 8001952:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0201 	bic.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196c:	2101      	movs	r1, #1
 800196e:	fa01 f202 	lsl.w	r2, r1, r2
 8001972:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001984:	7bfb      	ldrb	r3, [r7, #15]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d005      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2204      	movs	r2, #4
 80019ac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	e051      	b.n	8001a58 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 020e 	bic.w	r2, r2, #14
 80019c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a22      	ldr	r2, [pc, #136]	; (8001a64 <HAL_DMA_Abort_IT+0xd4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d029      	beq.n	8001a32 <HAL_DMA_Abort_IT+0xa2>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <HAL_DMA_Abort_IT+0xd8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d022      	beq.n	8001a2e <HAL_DMA_Abort_IT+0x9e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1f      	ldr	r2, [pc, #124]	; (8001a6c <HAL_DMA_Abort_IT+0xdc>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d01a      	beq.n	8001a28 <HAL_DMA_Abort_IT+0x98>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1e      	ldr	r2, [pc, #120]	; (8001a70 <HAL_DMA_Abort_IT+0xe0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d012      	beq.n	8001a22 <HAL_DMA_Abort_IT+0x92>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <HAL_DMA_Abort_IT+0xe4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d00a      	beq.n	8001a1c <HAL_DMA_Abort_IT+0x8c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <HAL_DMA_Abort_IT+0xe8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d102      	bne.n	8001a16 <HAL_DMA_Abort_IT+0x86>
 8001a10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a14:	e00e      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a1a:	e00b      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a20:	e008      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a26:	e005      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a2c:	e002      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a2e:	2310      	movs	r3, #16
 8001a30:	e000      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a32:	2301      	movs	r3, #1
 8001a34:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <HAL_DMA_Abort_IT+0xec>)
 8001a36:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	4798      	blx	r3
    } 
  }
  return status;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40020008 	.word	0x40020008
 8001a68:	4002001c 	.word	0x4002001c
 8001a6c:	40020030 	.word	0x40020030
 8001a70:	40020044 	.word	0x40020044
 8001a74:	40020058 	.word	0x40020058
 8001a78:	4002006c 	.word	0x4002006c
 8001a7c:	40020000 	.word	0x40020000

08001a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b08b      	sub	sp, #44	; 0x2c
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a92:	e148      	b.n	8001d26 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a94:	2201      	movs	r2, #1
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 8137 	bne.w	8001d20 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4aa3      	ldr	r2, [pc, #652]	; (8001d44 <HAL_GPIO_Init+0x2c4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d05e      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001abc:	4aa1      	ldr	r2, [pc, #644]	; (8001d44 <HAL_GPIO_Init+0x2c4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d875      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ac2:	4aa1      	ldr	r2, [pc, #644]	; (8001d48 <HAL_GPIO_Init+0x2c8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d058      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001ac8:	4a9f      	ldr	r2, [pc, #636]	; (8001d48 <HAL_GPIO_Init+0x2c8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d86f      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ace:	4a9f      	ldr	r2, [pc, #636]	; (8001d4c <HAL_GPIO_Init+0x2cc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d052      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001ad4:	4a9d      	ldr	r2, [pc, #628]	; (8001d4c <HAL_GPIO_Init+0x2cc>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d869      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ada:	4a9d      	ldr	r2, [pc, #628]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d04c      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001ae0:	4a9b      	ldr	r2, [pc, #620]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d863      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ae6:	4a9b      	ldr	r2, [pc, #620]	; (8001d54 <HAL_GPIO_Init+0x2d4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d046      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001aec:	4a99      	ldr	r2, [pc, #612]	; (8001d54 <HAL_GPIO_Init+0x2d4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d85d      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001af2:	2b12      	cmp	r3, #18
 8001af4:	d82a      	bhi.n	8001b4c <HAL_GPIO_Init+0xcc>
 8001af6:	2b12      	cmp	r3, #18
 8001af8:	d859      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001afa:	a201      	add	r2, pc, #4	; (adr r2, 8001b00 <HAL_GPIO_Init+0x80>)
 8001afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b00:	08001b7b 	.word	0x08001b7b
 8001b04:	08001b55 	.word	0x08001b55
 8001b08:	08001b67 	.word	0x08001b67
 8001b0c:	08001ba9 	.word	0x08001ba9
 8001b10:	08001baf 	.word	0x08001baf
 8001b14:	08001baf 	.word	0x08001baf
 8001b18:	08001baf 	.word	0x08001baf
 8001b1c:	08001baf 	.word	0x08001baf
 8001b20:	08001baf 	.word	0x08001baf
 8001b24:	08001baf 	.word	0x08001baf
 8001b28:	08001baf 	.word	0x08001baf
 8001b2c:	08001baf 	.word	0x08001baf
 8001b30:	08001baf 	.word	0x08001baf
 8001b34:	08001baf 	.word	0x08001baf
 8001b38:	08001baf 	.word	0x08001baf
 8001b3c:	08001baf 	.word	0x08001baf
 8001b40:	08001baf 	.word	0x08001baf
 8001b44:	08001b5d 	.word	0x08001b5d
 8001b48:	08001b71 	.word	0x08001b71
 8001b4c:	4a82      	ldr	r2, [pc, #520]	; (8001d58 <HAL_GPIO_Init+0x2d8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b52:	e02c      	b.n	8001bae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	623b      	str	r3, [r7, #32]
          break;
 8001b5a:	e029      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	3304      	adds	r3, #4
 8001b62:	623b      	str	r3, [r7, #32]
          break;
 8001b64:	e024      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	623b      	str	r3, [r7, #32]
          break;
 8001b6e:	e01f      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	330c      	adds	r3, #12
 8001b76:	623b      	str	r3, [r7, #32]
          break;
 8001b78:	e01a      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b82:	2304      	movs	r3, #4
 8001b84:	623b      	str	r3, [r7, #32]
          break;
 8001b86:	e013      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d105      	bne.n	8001b9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b90:	2308      	movs	r3, #8
 8001b92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	611a      	str	r2, [r3, #16]
          break;
 8001b9a:	e009      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	615a      	str	r2, [r3, #20]
          break;
 8001ba6:	e003      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
          break;
 8001bac:	e000      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          break;
 8001bae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2bff      	cmp	r3, #255	; 0xff
 8001bb4:	d801      	bhi.n	8001bba <HAL_GPIO_Init+0x13a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	e001      	b.n	8001bbe <HAL_GPIO_Init+0x13e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2bff      	cmp	r3, #255	; 0xff
 8001bc4:	d802      	bhi.n	8001bcc <HAL_GPIO_Init+0x14c>
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	e002      	b.n	8001bd2 <HAL_GPIO_Init+0x152>
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	3b08      	subs	r3, #8
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	210f      	movs	r1, #15
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	401a      	ands	r2, r3
 8001be4:	6a39      	ldr	r1, [r7, #32]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	431a      	orrs	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 8090 	beq.w	8001d20 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c00:	4b56      	ldr	r3, [pc, #344]	; (8001d5c <HAL_GPIO_Init+0x2dc>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a55      	ldr	r2, [pc, #340]	; (8001d5c <HAL_GPIO_Init+0x2dc>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <HAL_GPIO_Init+0x2dc>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c18:	4a51      	ldr	r2, [pc, #324]	; (8001d60 <HAL_GPIO_Init+0x2e0>)
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	3302      	adds	r3, #2
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	220f      	movs	r2, #15
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a49      	ldr	r2, [pc, #292]	; (8001d64 <HAL_GPIO_Init+0x2e4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d00d      	beq.n	8001c60 <HAL_GPIO_Init+0x1e0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a48      	ldr	r2, [pc, #288]	; (8001d68 <HAL_GPIO_Init+0x2e8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d007      	beq.n	8001c5c <HAL_GPIO_Init+0x1dc>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a47      	ldr	r2, [pc, #284]	; (8001d6c <HAL_GPIO_Init+0x2ec>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_GPIO_Init+0x1d8>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e004      	b.n	8001c62 <HAL_GPIO_Init+0x1e2>
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e002      	b.n	8001c62 <HAL_GPIO_Init+0x1e2>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <HAL_GPIO_Init+0x1e2>
 8001c60:	2300      	movs	r3, #0
 8001c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c64:	f002 0203 	and.w	r2, r2, #3
 8001c68:	0092      	lsls	r2, r2, #2
 8001c6a:	4093      	lsls	r3, r2
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c72:	493b      	ldr	r1, [pc, #236]	; (8001d60 <HAL_GPIO_Init+0x2e0>)
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c8c:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	4937      	ldr	r1, [pc, #220]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	608b      	str	r3, [r1, #8]
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c9a:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	4933      	ldr	r1, [pc, #204]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d006      	beq.n	8001cc2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cb4:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	492d      	ldr	r1, [pc, #180]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	60cb      	str	r3, [r1, #12]
 8001cc0:	e006      	b.n	8001cd0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	4929      	ldr	r1, [pc, #164]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cdc:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	4923      	ldr	r1, [pc, #140]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	491f      	ldr	r1, [pc, #124]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d04:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4919      	ldr	r1, [pc, #100]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4915      	ldr	r1, [pc, #84]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	3301      	adds	r3, #1
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f47f aeaf 	bne.w	8001a94 <HAL_GPIO_Init+0x14>
  }
}
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
 8001d3a:	372c      	adds	r7, #44	; 0x2c
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	10320000 	.word	0x10320000
 8001d48:	10310000 	.word	0x10310000
 8001d4c:	10220000 	.word	0x10220000
 8001d50:	10210000 	.word	0x10210000
 8001d54:	10120000 	.word	0x10120000
 8001d58:	10110000 	.word	0x10110000
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010000 	.word	0x40010000
 8001d64:	40010800 	.word	0x40010800
 8001d68:	40010c00 	.word	0x40010c00
 8001d6c:	40011000 	.word	0x40011000
 8001d70:	40010400 	.word	0x40010400

08001d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e001      	b.n	8001d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	807b      	strh	r3, [r7, #2]
 8001dae:	4613      	mov	r3, r2
 8001db0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001db2:	787b      	ldrb	r3, [r7, #1]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db8:	887a      	ldrh	r2, [r7, #2]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dbe:	e003      	b.n	8001dc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dc0:	887b      	ldrh	r3, [r7, #2]
 8001dc2:	041a      	lsls	r2, r3, #16
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	611a      	str	r2, [r3, #16]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001de4:	887a      	ldrh	r2, [r7, #2]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4013      	ands	r3, r2
 8001dea:	041a      	lsls	r2, r3, #16
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	400b      	ands	r3, r1
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	611a      	str	r2, [r3, #16]
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e26c      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 8087 	beq.w	8001f32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e24:	4b92      	ldr	r3, [pc, #584]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d00c      	beq.n	8001e4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e30:	4b8f      	ldr	r3, [pc, #572]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d112      	bne.n	8001e62 <HAL_RCC_OscConfig+0x5e>
 8001e3c:	4b8c      	ldr	r3, [pc, #560]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e48:	d10b      	bne.n	8001e62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4a:	4b89      	ldr	r3, [pc, #548]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d06c      	beq.n	8001f30 <HAL_RCC_OscConfig+0x12c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d168      	bne.n	8001f30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e246      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x76>
 8001e6c:	4b80      	ldr	r3, [pc, #512]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a7f      	ldr	r2, [pc, #508]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	e02e      	b.n	8001ed8 <HAL_RCC_OscConfig+0xd4>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x98>
 8001e82:	4b7b      	ldr	r3, [pc, #492]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a7a      	ldr	r2, [pc, #488]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	4b78      	ldr	r3, [pc, #480]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a77      	ldr	r2, [pc, #476]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e01d      	b.n	8001ed8 <HAL_RCC_OscConfig+0xd4>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0xbc>
 8001ea6:	4b72      	ldr	r3, [pc, #456]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a71      	ldr	r2, [pc, #452]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	4b6f      	ldr	r3, [pc, #444]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a6e      	ldr	r2, [pc, #440]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e00b      	b.n	8001ed8 <HAL_RCC_OscConfig+0xd4>
 8001ec0:	4b6b      	ldr	r3, [pc, #428]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a6a      	ldr	r2, [pc, #424]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b68      	ldr	r3, [pc, #416]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a67      	ldr	r2, [pc, #412]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fc04 	bl	80016ec <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fc00 	bl	80016ec <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e1fa      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	4b5d      	ldr	r3, [pc, #372]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0xe4>
 8001f06:	e014      	b.n	8001f32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff fbf0 	bl	80016ec <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff fbec 	bl	80016ec <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e1e6      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x10c>
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d063      	beq.n	8002006 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3e:	4b4c      	ldr	r3, [pc, #304]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f4a:	4b49      	ldr	r3, [pc, #292]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d11c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x18c>
 8001f56:	4b46      	ldr	r3, [pc, #280]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d116      	bne.n	8001f90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f62:	4b43      	ldr	r3, [pc, #268]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_RCC_OscConfig+0x176>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e1ba      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4939      	ldr	r1, [pc, #228]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	e03a      	b.n	8002006 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d020      	beq.n	8001fda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f98:	4b36      	ldr	r3, [pc, #216]	; (8002074 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff fba5 	bl	80016ec <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa6:	f7ff fba1 	bl	80016ec <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e19b      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc4:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4927      	ldr	r1, [pc, #156]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
 8001fd8:	e015      	b.n	8002006 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fb84 	bl	80016ec <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7ff fb80 	bl	80016ec <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e17a      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d03a      	beq.n	8002088 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d019      	beq.n	800204e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 800201c:	2201      	movs	r2, #1
 800201e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7ff fb64 	bl	80016ec <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002028:	f7ff fb60 	bl	80016ec <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e15a      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_RCC_OscConfig+0x26c>)
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002046:	2001      	movs	r0, #1
 8002048:	f000 facc 	bl	80025e4 <RCC_Delay>
 800204c:	e01c      	b.n	8002088 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002054:	f7ff fb4a 	bl	80016ec <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205a:	e00f      	b.n	800207c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205c:	f7ff fb46 	bl	80016ec <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d908      	bls.n	800207c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e140      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	42420000 	.word	0x42420000
 8002078:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207c:	4b9e      	ldr	r3, [pc, #632]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e9      	bne.n	800205c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80a6 	beq.w	80021e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002096:	2300      	movs	r3, #0
 8002098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209a:	4b97      	ldr	r3, [pc, #604]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10d      	bne.n	80020c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a6:	4b94      	ldr	r3, [pc, #592]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4a93      	ldr	r2, [pc, #588]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b0:	61d3      	str	r3, [r2, #28]
 80020b2:	4b91      	ldr	r3, [pc, #580]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020be:	2301      	movs	r3, #1
 80020c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c2:	4b8e      	ldr	r3, [pc, #568]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d118      	bne.n	8002100 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ce:	4b8b      	ldr	r3, [pc, #556]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a8a      	ldr	r2, [pc, #552]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020da:	f7ff fb07 	bl	80016ec <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e2:	f7ff fb03 	bl	80016ec <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b64      	cmp	r3, #100	; 0x64
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e0fd      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	4b81      	ldr	r3, [pc, #516]	; (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x312>
 8002108:	4b7b      	ldr	r3, [pc, #492]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4a7a      	ldr	r2, [pc, #488]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6213      	str	r3, [r2, #32]
 8002114:	e02d      	b.n	8002172 <HAL_RCC_OscConfig+0x36e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x334>
 800211e:	4b76      	ldr	r3, [pc, #472]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a75      	ldr	r2, [pc, #468]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	6213      	str	r3, [r2, #32]
 800212a:	4b73      	ldr	r3, [pc, #460]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4a72      	ldr	r2, [pc, #456]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 8002130:	f023 0304 	bic.w	r3, r3, #4
 8002134:	6213      	str	r3, [r2, #32]
 8002136:	e01c      	b.n	8002172 <HAL_RCC_OscConfig+0x36e>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d10c      	bne.n	800215a <HAL_RCC_OscConfig+0x356>
 8002140:	4b6d      	ldr	r3, [pc, #436]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4a6c      	ldr	r2, [pc, #432]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 8002146:	f043 0304 	orr.w	r3, r3, #4
 800214a:	6213      	str	r3, [r2, #32]
 800214c:	4b6a      	ldr	r3, [pc, #424]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4a69      	ldr	r2, [pc, #420]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6213      	str	r3, [r2, #32]
 8002158:	e00b      	b.n	8002172 <HAL_RCC_OscConfig+0x36e>
 800215a:	4b67      	ldr	r3, [pc, #412]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4a66      	ldr	r2, [pc, #408]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	6213      	str	r3, [r2, #32]
 8002166:	4b64      	ldr	r3, [pc, #400]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	4a63      	ldr	r2, [pc, #396]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	f023 0304 	bic.w	r3, r3, #4
 8002170:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d015      	beq.n	80021a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217a:	f7ff fab7 	bl	80016ec <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002182:	f7ff fab3 	bl	80016ec <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e0ab      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002198:	4b57      	ldr	r3, [pc, #348]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0ee      	beq.n	8002182 <HAL_RCC_OscConfig+0x37e>
 80021a4:	e014      	b.n	80021d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a6:	f7ff faa1 	bl	80016ec <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ac:	e00a      	b.n	80021c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7ff fa9d 	bl	80016ec <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021bc:	4293      	cmp	r3, r2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e095      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c4:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ee      	bne.n	80021ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021d0:	7dfb      	ldrb	r3, [r7, #23]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d105      	bne.n	80021e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d6:	4b48      	ldr	r3, [pc, #288]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4a47      	ldr	r2, [pc, #284]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8081 	beq.w	80022ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ec:	4b42      	ldr	r3, [pc, #264]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d061      	beq.n	80022bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d146      	bne.n	800228e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <HAL_RCC_OscConfig+0x4fc>)
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7ff fa71 	bl	80016ec <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220e:	f7ff fa6d 	bl	80016ec <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e067      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002220:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f0      	bne.n	800220e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002234:	d108      	bne.n	8002248 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002236:	4b30      	ldr	r3, [pc, #192]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	492d      	ldr	r1, [pc, #180]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002248:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a19      	ldr	r1, [r3, #32]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	430b      	orrs	r3, r1
 800225a:	4927      	ldr	r1, [pc, #156]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002260:	4b27      	ldr	r3, [pc, #156]	; (8002300 <HAL_RCC_OscConfig+0x4fc>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7ff fa41 	bl	80016ec <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226e:	f7ff fa3d 	bl	80016ec <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e037      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002280:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x46a>
 800228c:	e02f      	b.n	80022ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228e:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <HAL_RCC_OscConfig+0x4fc>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff fa2a 	bl	80016ec <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229c:	f7ff fa26 	bl	80016ec <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e020      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x498>
 80022ba:	e018      	b.n	80022ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e013      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCC_OscConfig+0x4f4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40007000 	.word	0x40007000
 8002300:	42420060 	.word	0x42420060

08002304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0d0      	b.n	80024ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002318:	4b6a      	ldr	r3, [pc, #424]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d910      	bls.n	8002348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b67      	ldr	r3, [pc, #412]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 0207 	bic.w	r2, r3, #7
 800232e:	4965      	ldr	r1, [pc, #404]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b63      	ldr	r3, [pc, #396]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0b8      	b.n	80024ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d020      	beq.n	8002396 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002360:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4a58      	ldr	r2, [pc, #352]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800236a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002378:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002382:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002384:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	494d      	ldr	r1, [pc, #308]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d040      	beq.n	8002424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d115      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e07f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c2:	4b41      	ldr	r3, [pc, #260]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e073      	b.n	80024ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d2:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e06b      	b.n	80024ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b39      	ldr	r3, [pc, #228]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4936      	ldr	r1, [pc, #216]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f4:	f7ff f97a 	bl	80016ec <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7ff f976 	bl	80016ec <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e053      	b.n	80024ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002424:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d210      	bcs.n	8002454 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 0207 	bic.w	r2, r3, #7
 800243a:	4922      	ldr	r1, [pc, #136]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e032      	b.n	80024ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4916      	ldr	r1, [pc, #88]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002492:	f000 f821 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8002496:	4602      	mov	r2, r0
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	490a      	ldr	r1, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	5ccb      	ldrb	r3, [r1, r3]
 80024a6:	fa22 f303 	lsr.w	r3, r2, r3
 80024aa:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1cc>)
 80024ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x1d0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff f8d8 	bl	8001668 <HAL_InitTick>

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40022000 	.word	0x40022000
 80024c8:	40021000 	.word	0x40021000
 80024cc:	080043c8 	.word	0x080043c8
 80024d0:	20000098 	.word	0x20000098
 80024d4:	2000009c 	.word	0x2000009c

080024d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <HAL_RCC_GetSysClockFreq+0x94>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d002      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x30>
 8002502:	2b08      	cmp	r3, #8
 8002504:	d003      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0x36>
 8002506:	e027      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_GetSysClockFreq+0x98>)
 800250a:	613b      	str	r3, [r7, #16]
      break;
 800250c:	e027      	b.n	800255e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	0c9b      	lsrs	r3, r3, #18
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	4a17      	ldr	r2, [pc, #92]	; (8002574 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002518:	5cd3      	ldrb	r3, [r2, r3]
 800251a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d010      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_RCC_GetSysClockFreq+0x94>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0c5b      	lsrs	r3, r3, #17
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	4a11      	ldr	r2, [pc, #68]	; (8002578 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <HAL_RCC_GetSysClockFreq+0x98>)
 800253a:	fb02 f203 	mul.w	r2, r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	e004      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a0c      	ldr	r2, [pc, #48]	; (800257c <HAL_RCC_GetSysClockFreq+0xa4>)
 800254c:	fb02 f303 	mul.w	r3, r2, r3
 8002550:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	613b      	str	r3, [r7, #16]
      break;
 8002556:	e002      	b.n	800255e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCC_GetSysClockFreq+0x98>)
 800255a:	613b      	str	r3, [r7, #16]
      break;
 800255c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800255e:	693b      	ldr	r3, [r7, #16]
}
 8002560:	4618      	mov	r0, r3
 8002562:	371c      	adds	r7, #28
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
 8002570:	007a1200 	.word	0x007a1200
 8002574:	080043e0 	.word	0x080043e0
 8002578:	080043f0 	.word	0x080043f0
 800257c:	003d0900 	.word	0x003d0900

08002580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002584:	4b02      	ldr	r3, [pc, #8]	; (8002590 <HAL_RCC_GetHCLKFreq+0x10>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	20000098 	.word	0x20000098

08002594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002598:	f7ff fff2 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4903      	ldr	r1, [pc, #12]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	080043d8 	.word	0x080043d8

080025bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025c0:	f7ff ffde 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	0adb      	lsrs	r3, r3, #11
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4903      	ldr	r1, [pc, #12]	; (80025e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000
 80025e0:	080043d8 	.word	0x080043d8

080025e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025ec:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <RCC_Delay+0x34>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0a      	ldr	r2, [pc, #40]	; (800261c <RCC_Delay+0x38>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	0a5b      	lsrs	r3, r3, #9
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002600:	bf00      	nop
  }
  while (Delay --);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1e5a      	subs	r2, r3, #1
 8002606:	60fa      	str	r2, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f9      	bne.n	8002600 <RCC_Delay+0x1c>
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	20000098 	.word	0x20000098
 800261c:	10624dd3 	.word	0x10624dd3

08002620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e041      	b.n	80026b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe fee4 	bl	8001414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3304      	adds	r3, #4
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f000 fa56 	bl	8002b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d001      	beq.n	80026d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e035      	b.n	8002744 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a16      	ldr	r2, [pc, #88]	; (8002750 <HAL_TIM_Base_Start_IT+0x90>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d009      	beq.n	800270e <HAL_TIM_Base_Start_IT+0x4e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002702:	d004      	beq.n	800270e <HAL_TIM_Base_Start_IT+0x4e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a12      	ldr	r2, [pc, #72]	; (8002754 <HAL_TIM_Base_Start_IT+0x94>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d111      	bne.n	8002732 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b06      	cmp	r3, #6
 800271e:	d010      	beq.n	8002742 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002730:	e007      	b.n	8002742 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40012c00 	.word	0x40012c00
 8002754:	40000400 	.word	0x40000400

08002758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d020      	beq.n	80027bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01b      	beq.n	80027bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0202 	mvn.w	r2, #2
 800278c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f998 	bl	8002ad8 <HAL_TIM_IC_CaptureCallback>
 80027a8:	e005      	b.n	80027b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f98b 	bl	8002ac6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f99a 	bl	8002aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d020      	beq.n	8002808 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01b      	beq.n	8002808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0204 	mvn.w	r2, #4
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f972 	bl	8002ad8 <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f965 	bl	8002ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f974 	bl	8002aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d020      	beq.n	8002854 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01b      	beq.n	8002854 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0208 	mvn.w	r2, #8
 8002824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2204      	movs	r2, #4
 800282a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f94c 	bl	8002ad8 <HAL_TIM_IC_CaptureCallback>
 8002840:	e005      	b.n	800284e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f93f 	bl	8002ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f94e 	bl	8002aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b00      	cmp	r3, #0
 800285c:	d020      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01b      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0210 	mvn.w	r2, #16
 8002870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2208      	movs	r2, #8
 8002876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f926 	bl	8002ad8 <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f919 	bl	8002ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f928 	bl	8002aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00c      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0201 	mvn.w	r2, #1
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe fb98 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00c      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fa6f 	bl	8002dc6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f8f8 	bl	8002afc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0220 	mvn.w	r2, #32
 8002928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fa42 	bl	8002db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_TIM_ConfigClockSource+0x1c>
 8002950:	2302      	movs	r3, #2
 8002952:	e0b4      	b.n	8002abe <HAL_TIM_ConfigClockSource+0x186>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800297a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298c:	d03e      	beq.n	8002a0c <HAL_TIM_ConfigClockSource+0xd4>
 800298e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002992:	f200 8087 	bhi.w	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 8002996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299a:	f000 8086 	beq.w	8002aaa <HAL_TIM_ConfigClockSource+0x172>
 800299e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a2:	d87f      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80029a4:	2b70      	cmp	r3, #112	; 0x70
 80029a6:	d01a      	beq.n	80029de <HAL_TIM_ConfigClockSource+0xa6>
 80029a8:	2b70      	cmp	r3, #112	; 0x70
 80029aa:	d87b      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80029ac:	2b60      	cmp	r3, #96	; 0x60
 80029ae:	d050      	beq.n	8002a52 <HAL_TIM_ConfigClockSource+0x11a>
 80029b0:	2b60      	cmp	r3, #96	; 0x60
 80029b2:	d877      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80029b4:	2b50      	cmp	r3, #80	; 0x50
 80029b6:	d03c      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0xfa>
 80029b8:	2b50      	cmp	r3, #80	; 0x50
 80029ba:	d873      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d058      	beq.n	8002a72 <HAL_TIM_ConfigClockSource+0x13a>
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	d86f      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80029c4:	2b30      	cmp	r3, #48	; 0x30
 80029c6:	d064      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x15a>
 80029c8:	2b30      	cmp	r3, #48	; 0x30
 80029ca:	d86b      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d060      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x15a>
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d867      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d05c      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x15a>
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d05a      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x15a>
 80029dc:	e062      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f000 f96a 	bl	8002cc6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	609a      	str	r2, [r3, #8]
      break;
 8002a0a:	e04f      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6899      	ldr	r1, [r3, #8]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f000 f953 	bl	8002cc6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a2e:	609a      	str	r2, [r3, #8]
      break;
 8002a30:	e03c      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6859      	ldr	r1, [r3, #4]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f000 f8ca 	bl	8002bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2150      	movs	r1, #80	; 0x50
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f921 	bl	8002c92 <TIM_ITRx_SetConfig>
      break;
 8002a50:	e02c      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f000 f8e8 	bl	8002c34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2160      	movs	r1, #96	; 0x60
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f911 	bl	8002c92 <TIM_ITRx_SetConfig>
      break;
 8002a70:	e01c      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6859      	ldr	r1, [r3, #4]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f000 f8aa 	bl	8002bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2140      	movs	r1, #64	; 0x40
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f901 	bl	8002c92 <TIM_ITRx_SetConfig>
      break;
 8002a90:	e00c      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	f000 f8f8 	bl	8002c92 <TIM_ITRx_SetConfig>
      break;
 8002aa2:	e003      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa8:	e000      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002aaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
	...

08002b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <TIM_Base_SetConfig+0xc0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d007      	beq.n	8002b38 <TIM_Base_SetConfig+0x28>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2e:	d003      	beq.n	8002b38 <TIM_Base_SetConfig+0x28>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a28      	ldr	r2, [pc, #160]	; (8002bd4 <TIM_Base_SetConfig+0xc4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d108      	bne.n	8002b4a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a20      	ldr	r2, [pc, #128]	; (8002bd0 <TIM_Base_SetConfig+0xc0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <TIM_Base_SetConfig+0x52>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b58:	d003      	beq.n	8002b62 <TIM_Base_SetConfig+0x52>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <TIM_Base_SetConfig+0xc4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d108      	bne.n	8002b74 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a0d      	ldr	r2, [pc, #52]	; (8002bd0 <TIM_Base_SetConfig+0xc0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d103      	bne.n	8002ba8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f023 0201 	bic.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	611a      	str	r2, [r3, #16]
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	40012c00 	.word	0x40012c00
 8002bd4:	40000400 	.word	0x40000400

08002bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	f023 0201 	bic.w	r2, r3, #1
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f023 030a 	bic.w	r3, r3, #10
 8002c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	621a      	str	r2, [r3, #32]
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	f023 0210 	bic.w	r2, r3, #16
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	031b      	lsls	r3, r3, #12
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	621a      	str	r2, [r3, #32]
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b085      	sub	sp, #20
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f043 0307 	orr.w	r3, r3, #7
 8002cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	609a      	str	r2, [r3, #8]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b087      	sub	sp, #28
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	021a      	lsls	r2, r3, #8
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	609a      	str	r2, [r3, #8]
}
 8002cfa:	bf00      	nop
 8002cfc:	371c      	adds	r7, #28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e041      	b.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d009      	beq.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d68:	d004      	beq.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d10c      	bne.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40000400 	.word	0x40000400

08002db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e042      	b.n	8002e70 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fe fb2c 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2224      	movs	r2, #36	; 0x24
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fd63 	bl	80038e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d175      	bne.n	8002f84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_UART_Transmit+0x2c>
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e06e      	b.n	8002f86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2221      	movs	r2, #33	; 0x21
 8002eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eb6:	f7fe fc19 	bl	80016ec <HAL_GetTick>
 8002eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	88fa      	ldrh	r2, [r7, #6]
 8002ec0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	88fa      	ldrh	r2, [r7, #6]
 8002ec6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed0:	d108      	bne.n	8002ee4 <HAL_UART_Transmit+0x6c>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	e003      	b.n	8002eec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002eec:	e02e      	b.n	8002f4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fb01 	bl	8003500 <UART_WaitOnFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e03a      	b.n	8002f86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10b      	bne.n	8002f2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	3302      	adds	r3, #2
 8002f2a:	61bb      	str	r3, [r7, #24]
 8002f2c:	e007      	b.n	8002f3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1cb      	bne.n	8002eee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2140      	movs	r1, #64	; 0x40
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 facd 	bl	8003500 <UART_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e006      	b.n	8002f86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e000      	b.n	8002f86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0ba      	sub	sp, #232	; 0xe8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x66>
 8002fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fbbc 	bl	800376c <UART_Receive_IT>
      return;
 8002ff4:	e25b      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80de 	beq.w	80031bc <HAL_UART_IRQHandler+0x22c>
 8003000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d106      	bne.n	800301a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800300c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003010:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80d1 	beq.w	80031bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800301a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_UART_IRQHandler+0xae>
 8003026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f043 0201 	orr.w	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800303e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_UART_IRQHandler+0xd2>
 800304a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f043 0202 	orr.w	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00b      	beq.n	8003086 <HAL_UART_IRQHandler+0xf6>
 800306e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	f043 0204 	orr.w	r2, r3, #4
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d011      	beq.n	80030b6 <HAL_UART_IRQHandler+0x126>
 8003092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d105      	bne.n	80030aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800309e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f043 0208 	orr.w	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 81f2 	beq.w	80034a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_UART_IRQHandler+0x14e>
 80030cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fb47 	bl	800376c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <HAL_UART_IRQHandler+0x17a>
 8003102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d04f      	beq.n	80031aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fa51 	bl	80035b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d041      	beq.n	80031a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3314      	adds	r3, #20
 8003124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800313c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3314      	adds	r3, #20
 8003146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800314a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800314e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1d9      	bne.n	800311e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d013      	beq.n	800319a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	4a7e      	ldr	r2, [pc, #504]	; (8003370 <HAL_UART_IRQHandler+0x3e0>)
 8003178:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fc06 	bl	8001990 <HAL_DMA_Abort_IT>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d016      	beq.n	80031b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003194:	4610      	mov	r0, r2
 8003196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003198:	e00e      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f99c 	bl	80034d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	e00a      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f998 	bl	80034d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	e006      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f994 	bl	80034d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80031b6:	e175      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b8:	bf00      	nop
    return;
 80031ba:	e173      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f040 814f 	bne.w	8003464 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8148 	beq.w	8003464 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8141 	beq.w	8003464 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80b6 	beq.w	8003374 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003214:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8145 	beq.w	80034a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003226:	429a      	cmp	r2, r3
 8003228:	f080 813e 	bcs.w	80034a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003232:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	2b20      	cmp	r3, #32
 800323c:	f000 8088 	beq.w	8003350 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	330c      	adds	r3, #12
 8003246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800324e:	e853 3f00 	ldrex	r3, [r3]
 8003252:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800325a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800326c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003270:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003274:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003278:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1d9      	bne.n	8003240 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3314      	adds	r3, #20
 8003292:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003296:	e853 3f00 	ldrex	r3, [r3]
 800329a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800329c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3314      	adds	r3, #20
 80032ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032bc:	e841 2300 	strex	r3, r2, [r1]
 80032c0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e1      	bne.n	800328c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3314      	adds	r3, #20
 80032ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d2:	e853 3f00 	ldrex	r3, [r3]
 80032d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3314      	adds	r3, #20
 80032e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032f4:	e841 2300 	strex	r3, r2, [r1]
 80032f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e3      	bne.n	80032c8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800331e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003320:	f023 0310 	bic.w	r3, r3, #16
 8003324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003332:	65ba      	str	r2, [r7, #88]	; 0x58
 8003334:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e3      	bne.n	800330e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe fae5 	bl	800191a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800335e:	b29b      	uxth	r3, r3
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	b29b      	uxth	r3, r3
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f8bf 	bl	80034ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800336c:	e09c      	b.n	80034a8 <HAL_UART_IRQHandler+0x518>
 800336e:	bf00      	nop
 8003370:	08003677 	.word	0x08003677
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800337c:	b29b      	uxth	r3, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 808e 	beq.w	80034ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003390:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8089 	beq.w	80034ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	330c      	adds	r3, #12
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	330c      	adds	r3, #12
 80033ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033be:	647a      	str	r2, [r7, #68]	; 0x44
 80033c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e3      	bne.n	800339a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3314      	adds	r3, #20
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	623b      	str	r3, [r7, #32]
   return(result);
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3314      	adds	r3, #20
 80033f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033f6:	633a      	str	r2, [r7, #48]	; 0x30
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e3      	bne.n	80033d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	e853 3f00 	ldrex	r3, [r3]
 8003426:	60fb      	str	r3, [r7, #12]
   return(result);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0310 	bic.w	r3, r3, #16
 800342e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800343c:	61fa      	str	r2, [r7, #28]
 800343e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	69b9      	ldr	r1, [r7, #24]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	617b      	str	r3, [r7, #20]
   return(result);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e3      	bne.n	8003418 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003456:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800345a:	4619      	mov	r1, r3
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f844 	bl	80034ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003462:	e023      	b.n	80034ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_UART_IRQHandler+0x4f4>
 8003470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f90e 	bl	800369e <UART_Transmit_IT>
    return;
 8003482:	e014      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00e      	beq.n	80034ae <HAL_UART_IRQHandler+0x51e>
 8003490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f94d 	bl	800373c <UART_EndTransmit_IT>
    return;
 80034a2:	e004      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
    return;
 80034a4:	bf00      	nop
 80034a6:	e002      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
      return;
 80034a8:	bf00      	nop
 80034aa:	e000      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
      return;
 80034ac:	bf00      	nop
  }
}
 80034ae:	37e8      	adds	r7, #232	; 0xe8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr

080034c6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003510:	e03b      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d037      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7fe f8e7 	bl	80016ec <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	6a3a      	ldr	r2, [r7, #32]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <UART_WaitOnFlagUntilTimeout+0x30>
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e03a      	b.n	80035aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d023      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b80      	cmp	r3, #128	; 0x80
 8003546:	d020      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	d01d      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b08      	cmp	r3, #8
 800355a:	d116      	bne.n	800358a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f81d 	bl	80035b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2208      	movs	r2, #8
 800357c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e00f      	b.n	80035aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	bf0c      	ite	eq
 800359a:	2301      	moveq	r3, #1
 800359c:	2300      	movne	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d0b4      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b095      	sub	sp, #84	; 0x54
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	330c      	adds	r3, #12
 80035c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	330c      	adds	r3, #12
 80035d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035da:	643a      	str	r2, [r7, #64]	; 0x40
 80035dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035e2:	e841 2300 	strex	r3, r2, [r1]
 80035e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1e5      	bne.n	80035ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3314      	adds	r3, #20
 80035f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	e853 3f00 	ldrex	r3, [r3]
 80035fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	64bb      	str	r3, [r7, #72]	; 0x48
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3314      	adds	r3, #20
 800360c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800360e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003616:	e841 2300 	strex	r3, r2, [r1]
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1e5      	bne.n	80035ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	2b01      	cmp	r3, #1
 8003628:	d119      	bne.n	800365e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	330c      	adds	r3, #12
 8003630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	60bb      	str	r3, [r7, #8]
   return(result);
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f023 0310 	bic.w	r3, r3, #16
 8003640:	647b      	str	r3, [r7, #68]	; 0x44
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	330c      	adds	r3, #12
 8003648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800364a:	61ba      	str	r2, [r7, #24]
 800364c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	6979      	ldr	r1, [r7, #20]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	613b      	str	r3, [r7, #16]
   return(result);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e5      	bne.n	800362a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800366c:	bf00      	nop
 800366e:	3754      	adds	r7, #84	; 0x54
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr

08003676 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7ff ff21 	bl	80034d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800369e:	b480      	push	{r7}
 80036a0:	b085      	sub	sp, #20
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b21      	cmp	r3, #33	; 0x21
 80036b0:	d13e      	bne.n	8003730 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ba:	d114      	bne.n	80036e6 <UART_Transmit_IT+0x48>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d110      	bne.n	80036e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	1c9a      	adds	r2, r3, #2
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	621a      	str	r2, [r3, #32]
 80036e4:	e008      	b.n	80036f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	1c59      	adds	r1, r3, #1
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6211      	str	r1, [r2, #32]
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29b      	uxth	r3, r3
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4619      	mov	r1, r3
 8003706:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10f      	bne.n	800372c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800371a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003752:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fea9 	bl	80034b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08c      	sub	sp, #48	; 0x30
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b22      	cmp	r3, #34	; 0x22
 800377e:	f040 80ae 	bne.w	80038de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378a:	d117      	bne.n	80037bc <UART_Receive_IT+0x50>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d113      	bne.n	80037bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003794:	2300      	movs	r3, #0
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	1c9a      	adds	r2, r3, #2
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28
 80037ba:	e026      	b.n	800380a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ce:	d007      	beq.n	80037e0 <UART_Receive_IT+0x74>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <UART_Receive_IT+0x82>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e008      	b.n	8003800 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29b      	uxth	r3, r3
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4619      	mov	r1, r3
 8003818:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800381a:	2b00      	cmp	r3, #0
 800381c:	d15d      	bne.n	80038da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0220 	bic.w	r2, r2, #32
 800382c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800383c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	2b01      	cmp	r3, #1
 8003862:	d135      	bne.n	80038d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	330c      	adds	r3, #12
 8003870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	613b      	str	r3, [r7, #16]
   return(result);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f023 0310 	bic.w	r3, r3, #16
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388a:	623a      	str	r2, [r7, #32]
 800388c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	69f9      	ldr	r1, [r7, #28]
 8003890:	6a3a      	ldr	r2, [r7, #32]
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	61bb      	str	r3, [r7, #24]
   return(result);
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e5      	bne.n	800386a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d10a      	bne.n	80038c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038c6:	4619      	mov	r1, r3
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fe0e 	bl	80034ea <HAL_UARTEx_RxEventCallback>
 80038ce:	e002      	b.n	80038d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fdf8 	bl	80034c6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e002      	b.n	80038e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80038de:	2302      	movs	r3, #2
  }
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3730      	adds	r7, #48	; 0x30
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003922:	f023 030c 	bic.w	r3, r3, #12
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	430b      	orrs	r3, r1
 800392e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a2c      	ldr	r2, [pc, #176]	; (80039fc <UART_SetConfig+0x114>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d103      	bne.n	8003958 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003950:	f7fe fe34 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	e002      	b.n	800395e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003958:	f7fe fe1c 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 800395c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009a      	lsls	r2, r3, #2
 8003968:	441a      	add	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <UART_SetConfig+0x118>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	0119      	lsls	r1, r3, #4
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	009a      	lsls	r2, r3, #2
 8003988:	441a      	add	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	fbb2 f2f3 	udiv	r2, r2, r3
 8003994:	4b1a      	ldr	r3, [pc, #104]	; (8003a00 <UART_SetConfig+0x118>)
 8003996:	fba3 0302 	umull	r0, r3, r3, r2
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	2064      	movs	r0, #100	; 0x64
 800399e:	fb00 f303 	mul.w	r3, r0, r3
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	3332      	adds	r3, #50	; 0x32
 80039a8:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <UART_SetConfig+0x118>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b4:	4419      	add	r1, r3
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009a      	lsls	r2, r3, #2
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <UART_SetConfig+0x118>)
 80039ce:	fba3 0302 	umull	r0, r3, r3, r2
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2064      	movs	r0, #100	; 0x64
 80039d6:	fb00 f303 	mul.w	r3, r0, r3
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	3332      	adds	r3, #50	; 0x32
 80039e0:	4a07      	ldr	r2, [pc, #28]	; (8003a00 <UART_SetConfig+0x118>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	f003 020f 	and.w	r2, r3, #15
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	440a      	add	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40013800 	.word	0x40013800
 8003a00:	51eb851f 	.word	0x51eb851f

08003a04 <__errno>:
 8003a04:	4b01      	ldr	r3, [pc, #4]	; (8003a0c <__errno+0x8>)
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	200000a4 	.word	0x200000a4

08003a10 <__libc_init_array>:
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	2600      	movs	r6, #0
 8003a14:	4d0c      	ldr	r5, [pc, #48]	; (8003a48 <__libc_init_array+0x38>)
 8003a16:	4c0d      	ldr	r4, [pc, #52]	; (8003a4c <__libc_init_array+0x3c>)
 8003a18:	1b64      	subs	r4, r4, r5
 8003a1a:	10a4      	asrs	r4, r4, #2
 8003a1c:	42a6      	cmp	r6, r4
 8003a1e:	d109      	bne.n	8003a34 <__libc_init_array+0x24>
 8003a20:	f000 fc64 	bl	80042ec <_init>
 8003a24:	2600      	movs	r6, #0
 8003a26:	4d0a      	ldr	r5, [pc, #40]	; (8003a50 <__libc_init_array+0x40>)
 8003a28:	4c0a      	ldr	r4, [pc, #40]	; (8003a54 <__libc_init_array+0x44>)
 8003a2a:	1b64      	subs	r4, r4, r5
 8003a2c:	10a4      	asrs	r4, r4, #2
 8003a2e:	42a6      	cmp	r6, r4
 8003a30:	d105      	bne.n	8003a3e <__libc_init_array+0x2e>
 8003a32:	bd70      	pop	{r4, r5, r6, pc}
 8003a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a38:	4798      	blx	r3
 8003a3a:	3601      	adds	r6, #1
 8003a3c:	e7ee      	b.n	8003a1c <__libc_init_array+0xc>
 8003a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a42:	4798      	blx	r3
 8003a44:	3601      	adds	r6, #1
 8003a46:	e7f2      	b.n	8003a2e <__libc_init_array+0x1e>
 8003a48:	08004428 	.word	0x08004428
 8003a4c:	08004428 	.word	0x08004428
 8003a50:	08004428 	.word	0x08004428
 8003a54:	0800442c 	.word	0x0800442c

08003a58 <malloc>:
 8003a58:	4b02      	ldr	r3, [pc, #8]	; (8003a64 <malloc+0xc>)
 8003a5a:	4601      	mov	r1, r0
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	f000 b857 	b.w	8003b10 <_malloc_r>
 8003a62:	bf00      	nop
 8003a64:	200000a4 	.word	0x200000a4

08003a68 <memset>:
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4402      	add	r2, r0
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d100      	bne.n	8003a72 <memset+0xa>
 8003a70:	4770      	bx	lr
 8003a72:	f803 1b01 	strb.w	r1, [r3], #1
 8003a76:	e7f9      	b.n	8003a6c <memset+0x4>

08003a78 <_free_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	4605      	mov	r5, r0
 8003a7c:	2900      	cmp	r1, #0
 8003a7e:	d043      	beq.n	8003b08 <_free_r+0x90>
 8003a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a84:	1f0c      	subs	r4, r1, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bfb8      	it	lt
 8003a8a:	18e4      	addlt	r4, r4, r3
 8003a8c:	f000 f8ca 	bl	8003c24 <__malloc_lock>
 8003a90:	4a1e      	ldr	r2, [pc, #120]	; (8003b0c <_free_r+0x94>)
 8003a92:	6813      	ldr	r3, [r2, #0]
 8003a94:	4610      	mov	r0, r2
 8003a96:	b933      	cbnz	r3, 8003aa6 <_free_r+0x2e>
 8003a98:	6063      	str	r3, [r4, #4]
 8003a9a:	6014      	str	r4, [r2, #0]
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aa2:	f000 b8c5 	b.w	8003c30 <__malloc_unlock>
 8003aa6:	42a3      	cmp	r3, r4
 8003aa8:	d90a      	bls.n	8003ac0 <_free_r+0x48>
 8003aaa:	6821      	ldr	r1, [r4, #0]
 8003aac:	1862      	adds	r2, r4, r1
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	bf01      	itttt	eq
 8003ab2:	681a      	ldreq	r2, [r3, #0]
 8003ab4:	685b      	ldreq	r3, [r3, #4]
 8003ab6:	1852      	addeq	r2, r2, r1
 8003ab8:	6022      	streq	r2, [r4, #0]
 8003aba:	6063      	str	r3, [r4, #4]
 8003abc:	6004      	str	r4, [r0, #0]
 8003abe:	e7ed      	b.n	8003a9c <_free_r+0x24>
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	b10b      	cbz	r3, 8003aca <_free_r+0x52>
 8003ac6:	42a3      	cmp	r3, r4
 8003ac8:	d9fa      	bls.n	8003ac0 <_free_r+0x48>
 8003aca:	6811      	ldr	r1, [r2, #0]
 8003acc:	1850      	adds	r0, r2, r1
 8003ace:	42a0      	cmp	r0, r4
 8003ad0:	d10b      	bne.n	8003aea <_free_r+0x72>
 8003ad2:	6820      	ldr	r0, [r4, #0]
 8003ad4:	4401      	add	r1, r0
 8003ad6:	1850      	adds	r0, r2, r1
 8003ad8:	4283      	cmp	r3, r0
 8003ada:	6011      	str	r1, [r2, #0]
 8003adc:	d1de      	bne.n	8003a9c <_free_r+0x24>
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4401      	add	r1, r0
 8003ae4:	6011      	str	r1, [r2, #0]
 8003ae6:	6053      	str	r3, [r2, #4]
 8003ae8:	e7d8      	b.n	8003a9c <_free_r+0x24>
 8003aea:	d902      	bls.n	8003af2 <_free_r+0x7a>
 8003aec:	230c      	movs	r3, #12
 8003aee:	602b      	str	r3, [r5, #0]
 8003af0:	e7d4      	b.n	8003a9c <_free_r+0x24>
 8003af2:	6820      	ldr	r0, [r4, #0]
 8003af4:	1821      	adds	r1, r4, r0
 8003af6:	428b      	cmp	r3, r1
 8003af8:	bf01      	itttt	eq
 8003afa:	6819      	ldreq	r1, [r3, #0]
 8003afc:	685b      	ldreq	r3, [r3, #4]
 8003afe:	1809      	addeq	r1, r1, r0
 8003b00:	6021      	streq	r1, [r4, #0]
 8003b02:	6063      	str	r3, [r4, #4]
 8003b04:	6054      	str	r4, [r2, #4]
 8003b06:	e7c9      	b.n	8003a9c <_free_r+0x24>
 8003b08:	bd38      	pop	{r3, r4, r5, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000158 	.word	0x20000158

08003b10 <_malloc_r>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	1ccd      	adds	r5, r1, #3
 8003b14:	f025 0503 	bic.w	r5, r5, #3
 8003b18:	3508      	adds	r5, #8
 8003b1a:	2d0c      	cmp	r5, #12
 8003b1c:	bf38      	it	cc
 8003b1e:	250c      	movcc	r5, #12
 8003b20:	2d00      	cmp	r5, #0
 8003b22:	4606      	mov	r6, r0
 8003b24:	db01      	blt.n	8003b2a <_malloc_r+0x1a>
 8003b26:	42a9      	cmp	r1, r5
 8003b28:	d903      	bls.n	8003b32 <_malloc_r+0x22>
 8003b2a:	230c      	movs	r3, #12
 8003b2c:	6033      	str	r3, [r6, #0]
 8003b2e:	2000      	movs	r0, #0
 8003b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b32:	f000 f877 	bl	8003c24 <__malloc_lock>
 8003b36:	4921      	ldr	r1, [pc, #132]	; (8003bbc <_malloc_r+0xac>)
 8003b38:	680a      	ldr	r2, [r1, #0]
 8003b3a:	4614      	mov	r4, r2
 8003b3c:	b99c      	cbnz	r4, 8003b66 <_malloc_r+0x56>
 8003b3e:	4f20      	ldr	r7, [pc, #128]	; (8003bc0 <_malloc_r+0xb0>)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	b923      	cbnz	r3, 8003b4e <_malloc_r+0x3e>
 8003b44:	4621      	mov	r1, r4
 8003b46:	4630      	mov	r0, r6
 8003b48:	f000 f83c 	bl	8003bc4 <_sbrk_r>
 8003b4c:	6038      	str	r0, [r7, #0]
 8003b4e:	4629      	mov	r1, r5
 8003b50:	4630      	mov	r0, r6
 8003b52:	f000 f837 	bl	8003bc4 <_sbrk_r>
 8003b56:	1c43      	adds	r3, r0, #1
 8003b58:	d123      	bne.n	8003ba2 <_malloc_r+0x92>
 8003b5a:	230c      	movs	r3, #12
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	6033      	str	r3, [r6, #0]
 8003b60:	f000 f866 	bl	8003c30 <__malloc_unlock>
 8003b64:	e7e3      	b.n	8003b2e <_malloc_r+0x1e>
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	1b5b      	subs	r3, r3, r5
 8003b6a:	d417      	bmi.n	8003b9c <_malloc_r+0x8c>
 8003b6c:	2b0b      	cmp	r3, #11
 8003b6e:	d903      	bls.n	8003b78 <_malloc_r+0x68>
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	441c      	add	r4, r3
 8003b74:	6025      	str	r5, [r4, #0]
 8003b76:	e004      	b.n	8003b82 <_malloc_r+0x72>
 8003b78:	6863      	ldr	r3, [r4, #4]
 8003b7a:	42a2      	cmp	r2, r4
 8003b7c:	bf0c      	ite	eq
 8003b7e:	600b      	streq	r3, [r1, #0]
 8003b80:	6053      	strne	r3, [r2, #4]
 8003b82:	4630      	mov	r0, r6
 8003b84:	f000 f854 	bl	8003c30 <__malloc_unlock>
 8003b88:	f104 000b 	add.w	r0, r4, #11
 8003b8c:	1d23      	adds	r3, r4, #4
 8003b8e:	f020 0007 	bic.w	r0, r0, #7
 8003b92:	1ac2      	subs	r2, r0, r3
 8003b94:	d0cc      	beq.n	8003b30 <_malloc_r+0x20>
 8003b96:	1a1b      	subs	r3, r3, r0
 8003b98:	50a3      	str	r3, [r4, r2]
 8003b9a:	e7c9      	b.n	8003b30 <_malloc_r+0x20>
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	6864      	ldr	r4, [r4, #4]
 8003ba0:	e7cc      	b.n	8003b3c <_malloc_r+0x2c>
 8003ba2:	1cc4      	adds	r4, r0, #3
 8003ba4:	f024 0403 	bic.w	r4, r4, #3
 8003ba8:	42a0      	cmp	r0, r4
 8003baa:	d0e3      	beq.n	8003b74 <_malloc_r+0x64>
 8003bac:	1a21      	subs	r1, r4, r0
 8003bae:	4630      	mov	r0, r6
 8003bb0:	f000 f808 	bl	8003bc4 <_sbrk_r>
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	d1dd      	bne.n	8003b74 <_malloc_r+0x64>
 8003bb8:	e7cf      	b.n	8003b5a <_malloc_r+0x4a>
 8003bba:	bf00      	nop
 8003bbc:	20000158 	.word	0x20000158
 8003bc0:	2000015c 	.word	0x2000015c

08003bc4 <_sbrk_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	4d05      	ldr	r5, [pc, #20]	; (8003be0 <_sbrk_r+0x1c>)
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	f7fd fcd2 	bl	8001578 <_sbrk>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d102      	bne.n	8003bde <_sbrk_r+0x1a>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	b103      	cbz	r3, 8003bde <_sbrk_r+0x1a>
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
 8003be0:	2000022c 	.word	0x2000022c

08003be4 <siprintf>:
 8003be4:	b40e      	push	{r1, r2, r3}
 8003be6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bea:	b500      	push	{lr}
 8003bec:	b09c      	sub	sp, #112	; 0x70
 8003bee:	ab1d      	add	r3, sp, #116	; 0x74
 8003bf0:	9002      	str	r0, [sp, #8]
 8003bf2:	9006      	str	r0, [sp, #24]
 8003bf4:	9107      	str	r1, [sp, #28]
 8003bf6:	9104      	str	r1, [sp, #16]
 8003bf8:	4808      	ldr	r0, [pc, #32]	; (8003c1c <siprintf+0x38>)
 8003bfa:	4909      	ldr	r1, [pc, #36]	; (8003c20 <siprintf+0x3c>)
 8003bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c00:	9105      	str	r1, [sp, #20]
 8003c02:	6800      	ldr	r0, [r0, #0]
 8003c04:	a902      	add	r1, sp, #8
 8003c06:	9301      	str	r3, [sp, #4]
 8003c08:	f000 f874 	bl	8003cf4 <_svfiprintf_r>
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	9b02      	ldr	r3, [sp, #8]
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	b01c      	add	sp, #112	; 0x70
 8003c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c18:	b003      	add	sp, #12
 8003c1a:	4770      	bx	lr
 8003c1c:	200000a4 	.word	0x200000a4
 8003c20:	ffff0208 	.word	0xffff0208

08003c24 <__malloc_lock>:
 8003c24:	4801      	ldr	r0, [pc, #4]	; (8003c2c <__malloc_lock+0x8>)
 8003c26:	f000 bafb 	b.w	8004220 <__retarget_lock_acquire_recursive>
 8003c2a:	bf00      	nop
 8003c2c:	20000234 	.word	0x20000234

08003c30 <__malloc_unlock>:
 8003c30:	4801      	ldr	r0, [pc, #4]	; (8003c38 <__malloc_unlock+0x8>)
 8003c32:	f000 baf6 	b.w	8004222 <__retarget_lock_release_recursive>
 8003c36:	bf00      	nop
 8003c38:	20000234 	.word	0x20000234

08003c3c <__ssputs_r>:
 8003c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c40:	688e      	ldr	r6, [r1, #8]
 8003c42:	4682      	mov	sl, r0
 8003c44:	429e      	cmp	r6, r3
 8003c46:	460c      	mov	r4, r1
 8003c48:	4690      	mov	r8, r2
 8003c4a:	461f      	mov	r7, r3
 8003c4c:	d838      	bhi.n	8003cc0 <__ssputs_r+0x84>
 8003c4e:	898a      	ldrh	r2, [r1, #12]
 8003c50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c54:	d032      	beq.n	8003cbc <__ssputs_r+0x80>
 8003c56:	6825      	ldr	r5, [r4, #0]
 8003c58:	6909      	ldr	r1, [r1, #16]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	eba5 0901 	sub.w	r9, r5, r1
 8003c60:	6965      	ldr	r5, [r4, #20]
 8003c62:	444b      	add	r3, r9
 8003c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c6c:	106d      	asrs	r5, r5, #1
 8003c6e:	429d      	cmp	r5, r3
 8003c70:	bf38      	it	cc
 8003c72:	461d      	movcc	r5, r3
 8003c74:	0553      	lsls	r3, r2, #21
 8003c76:	d531      	bpl.n	8003cdc <__ssputs_r+0xa0>
 8003c78:	4629      	mov	r1, r5
 8003c7a:	f7ff ff49 	bl	8003b10 <_malloc_r>
 8003c7e:	4606      	mov	r6, r0
 8003c80:	b950      	cbnz	r0, 8003c98 <__ssputs_r+0x5c>
 8003c82:	230c      	movs	r3, #12
 8003c84:	f04f 30ff 	mov.w	r0, #4294967295
 8003c88:	f8ca 3000 	str.w	r3, [sl]
 8003c8c:	89a3      	ldrh	r3, [r4, #12]
 8003c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c92:	81a3      	strh	r3, [r4, #12]
 8003c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c98:	464a      	mov	r2, r9
 8003c9a:	6921      	ldr	r1, [r4, #16]
 8003c9c:	f000 fad0 	bl	8004240 <memcpy>
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003caa:	81a3      	strh	r3, [r4, #12]
 8003cac:	6126      	str	r6, [r4, #16]
 8003cae:	444e      	add	r6, r9
 8003cb0:	6026      	str	r6, [r4, #0]
 8003cb2:	463e      	mov	r6, r7
 8003cb4:	6165      	str	r5, [r4, #20]
 8003cb6:	eba5 0509 	sub.w	r5, r5, r9
 8003cba:	60a5      	str	r5, [r4, #8]
 8003cbc:	42be      	cmp	r6, r7
 8003cbe:	d900      	bls.n	8003cc2 <__ssputs_r+0x86>
 8003cc0:	463e      	mov	r6, r7
 8003cc2:	4632      	mov	r2, r6
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	6820      	ldr	r0, [r4, #0]
 8003cc8:	f000 fac8 	bl	800425c <memmove>
 8003ccc:	68a3      	ldr	r3, [r4, #8]
 8003cce:	6822      	ldr	r2, [r4, #0]
 8003cd0:	1b9b      	subs	r3, r3, r6
 8003cd2:	4432      	add	r2, r6
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	60a3      	str	r3, [r4, #8]
 8003cd8:	6022      	str	r2, [r4, #0]
 8003cda:	e7db      	b.n	8003c94 <__ssputs_r+0x58>
 8003cdc:	462a      	mov	r2, r5
 8003cde:	f000 fad7 	bl	8004290 <_realloc_r>
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d1e1      	bne.n	8003cac <__ssputs_r+0x70>
 8003ce8:	4650      	mov	r0, sl
 8003cea:	6921      	ldr	r1, [r4, #16]
 8003cec:	f7ff fec4 	bl	8003a78 <_free_r>
 8003cf0:	e7c7      	b.n	8003c82 <__ssputs_r+0x46>
	...

08003cf4 <_svfiprintf_r>:
 8003cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf8:	4698      	mov	r8, r3
 8003cfa:	898b      	ldrh	r3, [r1, #12]
 8003cfc:	4607      	mov	r7, r0
 8003cfe:	061b      	lsls	r3, r3, #24
 8003d00:	460d      	mov	r5, r1
 8003d02:	4614      	mov	r4, r2
 8003d04:	b09d      	sub	sp, #116	; 0x74
 8003d06:	d50e      	bpl.n	8003d26 <_svfiprintf_r+0x32>
 8003d08:	690b      	ldr	r3, [r1, #16]
 8003d0a:	b963      	cbnz	r3, 8003d26 <_svfiprintf_r+0x32>
 8003d0c:	2140      	movs	r1, #64	; 0x40
 8003d0e:	f7ff feff 	bl	8003b10 <_malloc_r>
 8003d12:	6028      	str	r0, [r5, #0]
 8003d14:	6128      	str	r0, [r5, #16]
 8003d16:	b920      	cbnz	r0, 8003d22 <_svfiprintf_r+0x2e>
 8003d18:	230c      	movs	r3, #12
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	e0d1      	b.n	8003ec6 <_svfiprintf_r+0x1d2>
 8003d22:	2340      	movs	r3, #64	; 0x40
 8003d24:	616b      	str	r3, [r5, #20]
 8003d26:	2300      	movs	r3, #0
 8003d28:	9309      	str	r3, [sp, #36]	; 0x24
 8003d2a:	2320      	movs	r3, #32
 8003d2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d30:	2330      	movs	r3, #48	; 0x30
 8003d32:	f04f 0901 	mov.w	r9, #1
 8003d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ee0 <_svfiprintf_r+0x1ec>
 8003d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d42:	4623      	mov	r3, r4
 8003d44:	469a      	mov	sl, r3
 8003d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d4a:	b10a      	cbz	r2, 8003d50 <_svfiprintf_r+0x5c>
 8003d4c:	2a25      	cmp	r2, #37	; 0x25
 8003d4e:	d1f9      	bne.n	8003d44 <_svfiprintf_r+0x50>
 8003d50:	ebba 0b04 	subs.w	fp, sl, r4
 8003d54:	d00b      	beq.n	8003d6e <_svfiprintf_r+0x7a>
 8003d56:	465b      	mov	r3, fp
 8003d58:	4622      	mov	r2, r4
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	4638      	mov	r0, r7
 8003d5e:	f7ff ff6d 	bl	8003c3c <__ssputs_r>
 8003d62:	3001      	adds	r0, #1
 8003d64:	f000 80aa 	beq.w	8003ebc <_svfiprintf_r+0x1c8>
 8003d68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d6a:	445a      	add	r2, fp
 8003d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80a2 	beq.w	8003ebc <_svfiprintf_r+0x1c8>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d82:	f10a 0a01 	add.w	sl, sl, #1
 8003d86:	9304      	str	r3, [sp, #16]
 8003d88:	9307      	str	r3, [sp, #28]
 8003d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d8e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d90:	4654      	mov	r4, sl
 8003d92:	2205      	movs	r2, #5
 8003d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d98:	4851      	ldr	r0, [pc, #324]	; (8003ee0 <_svfiprintf_r+0x1ec>)
 8003d9a:	f000 fa43 	bl	8004224 <memchr>
 8003d9e:	9a04      	ldr	r2, [sp, #16]
 8003da0:	b9d8      	cbnz	r0, 8003dda <_svfiprintf_r+0xe6>
 8003da2:	06d0      	lsls	r0, r2, #27
 8003da4:	bf44      	itt	mi
 8003da6:	2320      	movmi	r3, #32
 8003da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dac:	0711      	lsls	r1, r2, #28
 8003dae:	bf44      	itt	mi
 8003db0:	232b      	movmi	r3, #43	; 0x2b
 8003db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003db6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dba:	2b2a      	cmp	r3, #42	; 0x2a
 8003dbc:	d015      	beq.n	8003dea <_svfiprintf_r+0xf6>
 8003dbe:	4654      	mov	r4, sl
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f04f 0c0a 	mov.w	ip, #10
 8003dc6:	9a07      	ldr	r2, [sp, #28]
 8003dc8:	4621      	mov	r1, r4
 8003dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dce:	3b30      	subs	r3, #48	; 0x30
 8003dd0:	2b09      	cmp	r3, #9
 8003dd2:	d94e      	bls.n	8003e72 <_svfiprintf_r+0x17e>
 8003dd4:	b1b0      	cbz	r0, 8003e04 <_svfiprintf_r+0x110>
 8003dd6:	9207      	str	r2, [sp, #28]
 8003dd8:	e014      	b.n	8003e04 <_svfiprintf_r+0x110>
 8003dda:	eba0 0308 	sub.w	r3, r0, r8
 8003dde:	fa09 f303 	lsl.w	r3, r9, r3
 8003de2:	4313      	orrs	r3, r2
 8003de4:	46a2      	mov	sl, r4
 8003de6:	9304      	str	r3, [sp, #16]
 8003de8:	e7d2      	b.n	8003d90 <_svfiprintf_r+0x9c>
 8003dea:	9b03      	ldr	r3, [sp, #12]
 8003dec:	1d19      	adds	r1, r3, #4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	9103      	str	r1, [sp, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bfbb      	ittet	lt
 8003df6:	425b      	neglt	r3, r3
 8003df8:	f042 0202 	orrlt.w	r2, r2, #2
 8003dfc:	9307      	strge	r3, [sp, #28]
 8003dfe:	9307      	strlt	r3, [sp, #28]
 8003e00:	bfb8      	it	lt
 8003e02:	9204      	strlt	r2, [sp, #16]
 8003e04:	7823      	ldrb	r3, [r4, #0]
 8003e06:	2b2e      	cmp	r3, #46	; 0x2e
 8003e08:	d10c      	bne.n	8003e24 <_svfiprintf_r+0x130>
 8003e0a:	7863      	ldrb	r3, [r4, #1]
 8003e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e0e:	d135      	bne.n	8003e7c <_svfiprintf_r+0x188>
 8003e10:	9b03      	ldr	r3, [sp, #12]
 8003e12:	3402      	adds	r4, #2
 8003e14:	1d1a      	adds	r2, r3, #4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	9203      	str	r2, [sp, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bfb8      	it	lt
 8003e1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e22:	9305      	str	r3, [sp, #20]
 8003e24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ef0 <_svfiprintf_r+0x1fc>
 8003e28:	2203      	movs	r2, #3
 8003e2a:	4650      	mov	r0, sl
 8003e2c:	7821      	ldrb	r1, [r4, #0]
 8003e2e:	f000 f9f9 	bl	8004224 <memchr>
 8003e32:	b140      	cbz	r0, 8003e46 <_svfiprintf_r+0x152>
 8003e34:	2340      	movs	r3, #64	; 0x40
 8003e36:	eba0 000a 	sub.w	r0, r0, sl
 8003e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e3e:	9b04      	ldr	r3, [sp, #16]
 8003e40:	3401      	adds	r4, #1
 8003e42:	4303      	orrs	r3, r0
 8003e44:	9304      	str	r3, [sp, #16]
 8003e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e4a:	2206      	movs	r2, #6
 8003e4c:	4825      	ldr	r0, [pc, #148]	; (8003ee4 <_svfiprintf_r+0x1f0>)
 8003e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e52:	f000 f9e7 	bl	8004224 <memchr>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d038      	beq.n	8003ecc <_svfiprintf_r+0x1d8>
 8003e5a:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <_svfiprintf_r+0x1f4>)
 8003e5c:	bb1b      	cbnz	r3, 8003ea6 <_svfiprintf_r+0x1b2>
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	3307      	adds	r3, #7
 8003e62:	f023 0307 	bic.w	r3, r3, #7
 8003e66:	3308      	adds	r3, #8
 8003e68:	9303      	str	r3, [sp, #12]
 8003e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e6c:	4433      	add	r3, r6
 8003e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e70:	e767      	b.n	8003d42 <_svfiprintf_r+0x4e>
 8003e72:	460c      	mov	r4, r1
 8003e74:	2001      	movs	r0, #1
 8003e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e7a:	e7a5      	b.n	8003dc8 <_svfiprintf_r+0xd4>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f04f 0c0a 	mov.w	ip, #10
 8003e82:	4619      	mov	r1, r3
 8003e84:	3401      	adds	r4, #1
 8003e86:	9305      	str	r3, [sp, #20]
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e8e:	3a30      	subs	r2, #48	; 0x30
 8003e90:	2a09      	cmp	r2, #9
 8003e92:	d903      	bls.n	8003e9c <_svfiprintf_r+0x1a8>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0c5      	beq.n	8003e24 <_svfiprintf_r+0x130>
 8003e98:	9105      	str	r1, [sp, #20]
 8003e9a:	e7c3      	b.n	8003e24 <_svfiprintf_r+0x130>
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ea4:	e7f0      	b.n	8003e88 <_svfiprintf_r+0x194>
 8003ea6:	ab03      	add	r3, sp, #12
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	462a      	mov	r2, r5
 8003eac:	4638      	mov	r0, r7
 8003eae:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <_svfiprintf_r+0x1f8>)
 8003eb0:	a904      	add	r1, sp, #16
 8003eb2:	f3af 8000 	nop.w
 8003eb6:	1c42      	adds	r2, r0, #1
 8003eb8:	4606      	mov	r6, r0
 8003eba:	d1d6      	bne.n	8003e6a <_svfiprintf_r+0x176>
 8003ebc:	89ab      	ldrh	r3, [r5, #12]
 8003ebe:	065b      	lsls	r3, r3, #25
 8003ec0:	f53f af2c 	bmi.w	8003d1c <_svfiprintf_r+0x28>
 8003ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ec6:	b01d      	add	sp, #116	; 0x74
 8003ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ecc:	ab03      	add	r3, sp, #12
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	462a      	mov	r2, r5
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <_svfiprintf_r+0x1f8>)
 8003ed6:	a904      	add	r1, sp, #16
 8003ed8:	f000 f87c 	bl	8003fd4 <_printf_i>
 8003edc:	e7eb      	b.n	8003eb6 <_svfiprintf_r+0x1c2>
 8003ede:	bf00      	nop
 8003ee0:	080043f2 	.word	0x080043f2
 8003ee4:	080043fc 	.word	0x080043fc
 8003ee8:	00000000 	.word	0x00000000
 8003eec:	08003c3d 	.word	0x08003c3d
 8003ef0:	080043f8 	.word	0x080043f8

08003ef4 <_printf_common>:
 8003ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef8:	4616      	mov	r6, r2
 8003efa:	4699      	mov	r9, r3
 8003efc:	688a      	ldr	r2, [r1, #8]
 8003efe:	690b      	ldr	r3, [r1, #16]
 8003f00:	4607      	mov	r7, r0
 8003f02:	4293      	cmp	r3, r2
 8003f04:	bfb8      	it	lt
 8003f06:	4613      	movlt	r3, r2
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f0e:	460c      	mov	r4, r1
 8003f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f14:	b10a      	cbz	r2, 8003f1a <_printf_common+0x26>
 8003f16:	3301      	adds	r3, #1
 8003f18:	6033      	str	r3, [r6, #0]
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	0699      	lsls	r1, r3, #26
 8003f1e:	bf42      	ittt	mi
 8003f20:	6833      	ldrmi	r3, [r6, #0]
 8003f22:	3302      	addmi	r3, #2
 8003f24:	6033      	strmi	r3, [r6, #0]
 8003f26:	6825      	ldr	r5, [r4, #0]
 8003f28:	f015 0506 	ands.w	r5, r5, #6
 8003f2c:	d106      	bne.n	8003f3c <_printf_common+0x48>
 8003f2e:	f104 0a19 	add.w	sl, r4, #25
 8003f32:	68e3      	ldr	r3, [r4, #12]
 8003f34:	6832      	ldr	r2, [r6, #0]
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	42ab      	cmp	r3, r5
 8003f3a:	dc28      	bgt.n	8003f8e <_printf_common+0x9a>
 8003f3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f40:	1e13      	subs	r3, r2, #0
 8003f42:	6822      	ldr	r2, [r4, #0]
 8003f44:	bf18      	it	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	0692      	lsls	r2, r2, #26
 8003f4a:	d42d      	bmi.n	8003fa8 <_printf_common+0xb4>
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	4638      	mov	r0, r7
 8003f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f54:	47c0      	blx	r8
 8003f56:	3001      	adds	r0, #1
 8003f58:	d020      	beq.n	8003f9c <_printf_common+0xa8>
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	68e5      	ldr	r5, [r4, #12]
 8003f5e:	f003 0306 	and.w	r3, r3, #6
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	bf18      	it	ne
 8003f66:	2500      	movne	r5, #0
 8003f68:	6832      	ldr	r2, [r6, #0]
 8003f6a:	f04f 0600 	mov.w	r6, #0
 8003f6e:	68a3      	ldr	r3, [r4, #8]
 8003f70:	bf08      	it	eq
 8003f72:	1aad      	subeq	r5, r5, r2
 8003f74:	6922      	ldr	r2, [r4, #16]
 8003f76:	bf08      	it	eq
 8003f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	bfc4      	itt	gt
 8003f80:	1a9b      	subgt	r3, r3, r2
 8003f82:	18ed      	addgt	r5, r5, r3
 8003f84:	341a      	adds	r4, #26
 8003f86:	42b5      	cmp	r5, r6
 8003f88:	d11a      	bne.n	8003fc0 <_printf_common+0xcc>
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	e008      	b.n	8003fa0 <_printf_common+0xac>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	4652      	mov	r2, sl
 8003f92:	4649      	mov	r1, r9
 8003f94:	4638      	mov	r0, r7
 8003f96:	47c0      	blx	r8
 8003f98:	3001      	adds	r0, #1
 8003f9a:	d103      	bne.n	8003fa4 <_printf_common+0xb0>
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa4:	3501      	adds	r5, #1
 8003fa6:	e7c4      	b.n	8003f32 <_printf_common+0x3e>
 8003fa8:	2030      	movs	r0, #48	; 0x30
 8003faa:	18e1      	adds	r1, r4, r3
 8003fac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fb6:	4422      	add	r2, r4
 8003fb8:	3302      	adds	r3, #2
 8003fba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fbe:	e7c5      	b.n	8003f4c <_printf_common+0x58>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	47c0      	blx	r8
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d0e6      	beq.n	8003f9c <_printf_common+0xa8>
 8003fce:	3601      	adds	r6, #1
 8003fd0:	e7d9      	b.n	8003f86 <_printf_common+0x92>
	...

08003fd4 <_printf_i>:
 8003fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd8:	460c      	mov	r4, r1
 8003fda:	7e27      	ldrb	r7, [r4, #24]
 8003fdc:	4691      	mov	r9, r2
 8003fde:	2f78      	cmp	r7, #120	; 0x78
 8003fe0:	4680      	mov	r8, r0
 8003fe2:	469a      	mov	sl, r3
 8003fe4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fe6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fea:	d807      	bhi.n	8003ffc <_printf_i+0x28>
 8003fec:	2f62      	cmp	r7, #98	; 0x62
 8003fee:	d80a      	bhi.n	8004006 <_printf_i+0x32>
 8003ff0:	2f00      	cmp	r7, #0
 8003ff2:	f000 80d9 	beq.w	80041a8 <_printf_i+0x1d4>
 8003ff6:	2f58      	cmp	r7, #88	; 0x58
 8003ff8:	f000 80a4 	beq.w	8004144 <_printf_i+0x170>
 8003ffc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004004:	e03a      	b.n	800407c <_printf_i+0xa8>
 8004006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800400a:	2b15      	cmp	r3, #21
 800400c:	d8f6      	bhi.n	8003ffc <_printf_i+0x28>
 800400e:	a001      	add	r0, pc, #4	; (adr r0, 8004014 <_printf_i+0x40>)
 8004010:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004014:	0800406d 	.word	0x0800406d
 8004018:	08004081 	.word	0x08004081
 800401c:	08003ffd 	.word	0x08003ffd
 8004020:	08003ffd 	.word	0x08003ffd
 8004024:	08003ffd 	.word	0x08003ffd
 8004028:	08003ffd 	.word	0x08003ffd
 800402c:	08004081 	.word	0x08004081
 8004030:	08003ffd 	.word	0x08003ffd
 8004034:	08003ffd 	.word	0x08003ffd
 8004038:	08003ffd 	.word	0x08003ffd
 800403c:	08003ffd 	.word	0x08003ffd
 8004040:	0800418f 	.word	0x0800418f
 8004044:	080040b1 	.word	0x080040b1
 8004048:	08004171 	.word	0x08004171
 800404c:	08003ffd 	.word	0x08003ffd
 8004050:	08003ffd 	.word	0x08003ffd
 8004054:	080041b1 	.word	0x080041b1
 8004058:	08003ffd 	.word	0x08003ffd
 800405c:	080040b1 	.word	0x080040b1
 8004060:	08003ffd 	.word	0x08003ffd
 8004064:	08003ffd 	.word	0x08003ffd
 8004068:	08004179 	.word	0x08004179
 800406c:	680b      	ldr	r3, [r1, #0]
 800406e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004072:	1d1a      	adds	r2, r3, #4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	600a      	str	r2, [r1, #0]
 8004078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800407c:	2301      	movs	r3, #1
 800407e:	e0a4      	b.n	80041ca <_printf_i+0x1f6>
 8004080:	6825      	ldr	r5, [r4, #0]
 8004082:	6808      	ldr	r0, [r1, #0]
 8004084:	062e      	lsls	r6, r5, #24
 8004086:	f100 0304 	add.w	r3, r0, #4
 800408a:	d50a      	bpl.n	80040a2 <_printf_i+0xce>
 800408c:	6805      	ldr	r5, [r0, #0]
 800408e:	600b      	str	r3, [r1, #0]
 8004090:	2d00      	cmp	r5, #0
 8004092:	da03      	bge.n	800409c <_printf_i+0xc8>
 8004094:	232d      	movs	r3, #45	; 0x2d
 8004096:	426d      	negs	r5, r5
 8004098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800409c:	230a      	movs	r3, #10
 800409e:	485e      	ldr	r0, [pc, #376]	; (8004218 <_printf_i+0x244>)
 80040a0:	e019      	b.n	80040d6 <_printf_i+0x102>
 80040a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040a6:	6805      	ldr	r5, [r0, #0]
 80040a8:	600b      	str	r3, [r1, #0]
 80040aa:	bf18      	it	ne
 80040ac:	b22d      	sxthne	r5, r5
 80040ae:	e7ef      	b.n	8004090 <_printf_i+0xbc>
 80040b0:	680b      	ldr	r3, [r1, #0]
 80040b2:	6825      	ldr	r5, [r4, #0]
 80040b4:	1d18      	adds	r0, r3, #4
 80040b6:	6008      	str	r0, [r1, #0]
 80040b8:	0628      	lsls	r0, r5, #24
 80040ba:	d501      	bpl.n	80040c0 <_printf_i+0xec>
 80040bc:	681d      	ldr	r5, [r3, #0]
 80040be:	e002      	b.n	80040c6 <_printf_i+0xf2>
 80040c0:	0669      	lsls	r1, r5, #25
 80040c2:	d5fb      	bpl.n	80040bc <_printf_i+0xe8>
 80040c4:	881d      	ldrh	r5, [r3, #0]
 80040c6:	2f6f      	cmp	r7, #111	; 0x6f
 80040c8:	bf0c      	ite	eq
 80040ca:	2308      	moveq	r3, #8
 80040cc:	230a      	movne	r3, #10
 80040ce:	4852      	ldr	r0, [pc, #328]	; (8004218 <_printf_i+0x244>)
 80040d0:	2100      	movs	r1, #0
 80040d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040d6:	6866      	ldr	r6, [r4, #4]
 80040d8:	2e00      	cmp	r6, #0
 80040da:	bfa8      	it	ge
 80040dc:	6821      	ldrge	r1, [r4, #0]
 80040de:	60a6      	str	r6, [r4, #8]
 80040e0:	bfa4      	itt	ge
 80040e2:	f021 0104 	bicge.w	r1, r1, #4
 80040e6:	6021      	strge	r1, [r4, #0]
 80040e8:	b90d      	cbnz	r5, 80040ee <_printf_i+0x11a>
 80040ea:	2e00      	cmp	r6, #0
 80040ec:	d04d      	beq.n	800418a <_printf_i+0x1b6>
 80040ee:	4616      	mov	r6, r2
 80040f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80040f4:	fb03 5711 	mls	r7, r3, r1, r5
 80040f8:	5dc7      	ldrb	r7, [r0, r7]
 80040fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040fe:	462f      	mov	r7, r5
 8004100:	42bb      	cmp	r3, r7
 8004102:	460d      	mov	r5, r1
 8004104:	d9f4      	bls.n	80040f0 <_printf_i+0x11c>
 8004106:	2b08      	cmp	r3, #8
 8004108:	d10b      	bne.n	8004122 <_printf_i+0x14e>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	07df      	lsls	r7, r3, #31
 800410e:	d508      	bpl.n	8004122 <_printf_i+0x14e>
 8004110:	6923      	ldr	r3, [r4, #16]
 8004112:	6861      	ldr	r1, [r4, #4]
 8004114:	4299      	cmp	r1, r3
 8004116:	bfde      	ittt	le
 8004118:	2330      	movle	r3, #48	; 0x30
 800411a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800411e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004122:	1b92      	subs	r2, r2, r6
 8004124:	6122      	str	r2, [r4, #16]
 8004126:	464b      	mov	r3, r9
 8004128:	4621      	mov	r1, r4
 800412a:	4640      	mov	r0, r8
 800412c:	f8cd a000 	str.w	sl, [sp]
 8004130:	aa03      	add	r2, sp, #12
 8004132:	f7ff fedf 	bl	8003ef4 <_printf_common>
 8004136:	3001      	adds	r0, #1
 8004138:	d14c      	bne.n	80041d4 <_printf_i+0x200>
 800413a:	f04f 30ff 	mov.w	r0, #4294967295
 800413e:	b004      	add	sp, #16
 8004140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004144:	4834      	ldr	r0, [pc, #208]	; (8004218 <_printf_i+0x244>)
 8004146:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800414a:	680e      	ldr	r6, [r1, #0]
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004152:	061f      	lsls	r7, r3, #24
 8004154:	600e      	str	r6, [r1, #0]
 8004156:	d514      	bpl.n	8004182 <_printf_i+0x1ae>
 8004158:	07d9      	lsls	r1, r3, #31
 800415a:	bf44      	itt	mi
 800415c:	f043 0320 	orrmi.w	r3, r3, #32
 8004160:	6023      	strmi	r3, [r4, #0]
 8004162:	b91d      	cbnz	r5, 800416c <_printf_i+0x198>
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	f023 0320 	bic.w	r3, r3, #32
 800416a:	6023      	str	r3, [r4, #0]
 800416c:	2310      	movs	r3, #16
 800416e:	e7af      	b.n	80040d0 <_printf_i+0xfc>
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	f043 0320 	orr.w	r3, r3, #32
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	2378      	movs	r3, #120	; 0x78
 800417a:	4828      	ldr	r0, [pc, #160]	; (800421c <_printf_i+0x248>)
 800417c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004180:	e7e3      	b.n	800414a <_printf_i+0x176>
 8004182:	065e      	lsls	r6, r3, #25
 8004184:	bf48      	it	mi
 8004186:	b2ad      	uxthmi	r5, r5
 8004188:	e7e6      	b.n	8004158 <_printf_i+0x184>
 800418a:	4616      	mov	r6, r2
 800418c:	e7bb      	b.n	8004106 <_printf_i+0x132>
 800418e:	680b      	ldr	r3, [r1, #0]
 8004190:	6826      	ldr	r6, [r4, #0]
 8004192:	1d1d      	adds	r5, r3, #4
 8004194:	6960      	ldr	r0, [r4, #20]
 8004196:	600d      	str	r5, [r1, #0]
 8004198:	0635      	lsls	r5, r6, #24
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	d501      	bpl.n	80041a2 <_printf_i+0x1ce>
 800419e:	6018      	str	r0, [r3, #0]
 80041a0:	e002      	b.n	80041a8 <_printf_i+0x1d4>
 80041a2:	0671      	lsls	r1, r6, #25
 80041a4:	d5fb      	bpl.n	800419e <_printf_i+0x1ca>
 80041a6:	8018      	strh	r0, [r3, #0]
 80041a8:	2300      	movs	r3, #0
 80041aa:	4616      	mov	r6, r2
 80041ac:	6123      	str	r3, [r4, #16]
 80041ae:	e7ba      	b.n	8004126 <_printf_i+0x152>
 80041b0:	680b      	ldr	r3, [r1, #0]
 80041b2:	1d1a      	adds	r2, r3, #4
 80041b4:	600a      	str	r2, [r1, #0]
 80041b6:	681e      	ldr	r6, [r3, #0]
 80041b8:	2100      	movs	r1, #0
 80041ba:	4630      	mov	r0, r6
 80041bc:	6862      	ldr	r2, [r4, #4]
 80041be:	f000 f831 	bl	8004224 <memchr>
 80041c2:	b108      	cbz	r0, 80041c8 <_printf_i+0x1f4>
 80041c4:	1b80      	subs	r0, r0, r6
 80041c6:	6060      	str	r0, [r4, #4]
 80041c8:	6863      	ldr	r3, [r4, #4]
 80041ca:	6123      	str	r3, [r4, #16]
 80041cc:	2300      	movs	r3, #0
 80041ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d2:	e7a8      	b.n	8004126 <_printf_i+0x152>
 80041d4:	4632      	mov	r2, r6
 80041d6:	4649      	mov	r1, r9
 80041d8:	4640      	mov	r0, r8
 80041da:	6923      	ldr	r3, [r4, #16]
 80041dc:	47d0      	blx	sl
 80041de:	3001      	adds	r0, #1
 80041e0:	d0ab      	beq.n	800413a <_printf_i+0x166>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	079b      	lsls	r3, r3, #30
 80041e6:	d413      	bmi.n	8004210 <_printf_i+0x23c>
 80041e8:	68e0      	ldr	r0, [r4, #12]
 80041ea:	9b03      	ldr	r3, [sp, #12]
 80041ec:	4298      	cmp	r0, r3
 80041ee:	bfb8      	it	lt
 80041f0:	4618      	movlt	r0, r3
 80041f2:	e7a4      	b.n	800413e <_printf_i+0x16a>
 80041f4:	2301      	movs	r3, #1
 80041f6:	4632      	mov	r2, r6
 80041f8:	4649      	mov	r1, r9
 80041fa:	4640      	mov	r0, r8
 80041fc:	47d0      	blx	sl
 80041fe:	3001      	adds	r0, #1
 8004200:	d09b      	beq.n	800413a <_printf_i+0x166>
 8004202:	3501      	adds	r5, #1
 8004204:	68e3      	ldr	r3, [r4, #12]
 8004206:	9903      	ldr	r1, [sp, #12]
 8004208:	1a5b      	subs	r3, r3, r1
 800420a:	42ab      	cmp	r3, r5
 800420c:	dcf2      	bgt.n	80041f4 <_printf_i+0x220>
 800420e:	e7eb      	b.n	80041e8 <_printf_i+0x214>
 8004210:	2500      	movs	r5, #0
 8004212:	f104 0619 	add.w	r6, r4, #25
 8004216:	e7f5      	b.n	8004204 <_printf_i+0x230>
 8004218:	08004403 	.word	0x08004403
 800421c:	08004414 	.word	0x08004414

08004220 <__retarget_lock_acquire_recursive>:
 8004220:	4770      	bx	lr

08004222 <__retarget_lock_release_recursive>:
 8004222:	4770      	bx	lr

08004224 <memchr>:
 8004224:	4603      	mov	r3, r0
 8004226:	b510      	push	{r4, lr}
 8004228:	b2c9      	uxtb	r1, r1
 800422a:	4402      	add	r2, r0
 800422c:	4293      	cmp	r3, r2
 800422e:	4618      	mov	r0, r3
 8004230:	d101      	bne.n	8004236 <memchr+0x12>
 8004232:	2000      	movs	r0, #0
 8004234:	e003      	b.n	800423e <memchr+0x1a>
 8004236:	7804      	ldrb	r4, [r0, #0]
 8004238:	3301      	adds	r3, #1
 800423a:	428c      	cmp	r4, r1
 800423c:	d1f6      	bne.n	800422c <memchr+0x8>
 800423e:	bd10      	pop	{r4, pc}

08004240 <memcpy>:
 8004240:	440a      	add	r2, r1
 8004242:	4291      	cmp	r1, r2
 8004244:	f100 33ff 	add.w	r3, r0, #4294967295
 8004248:	d100      	bne.n	800424c <memcpy+0xc>
 800424a:	4770      	bx	lr
 800424c:	b510      	push	{r4, lr}
 800424e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004252:	4291      	cmp	r1, r2
 8004254:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004258:	d1f9      	bne.n	800424e <memcpy+0xe>
 800425a:	bd10      	pop	{r4, pc}

0800425c <memmove>:
 800425c:	4288      	cmp	r0, r1
 800425e:	b510      	push	{r4, lr}
 8004260:	eb01 0402 	add.w	r4, r1, r2
 8004264:	d902      	bls.n	800426c <memmove+0x10>
 8004266:	4284      	cmp	r4, r0
 8004268:	4623      	mov	r3, r4
 800426a:	d807      	bhi.n	800427c <memmove+0x20>
 800426c:	1e43      	subs	r3, r0, #1
 800426e:	42a1      	cmp	r1, r4
 8004270:	d008      	beq.n	8004284 <memmove+0x28>
 8004272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800427a:	e7f8      	b.n	800426e <memmove+0x12>
 800427c:	4601      	mov	r1, r0
 800427e:	4402      	add	r2, r0
 8004280:	428a      	cmp	r2, r1
 8004282:	d100      	bne.n	8004286 <memmove+0x2a>
 8004284:	bd10      	pop	{r4, pc}
 8004286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800428a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800428e:	e7f7      	b.n	8004280 <memmove+0x24>

08004290 <_realloc_r>:
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004292:	4607      	mov	r7, r0
 8004294:	4614      	mov	r4, r2
 8004296:	460e      	mov	r6, r1
 8004298:	b921      	cbnz	r1, 80042a4 <_realloc_r+0x14>
 800429a:	4611      	mov	r1, r2
 800429c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80042a0:	f7ff bc36 	b.w	8003b10 <_malloc_r>
 80042a4:	b922      	cbnz	r2, 80042b0 <_realloc_r+0x20>
 80042a6:	f7ff fbe7 	bl	8003a78 <_free_r>
 80042aa:	4625      	mov	r5, r4
 80042ac:	4628      	mov	r0, r5
 80042ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b0:	f000 f814 	bl	80042dc <_malloc_usable_size_r>
 80042b4:	42a0      	cmp	r0, r4
 80042b6:	d20f      	bcs.n	80042d8 <_realloc_r+0x48>
 80042b8:	4621      	mov	r1, r4
 80042ba:	4638      	mov	r0, r7
 80042bc:	f7ff fc28 	bl	8003b10 <_malloc_r>
 80042c0:	4605      	mov	r5, r0
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d0f2      	beq.n	80042ac <_realloc_r+0x1c>
 80042c6:	4631      	mov	r1, r6
 80042c8:	4622      	mov	r2, r4
 80042ca:	f7ff ffb9 	bl	8004240 <memcpy>
 80042ce:	4631      	mov	r1, r6
 80042d0:	4638      	mov	r0, r7
 80042d2:	f7ff fbd1 	bl	8003a78 <_free_r>
 80042d6:	e7e9      	b.n	80042ac <_realloc_r+0x1c>
 80042d8:	4635      	mov	r5, r6
 80042da:	e7e7      	b.n	80042ac <_realloc_r+0x1c>

080042dc <_malloc_usable_size_r>:
 80042dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042e0:	1f18      	subs	r0, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	bfbc      	itt	lt
 80042e6:	580b      	ldrlt	r3, [r1, r0]
 80042e8:	18c0      	addlt	r0, r0, r3
 80042ea:	4770      	bx	lr

080042ec <_init>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	bf00      	nop
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr

080042f8 <_fini>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	bf00      	nop
 80042fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fe:	bc08      	pop	{r3}
 8004300:	469e      	mov	lr, r3
 8004302:	4770      	bx	lr
