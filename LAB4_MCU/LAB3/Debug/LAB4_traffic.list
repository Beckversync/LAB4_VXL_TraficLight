
LAB4_traffic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003b34  08003b34  00013b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b60  08003b60  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b60  08003b60  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b60  08003b60  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b60  08003b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  2000001c  08003b84  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  08003b84  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd54  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002296  00000000  00000000  0002dd99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00030030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00030d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172f0  00000000  00000000  00031960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f450  00000000  00000000  00048c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084c5f  00000000  00000000  000580a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dccff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d0  00000000  00000000  000dcd54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b1c 	.word	0x08003b1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08003b1c 	.word	0x08003b1c

0800014c <display7SEG>:

#include "Output.h"

int buffer7SEG[4];

void display7SEG(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7SEG+0x310>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
	switch(num){
		case 0:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48b5      	ldr	r0, [pc, #724]	; (8000468 <display7SEG+0x31c>)
 8000192:	f001 ff4a 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48b3      	ldr	r0, [pc, #716]	; (8000468 <display7SEG+0x31c>)
 800019c:	f001 ff45 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48b0      	ldr	r0, [pc, #704]	; (8000468 <display7SEG+0x31c>)
 80001a6:	f001 ff40 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48ae      	ldr	r0, [pc, #696]	; (8000468 <display7SEG+0x31c>)
 80001b0:	f001 ff3b 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48ab      	ldr	r0, [pc, #684]	; (8000468 <display7SEG+0x31c>)
 80001ba:	f001 ff36 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48a9      	ldr	r0, [pc, #676]	; (8000468 <display7SEG+0x31c>)
 80001c4:	f001 ff31 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	; 0x40
 80001cc:	48a6      	ldr	r0, [pc, #664]	; (8000468 <display7SEG+0x31c>)
 80001ce:	f001 ff2c 	bl	800202a <HAL_GPIO_WritePin>
			break;
 80001d2:	e144      	b.n	800045e <display7SEG+0x312>
		case 1:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48a3      	ldr	r0, [pc, #652]	; (8000468 <display7SEG+0x31c>)
 80001da:	f001 ff26 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80001de:	2200      	movs	r2, #0
 80001e0:	2102      	movs	r1, #2
 80001e2:	48a1      	ldr	r0, [pc, #644]	; (8000468 <display7SEG+0x31c>)
 80001e4:	f001 ff21 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2104      	movs	r1, #4
 80001ec:	489e      	ldr	r0, [pc, #632]	; (8000468 <display7SEG+0x31c>)
 80001ee:	f001 ff1c 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	489c      	ldr	r0, [pc, #624]	; (8000468 <display7SEG+0x31c>)
 80001f8:	f001 ff17 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	4899      	ldr	r0, [pc, #612]	; (8000468 <display7SEG+0x31c>)
 8000202:	f001 ff12 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	4897      	ldr	r0, [pc, #604]	; (8000468 <display7SEG+0x31c>)
 800020c:	f001 ff0d 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	; 0x40
 8000214:	4894      	ldr	r0, [pc, #592]	; (8000468 <display7SEG+0x31c>)
 8000216:	f001 ff08 	bl	800202a <HAL_GPIO_WritePin>
			break;
 800021a:	e120      	b.n	800045e <display7SEG+0x312>
		case 2:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	4891      	ldr	r0, [pc, #580]	; (8000468 <display7SEG+0x31c>)
 8000222:	f001 ff02 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	488f      	ldr	r0, [pc, #572]	; (8000468 <display7SEG+0x31c>)
 800022c:	f001 fefd 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	488c      	ldr	r0, [pc, #560]	; (8000468 <display7SEG+0x31c>)
 8000236:	f001 fef8 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	488a      	ldr	r0, [pc, #552]	; (8000468 <display7SEG+0x31c>)
 8000240:	f001 fef3 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4887      	ldr	r0, [pc, #540]	; (8000468 <display7SEG+0x31c>)
 800024a:	f001 feee 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4885      	ldr	r0, [pc, #532]	; (8000468 <display7SEG+0x31c>)
 8000254:	f001 fee9 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	4882      	ldr	r0, [pc, #520]	; (8000468 <display7SEG+0x31c>)
 800025e:	f001 fee4 	bl	800202a <HAL_GPIO_WritePin>
			break;
 8000262:	e0fc      	b.n	800045e <display7SEG+0x312>
		case 3:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	487f      	ldr	r0, [pc, #508]	; (8000468 <display7SEG+0x31c>)
 800026a:	f001 fede 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	487d      	ldr	r0, [pc, #500]	; (8000468 <display7SEG+0x31c>)
 8000274:	f001 fed9 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	487a      	ldr	r0, [pc, #488]	; (8000468 <display7SEG+0x31c>)
 800027e:	f001 fed4 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4878      	ldr	r0, [pc, #480]	; (8000468 <display7SEG+0x31c>)
 8000288:	f001 fecf 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4875      	ldr	r0, [pc, #468]	; (8000468 <display7SEG+0x31c>)
 8000292:	f001 feca 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4873      	ldr	r0, [pc, #460]	; (8000468 <display7SEG+0x31c>)
 800029c:	f001 fec5 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	4870      	ldr	r0, [pc, #448]	; (8000468 <display7SEG+0x31c>)
 80002a6:	f001 fec0 	bl	800202a <HAL_GPIO_WritePin>
			break;
 80002aa:	e0d8      	b.n	800045e <display7SEG+0x312>
		case 4:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	486d      	ldr	r0, [pc, #436]	; (8000468 <display7SEG+0x31c>)
 80002b2:	f001 feba 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	486b      	ldr	r0, [pc, #428]	; (8000468 <display7SEG+0x31c>)
 80002bc:	f001 feb5 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4868      	ldr	r0, [pc, #416]	; (8000468 <display7SEG+0x31c>)
 80002c6:	f001 feb0 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4866      	ldr	r0, [pc, #408]	; (8000468 <display7SEG+0x31c>)
 80002d0:	f001 feab 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4863      	ldr	r0, [pc, #396]	; (8000468 <display7SEG+0x31c>)
 80002da:	f001 fea6 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4861      	ldr	r0, [pc, #388]	; (8000468 <display7SEG+0x31c>)
 80002e4:	f001 fea1 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	485e      	ldr	r0, [pc, #376]	; (8000468 <display7SEG+0x31c>)
 80002ee:	f001 fe9c 	bl	800202a <HAL_GPIO_WritePin>
			break;
 80002f2:	e0b4      	b.n	800045e <display7SEG+0x312>
		case 5:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	485b      	ldr	r0, [pc, #364]	; (8000468 <display7SEG+0x31c>)
 80002fa:	f001 fe96 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4859      	ldr	r0, [pc, #356]	; (8000468 <display7SEG+0x31c>)
 8000304:	f001 fe91 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4856      	ldr	r0, [pc, #344]	; (8000468 <display7SEG+0x31c>)
 800030e:	f001 fe8c 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4854      	ldr	r0, [pc, #336]	; (8000468 <display7SEG+0x31c>)
 8000318:	f001 fe87 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4851      	ldr	r0, [pc, #324]	; (8000468 <display7SEG+0x31c>)
 8000322:	f001 fe82 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	484f      	ldr	r0, [pc, #316]	; (8000468 <display7SEG+0x31c>)
 800032c:	f001 fe7d 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	484c      	ldr	r0, [pc, #304]	; (8000468 <display7SEG+0x31c>)
 8000336:	f001 fe78 	bl	800202a <HAL_GPIO_WritePin>
			break;
 800033a:	e090      	b.n	800045e <display7SEG+0x312>
		case 6:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	4849      	ldr	r0, [pc, #292]	; (8000468 <display7SEG+0x31c>)
 8000342:	f001 fe72 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4847      	ldr	r0, [pc, #284]	; (8000468 <display7SEG+0x31c>)
 800034c:	f001 fe6d 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4844      	ldr	r0, [pc, #272]	; (8000468 <display7SEG+0x31c>)
 8000356:	f001 fe68 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4842      	ldr	r0, [pc, #264]	; (8000468 <display7SEG+0x31c>)
 8000360:	f001 fe63 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	483f      	ldr	r0, [pc, #252]	; (8000468 <display7SEG+0x31c>)
 800036a:	f001 fe5e 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	483d      	ldr	r0, [pc, #244]	; (8000468 <display7SEG+0x31c>)
 8000374:	f001 fe59 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	483a      	ldr	r0, [pc, #232]	; (8000468 <display7SEG+0x31c>)
 800037e:	f001 fe54 	bl	800202a <HAL_GPIO_WritePin>
			break;
 8000382:	e06c      	b.n	800045e <display7SEG+0x312>
		case 7:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4837      	ldr	r0, [pc, #220]	; (8000468 <display7SEG+0x31c>)
 800038a:	f001 fe4e 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4835      	ldr	r0, [pc, #212]	; (8000468 <display7SEG+0x31c>)
 8000394:	f001 fe49 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4832      	ldr	r0, [pc, #200]	; (8000468 <display7SEG+0x31c>)
 800039e:	f001 fe44 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	4830      	ldr	r0, [pc, #192]	; (8000468 <display7SEG+0x31c>)
 80003a8:	f001 fe3f 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	482d      	ldr	r0, [pc, #180]	; (8000468 <display7SEG+0x31c>)
 80003b2:	f001 fe3a 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	482b      	ldr	r0, [pc, #172]	; (8000468 <display7SEG+0x31c>)
 80003bc:	f001 fe35 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	4828      	ldr	r0, [pc, #160]	; (8000468 <display7SEG+0x31c>)
 80003c6:	f001 fe30 	bl	800202a <HAL_GPIO_WritePin>
			break;
 80003ca:	e048      	b.n	800045e <display7SEG+0x312>
		case 8:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	4825      	ldr	r0, [pc, #148]	; (8000468 <display7SEG+0x31c>)
 80003d2:	f001 fe2a 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4823      	ldr	r0, [pc, #140]	; (8000468 <display7SEG+0x31c>)
 80003dc:	f001 fe25 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	4820      	ldr	r0, [pc, #128]	; (8000468 <display7SEG+0x31c>)
 80003e6:	f001 fe20 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	481e      	ldr	r0, [pc, #120]	; (8000468 <display7SEG+0x31c>)
 80003f0:	f001 fe1b 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	481b      	ldr	r0, [pc, #108]	; (8000468 <display7SEG+0x31c>)
 80003fa:	f001 fe16 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4819      	ldr	r0, [pc, #100]	; (8000468 <display7SEG+0x31c>)
 8000404:	f001 fe11 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	4816      	ldr	r0, [pc, #88]	; (8000468 <display7SEG+0x31c>)
 800040e:	f001 fe0c 	bl	800202a <HAL_GPIO_WritePin>
			break;
 8000412:	e024      	b.n	800045e <display7SEG+0x312>
		case 9:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4813      	ldr	r0, [pc, #76]	; (8000468 <display7SEG+0x31c>)
 800041a:	f001 fe06 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4811      	ldr	r0, [pc, #68]	; (8000468 <display7SEG+0x31c>)
 8000424:	f001 fe01 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	480e      	ldr	r0, [pc, #56]	; (8000468 <display7SEG+0x31c>)
 800042e:	f001 fdfc 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	480c      	ldr	r0, [pc, #48]	; (8000468 <display7SEG+0x31c>)
 8000438:	f001 fdf7 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	4809      	ldr	r0, [pc, #36]	; (8000468 <display7SEG+0x31c>)
 8000442:	f001 fdf2 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4807      	ldr	r0, [pc, #28]	; (8000468 <display7SEG+0x31c>)
 800044c:	f001 fded 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <display7SEG+0x31c>)
 8000456:	f001 fde8 	bl	800202a <HAL_GPIO_WritePin>
			break;
 800045a:	e000      	b.n	800045e <display7SEG+0x312>
		default:
			break;
 800045c:	bf00      	nop
	}
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40010c00 	.word	0x40010c00

0800046c <Updatebuffer>:

void Updatebuffer(int time, int light){
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
	if(light == 1){
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	2b01      	cmp	r3, #1
 800047a:	d117      	bne.n	80004ac <Updatebuffer+0x40>
		buffer7SEG[0] = time / 10;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a19      	ldr	r2, [pc, #100]	; (80004e4 <Updatebuffer+0x78>)
 8000480:	fb82 1203 	smull	r1, r2, r2, r3
 8000484:	1092      	asrs	r2, r2, #2
 8000486:	17db      	asrs	r3, r3, #31
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	4a17      	ldr	r2, [pc, #92]	; (80004e8 <Updatebuffer+0x7c>)
 800048c:	6013      	str	r3, [r2, #0]
		buffer7SEG[1] = time % 10;
 800048e:	6879      	ldr	r1, [r7, #4]
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <Updatebuffer+0x78>)
 8000492:	fb83 2301 	smull	r2, r3, r3, r1
 8000496:	109a      	asrs	r2, r3, #2
 8000498:	17cb      	asrs	r3, r1, #31
 800049a:	1ad2      	subs	r2, r2, r3
 800049c:	4613      	mov	r3, r2
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	4413      	add	r3, r2
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	1aca      	subs	r2, r1, r3
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <Updatebuffer+0x7c>)
 80004a8:	605a      	str	r2, [r3, #4]
	}
	else{
		buffer7SEG[2] = time / 10;
		buffer7SEG[3] = time % 10;
	}
}
 80004aa:	e016      	b.n	80004da <Updatebuffer+0x6e>
		buffer7SEG[2] = time / 10;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <Updatebuffer+0x78>)
 80004b0:	fb82 1203 	smull	r1, r2, r2, r3
 80004b4:	1092      	asrs	r2, r2, #2
 80004b6:	17db      	asrs	r3, r3, #31
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <Updatebuffer+0x7c>)
 80004bc:	6093      	str	r3, [r2, #8]
		buffer7SEG[3] = time % 10;
 80004be:	6879      	ldr	r1, [r7, #4]
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <Updatebuffer+0x78>)
 80004c2:	fb83 2301 	smull	r2, r3, r3, r1
 80004c6:	109a      	asrs	r2, r3, #2
 80004c8:	17cb      	asrs	r3, r1, #31
 80004ca:	1ad2      	subs	r2, r2, r3
 80004cc:	4613      	mov	r3, r2
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	4413      	add	r3, r2
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	1aca      	subs	r2, r1, r3
 80004d6:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <Updatebuffer+0x7c>)
 80004d8:	60da      	str	r2, [r3, #12]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	66666667 	.word	0x66666667
 80004e8:	2000007c 	.word	0x2000007c

080004ec <Update7SEG>:

void Update7SEG(int index){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b03      	cmp	r3, #3
 80004f8:	f200 8084 	bhi.w	8000604 <Update7SEG+0x118>
 80004fc:	a201      	add	r2, pc, #4	; (adr r2, 8000504 <Update7SEG+0x18>)
 80004fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000502:	bf00      	nop
 8000504:	08000515 	.word	0x08000515
 8000508:	08000551 	.word	0x08000551
 800050c:	0800058d 	.word	0x0800058d
 8000510:	080005c9 	.word	0x080005c9
	switch(index){
		case 0:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800051a:	483d      	ldr	r0, [pc, #244]	; (8000610 <Update7SEG+0x124>)
 800051c:	f001 fd85 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000526:	483a      	ldr	r0, [pc, #232]	; (8000610 <Update7SEG+0x124>)
 8000528:	f001 fd7f 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000532:	4837      	ldr	r0, [pc, #220]	; (8000610 <Update7SEG+0x124>)
 8000534:	f001 fd79 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053e:	4834      	ldr	r0, [pc, #208]	; (8000610 <Update7SEG+0x124>)
 8000540:	f001 fd73 	bl	800202a <HAL_GPIO_WritePin>
			display7SEG(buffer7SEG[0]);
 8000544:	4b33      	ldr	r3, [pc, #204]	; (8000614 <Update7SEG+0x128>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fdff 	bl	800014c <display7SEG>
			break;
 800054e:	e05a      	b.n	8000606 <Update7SEG+0x11a>
		case 1:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000556:	482e      	ldr	r0, [pc, #184]	; (8000610 <Update7SEG+0x124>)
 8000558:	f001 fd67 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000562:	482b      	ldr	r0, [pc, #172]	; (8000610 <Update7SEG+0x124>)
 8000564:	f001 fd61 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000568:	2201      	movs	r2, #1
 800056a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056e:	4828      	ldr	r0, [pc, #160]	; (8000610 <Update7SEG+0x124>)
 8000570:	f001 fd5b 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000574:	2201      	movs	r2, #1
 8000576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057a:	4825      	ldr	r0, [pc, #148]	; (8000610 <Update7SEG+0x124>)
 800057c:	f001 fd55 	bl	800202a <HAL_GPIO_WritePin>
			display7SEG(buffer7SEG[1]);
 8000580:	4b24      	ldr	r3, [pc, #144]	; (8000614 <Update7SEG+0x128>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fde1 	bl	800014c <display7SEG>
			break;
 800058a:	e03c      	b.n	8000606 <Update7SEG+0x11a>
		case 2:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000592:	481f      	ldr	r0, [pc, #124]	; (8000610 <Update7SEG+0x124>)
 8000594:	f001 fd49 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800059e:	481c      	ldr	r0, [pc, #112]	; (8000610 <Update7SEG+0x124>)
 80005a0:	f001 fd43 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005aa:	4819      	ldr	r0, [pc, #100]	; (8000610 <Update7SEG+0x124>)
 80005ac:	f001 fd3d 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b6:	4816      	ldr	r0, [pc, #88]	; (8000610 <Update7SEG+0x124>)
 80005b8:	f001 fd37 	bl	800202a <HAL_GPIO_WritePin>
			display7SEG(buffer7SEG[2]);
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <Update7SEG+0x128>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fdc3 	bl	800014c <display7SEG>
			break;
 80005c6:	e01e      	b.n	8000606 <Update7SEG+0x11a>
		case 3:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <Update7SEG+0x124>)
 80005d0:	f001 fd2b 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <Update7SEG+0x124>)
 80005dc:	f001 fd25 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e6:	480a      	ldr	r0, [pc, #40]	; (8000610 <Update7SEG+0x124>)
 80005e8:	f001 fd1f 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <Update7SEG+0x124>)
 80005f4:	f001 fd19 	bl	800202a <HAL_GPIO_WritePin>
			display7SEG(buffer7SEG[3]);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <Update7SEG+0x128>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fda5 	bl	800014c <display7SEG>
			break;
 8000602:	e000      	b.n	8000606 <Update7SEG+0x11a>
		default:
			break;
 8000604:	bf00      	nop
	}
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40010800 	.word	0x40010800
 8000614:	2000007c 	.word	0x2000007c

08000618 <setTimer>:
#include "software_timer.h"

int count[100];
int flag[100];

void setTimer(int duration, int index){
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	flag[index] = 0;
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <setTimer+0x28>)
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	2100      	movs	r1, #0
 8000628:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	count[index] = duration;
 800062c:	4905      	ldr	r1, [pc, #20]	; (8000644 <setTimer+0x2c>)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	2000008c 	.word	0x2000008c
 8000644:	2000021c 	.word	0x2000021c

08000648 <timer_run>:

void timer_run(int index){
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	if(count[index] > 0){
 8000650:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <timer_run+0x48>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000658:	2b00      	cmp	r3, #0
 800065a:	dd13      	ble.n	8000684 <timer_run+0x3c>
		count[index]--;
 800065c:	4a0c      	ldr	r2, [pc, #48]	; (8000690 <timer_run+0x48>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000664:	1e5a      	subs	r2, r3, #1
 8000666:	490a      	ldr	r1, [pc, #40]	; (8000690 <timer_run+0x48>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(count[index] <= 0){
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <timer_run+0x48>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000676:	2b00      	cmp	r3, #0
 8000678:	dc04      	bgt.n	8000684 <timer_run+0x3c>
			flag[index] = 1;
 800067a:	4a06      	ldr	r2, [pc, #24]	; (8000694 <timer_run+0x4c>)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2101      	movs	r1, #1
 8000680:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	2000021c 	.word	0x2000021c
 8000694:	2000008c 	.word	0x2000008c

08000698 <SystemFSM>:
#include "System_FSM.h"

int default_redlight;
int default_yellowlight;
int default_greenlight;
void SystemFSM(){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	switch(status){
 800069c:	4b98      	ldr	r3, [pc, #608]	; (8000900 <SystemFSM+0x268>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b04      	cmp	r3, #4
 80006a2:	f200 82ee 	bhi.w	8000c82 <SystemFSM+0x5ea>
 80006a6:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <SystemFSM+0x14>)
 80006a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ac:	080006c1 	.word	0x080006c1
 80006b0:	0800073d 	.word	0x0800073d
 80006b4:	08000785 	.word	0x08000785
 80006b8:	08000945 	.word	0x08000945
 80006bc:	08000afd 	.word	0x08000afd
		case INIT:
			if(is_button_pressed(0)){
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 fd09 	bl	80010d8 <is_button_pressed>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <SystemFSM+0x3a>
				button1_press = 1;
 80006cc:	4b8d      	ldr	r3, [pc, #564]	; (8000904 <SystemFSM+0x26c>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(0) && button1_press){
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 fd00 	bl	80010d8 <is_button_pressed>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f040 82d3 	bne.w	8000c86 <SystemFSM+0x5ee>
 80006e0:	4b88      	ldr	r3, [pc, #544]	; (8000904 <SystemFSM+0x26c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	f000 82ce 	beq.w	8000c86 <SystemFSM+0x5ee>
				status = MODE1_NORMAL;
 80006ea:	4b85      	ldr	r3, [pc, #532]	; (8000900 <SystemFSM+0x268>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	601a      	str	r2, [r3, #0]
				setTimer(100, 0);
 80006f0:	2100      	movs	r1, #0
 80006f2:	2064      	movs	r0, #100	; 0x64
 80006f4:	f7ff ff90 	bl	8000618 <setTimer>
				setTimer(100, 1);
 80006f8:	2101      	movs	r1, #1
 80006fa:	2064      	movs	r0, #100	; 0x64
 80006fc:	f7ff ff8c 	bl	8000618 <setTimer>
				// set default status for traffic light fsm
				TL1 = RED;
 8000700:	4b81      	ldr	r3, [pc, #516]	; (8000908 <SystemFSM+0x270>)
 8000702:	2202      	movs	r2, #2
 8000704:	601a      	str	r2, [r3, #0]
				TL2 = GREEN;
 8000706:	4b81      	ldr	r3, [pc, #516]	; (800090c <SystemFSM+0x274>)
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]

				// set default value time for traffic light fsm
				default_redlight = redlight;
 800070c:	4b80      	ldr	r3, [pc, #512]	; (8000910 <SystemFSM+0x278>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a80      	ldr	r2, [pc, #512]	; (8000914 <SystemFSM+0x27c>)
 8000712:	6013      	str	r3, [r2, #0]
				default_yellowlight = yellowlight;
 8000714:	4b80      	ldr	r3, [pc, #512]	; (8000918 <SystemFSM+0x280>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a80      	ldr	r2, [pc, #512]	; (800091c <SystemFSM+0x284>)
 800071a:	6013      	str	r3, [r2, #0]
				default_greenlight = greenlight;
 800071c:	4b80      	ldr	r3, [pc, #512]	; (8000920 <SystemFSM+0x288>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a80      	ldr	r2, [pc, #512]	; (8000924 <SystemFSM+0x28c>)
 8000722:	6013      	str	r3, [r2, #0]

				Red1 = default_redlight;
 8000724:	4b7b      	ldr	r3, [pc, #492]	; (8000914 <SystemFSM+0x27c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a7f      	ldr	r2, [pc, #508]	; (8000928 <SystemFSM+0x290>)
 800072a:	6013      	str	r3, [r2, #0]
				Green2 = default_greenlight;
 800072c:	4b7d      	ldr	r3, [pc, #500]	; (8000924 <SystemFSM+0x28c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a7e      	ldr	r2, [pc, #504]	; (800092c <SystemFSM+0x294>)
 8000732:	6013      	str	r3, [r2, #0]
				button1_press=0;
 8000734:	4b73      	ldr	r3, [pc, #460]	; (8000904 <SystemFSM+0x26c>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
			}
			break;
 800073a:	e2a4      	b.n	8000c86 <SystemFSM+0x5ee>
		case MODE1_NORMAL:
			TrafficLightFSM1();
 800073c:	f000 fac8 	bl	8000cd0 <TrafficLightFSM1>
			TrafficLightFSM2();
 8000740:	f000 fb7a 	bl	8000e38 <TrafficLightFSM2>
			// press and release
			if(is_button_pressed(0)){
 8000744:	2000      	movs	r0, #0
 8000746:	f000 fcc7 	bl	80010d8 <is_button_pressed>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d002      	beq.n	8000756 <SystemFSM+0xbe>
				button1_press = 1;
 8000750:	4b6c      	ldr	r3, [pc, #432]	; (8000904 <SystemFSM+0x26c>)
 8000752:	2201      	movs	r2, #1
 8000754:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(0) && button1_press){
 8000756:	2000      	movs	r0, #0
 8000758:	f000 fcbe 	bl	80010d8 <is_button_pressed>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	f040 8293 	bne.w	8000c8a <SystemFSM+0x5f2>
 8000764:	4b67      	ldr	r3, [pc, #412]	; (8000904 <SystemFSM+0x26c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	f000 828e 	beq.w	8000c8a <SystemFSM+0x5f2>
				status = MODE2_MANRED;
 800076e:	4b64      	ldr	r3, [pc, #400]	; (8000900 <SystemFSM+0x268>)
 8000770:	2202      	movs	r2, #2
 8000772:	601a      	str	r2, [r3, #0]
				setTimer(50, 3);
 8000774:	2103      	movs	r1, #3
 8000776:	2032      	movs	r0, #50	; 0x32
 8000778:	f7ff ff4e 	bl	8000618 <setTimer>
				button1_press = 0;
 800077c:	4b61      	ldr	r3, [pc, #388]	; (8000904 <SystemFSM+0x26c>)
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
			}
			break;
 8000782:	e282      	b.n	8000c8a <SystemFSM+0x5f2>
		case MODE2_MANRED:
			// red led blinking 2HZ
			if(flag[3] == 1){
 8000784:	4b6a      	ldr	r3, [pc, #424]	; (8000930 <SystemFSM+0x298>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d10b      	bne.n	80007a4 <SystemFSM+0x10c>
				setTimer(50, 3);
 800078c:	2103      	movs	r1, #3
 800078e:	2032      	movs	r0, #50	; 0x32
 8000790:	f7ff ff42 	bl	8000618 <setTimer>
				HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 8000794:	2110      	movs	r1, #16
 8000796:	4867      	ldr	r0, [pc, #412]	; (8000934 <SystemFSM+0x29c>)
 8000798:	f001 fc5f 	bl	800205a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	4865      	ldr	r0, [pc, #404]	; (8000934 <SystemFSM+0x29c>)
 80007a0:	f001 fc5b 	bl	800205a <HAL_GPIO_TogglePin>
			}
			// 2 7SEG display value
			Updatebuffer(redlight, 1);
 80007a4:	4b5a      	ldr	r3, [pc, #360]	; (8000910 <SystemFSM+0x278>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2101      	movs	r1, #1
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe5e 	bl	800046c <Updatebuffer>
			// 2 7SEG display mode
			Updatebuffer(MODE2_MANRED, 2);
 80007b0:	2102      	movs	r1, #2
 80007b2:	2002      	movs	r0, #2
 80007b4:	f7ff fe5a 	bl	800046c <Updatebuffer>
			// if button2 is pressed and released after that
			// increasing value by 1
			if(is_button_pressed(1)){
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 fc8d 	bl	80010d8 <is_button_pressed>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d002      	beq.n	80007ca <SystemFSM+0x132>
				button2_press = 1;
 80007c4:	4b5c      	ldr	r3, [pc, #368]	; (8000938 <SystemFSM+0x2a0>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(1) && button2_press){
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 fc84 	bl	80010d8 <is_button_pressed>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d110      	bne.n	80007f8 <SystemFSM+0x160>
 80007d6:	4b58      	ldr	r3, [pc, #352]	; (8000938 <SystemFSM+0x2a0>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00c      	beq.n	80007f8 <SystemFSM+0x160>
				redlight++;
 80007de:	4b4c      	ldr	r3, [pc, #304]	; (8000910 <SystemFSM+0x278>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	4a4a      	ldr	r2, [pc, #296]	; (8000910 <SystemFSM+0x278>)
 80007e6:	6013      	str	r3, [r2, #0]
				greenlight++;
 80007e8:	4b4d      	ldr	r3, [pc, #308]	; (8000920 <SystemFSM+0x288>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	4a4c      	ldr	r2, [pc, #304]	; (8000920 <SystemFSM+0x288>)
 80007f0:	6013      	str	r3, [r2, #0]
				button2_press = 0;
 80007f2:	4b51      	ldr	r3, [pc, #324]	; (8000938 <SystemFSM+0x2a0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
			}
			// if button2 is pressed long 1s
			if(is_button_pressed_1s(1)){
 80007f8:	2001      	movs	r0, #1
 80007fa:	f000 fc87 	bl	800110c <is_button_pressed_1s>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d01c      	beq.n	800083e <SystemFSM+0x1a6>
				if(button2_first_press1s){
 8000804:	4b4d      	ldr	r3, [pc, #308]	; (800093c <SystemFSM+0x2a4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d006      	beq.n	800081a <SystemFSM+0x182>
					setTimer(50, 4);
 800080c:	2104      	movs	r1, #4
 800080e:	2032      	movs	r0, #50	; 0x32
 8000810:	f7ff ff02 	bl	8000618 <setTimer>
					button2_first_press1s = 0;
 8000814:	4b49      	ldr	r3, [pc, #292]	; (800093c <SystemFSM+0x2a4>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
				}
				if(flag[4] == 1){
 800081a:	4b45      	ldr	r3, [pc, #276]	; (8000930 <SystemFSM+0x298>)
 800081c:	691b      	ldr	r3, [r3, #16]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d10d      	bne.n	800083e <SystemFSM+0x1a6>
					setTimer(50, 4);
 8000822:	2104      	movs	r1, #4
 8000824:	2032      	movs	r0, #50	; 0x32
 8000826:	f7ff fef7 	bl	8000618 <setTimer>
					redlight++;
 800082a:	4b39      	ldr	r3, [pc, #228]	; (8000910 <SystemFSM+0x278>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	4a37      	ldr	r2, [pc, #220]	; (8000910 <SystemFSM+0x278>)
 8000832:	6013      	str	r3, [r2, #0]
					greenlight++;
 8000834:	4b3a      	ldr	r3, [pc, #232]	; (8000920 <SystemFSM+0x288>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	3301      	adds	r3, #1
 800083a:	4a39      	ldr	r2, [pc, #228]	; (8000920 <SystemFSM+0x288>)
 800083c:	6013      	str	r3, [r2, #0]
				}
			}
			// if button3 is pressed, turn back to mode 1 normal
			if(is_button_pressed(2)){
 800083e:	2002      	movs	r0, #2
 8000840:	f000 fc4a 	bl	80010d8 <is_button_pressed>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d002      	beq.n	8000850 <SystemFSM+0x1b8>
				button3_press = 1;
 800084a:	4b3d      	ldr	r3, [pc, #244]	; (8000940 <SystemFSM+0x2a8>)
 800084c:	2201      	movs	r2, #1
 800084e:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(2) && button3_press){
 8000850:	2002      	movs	r0, #2
 8000852:	f000 fc41 	bl	80010d8 <is_button_pressed>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d127      	bne.n	80008ac <SystemFSM+0x214>
 800085c:	4b38      	ldr	r3, [pc, #224]	; (8000940 <SystemFSM+0x2a8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d023      	beq.n	80008ac <SystemFSM+0x214>
				status = MODE1_NORMAL;
 8000864:	4b26      	ldr	r3, [pc, #152]	; (8000900 <SystemFSM+0x268>)
 8000866:	2201      	movs	r2, #1
 8000868:	601a      	str	r2, [r3, #0]
				// set timer for traffic light
				setTimer(100, 0);
 800086a:	2100      	movs	r1, #0
 800086c:	2064      	movs	r0, #100	; 0x64
 800086e:	f7ff fed3 	bl	8000618 <setTimer>
				setTimer(100, 1);
 8000872:	2101      	movs	r1, #1
 8000874:	2064      	movs	r0, #100	; 0x64
 8000876:	f7ff fecf 	bl	8000618 <setTimer>

				redlight = default_redlight;
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <SystemFSM+0x27c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a24      	ldr	r2, [pc, #144]	; (8000910 <SystemFSM+0x278>)
 8000880:	6013      	str	r3, [r2, #0]
				yellowlight = default_yellowlight;
 8000882:	4b26      	ldr	r3, [pc, #152]	; (800091c <SystemFSM+0x284>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a24      	ldr	r2, [pc, #144]	; (8000918 <SystemFSM+0x280>)
 8000888:	6013      	str	r3, [r2, #0]
				greenlight = default_greenlight;
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <SystemFSM+0x28c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a24      	ldr	r2, [pc, #144]	; (8000920 <SystemFSM+0x288>)
 8000890:	6013      	str	r3, [r2, #0]

				// turn off traffic light
				HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000892:	2201      	movs	r2, #1
 8000894:	2110      	movs	r1, #16
 8000896:	4827      	ldr	r0, [pc, #156]	; (8000934 <SystemFSM+0x29c>)
 8000898:	f001 fbc7 	bl	800202a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2180      	movs	r1, #128	; 0x80
 80008a0:	4824      	ldr	r0, [pc, #144]	; (8000934 <SystemFSM+0x29c>)
 80008a2:	f001 fbc2 	bl	800202a <HAL_GPIO_WritePin>
				button3_press = 0;
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <SystemFSM+0x2a8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
			}
			// if button1 is pressed, go to next status
			if(is_button_pressed(0)){
 80008ac:	2000      	movs	r0, #0
 80008ae:	f000 fc13 	bl	80010d8 <is_button_pressed>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d002      	beq.n	80008be <SystemFSM+0x226>
				button1_press = 1;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <SystemFSM+0x26c>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(0) && button1_press){
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 fc0a 	bl	80010d8 <is_button_pressed>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 81e1 	bne.w	8000c8e <SystemFSM+0x5f6>
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <SystemFSM+0x26c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	f000 81dc 	beq.w	8000c8e <SystemFSM+0x5f6>
				status = MODE3_MANYELLOW;
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <SystemFSM+0x268>)
 80008d8:	2203      	movs	r2, #3
 80008da:	601a      	str	r2, [r3, #0]
				// set timer for blinking led
				setTimer(50, 3);
 80008dc:	2103      	movs	r1, #3
 80008de:	2032      	movs	r0, #50	; 0x32
 80008e0:	f7ff fe9a 	bl	8000618 <setTimer>
				// turn off traffic light
				HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2110      	movs	r1, #16
 80008e8:	4812      	ldr	r0, [pc, #72]	; (8000934 <SystemFSM+0x29c>)
 80008ea:	f001 fb9e 	bl	800202a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	4810      	ldr	r0, [pc, #64]	; (8000934 <SystemFSM+0x29c>)
 80008f4:	f001 fb99 	bl	800202a <HAL_GPIO_WritePin>
				button1_press = 0;
 80008f8:	4b02      	ldr	r3, [pc, #8]	; (8000904 <SystemFSM+0x26c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
			}
			break;
 80008fe:	e1c6      	b.n	8000c8e <SystemFSM+0x5f6>
 8000900:	20000054 	.word	0x20000054
 8000904:	20000048 	.word	0x20000048
 8000908:	200003b8 	.word	0x200003b8
 800090c:	200003d4 	.word	0x200003d4
 8000910:	20000000 	.word	0x20000000
 8000914:	200003ac 	.word	0x200003ac
 8000918:	20000008 	.word	0x20000008
 800091c:	200003b4 	.word	0x200003b4
 8000920:	20000004 	.word	0x20000004
 8000924:	200003b0 	.word	0x200003b0
 8000928:	200003d0 	.word	0x200003d0
 800092c:	200003c0 	.word	0x200003c0
 8000930:	2000008c 	.word	0x2000008c
 8000934:	40010800 	.word	0x40010800
 8000938:	2000004c 	.word	0x2000004c
 800093c:	2000000c 	.word	0x2000000c
 8000940:	20000050 	.word	0x20000050
		case MODE3_MANYELLOW:
			// red led blinking 2HZ
			if(flag[3] == 1){
 8000944:	4b60      	ldr	r3, [pc, #384]	; (8000ac8 <SystemFSM+0x430>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d10c      	bne.n	8000966 <SystemFSM+0x2ce>
				setTimer(50, 3);
 800094c:	2103      	movs	r1, #3
 800094e:	2032      	movs	r0, #50	; 0x32
 8000950:	f7ff fe62 	bl	8000618 <setTimer>
				HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 8000954:	2120      	movs	r1, #32
 8000956:	485d      	ldr	r0, [pc, #372]	; (8000acc <SystemFSM+0x434>)
 8000958:	f001 fb7f 	bl	800205a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 800095c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000960:	485a      	ldr	r0, [pc, #360]	; (8000acc <SystemFSM+0x434>)
 8000962:	f001 fb7a 	bl	800205a <HAL_GPIO_TogglePin>
			}
			// 2 7SEG display value
			Updatebuffer(yellowlight, 1);
 8000966:	4b5a      	ldr	r3, [pc, #360]	; (8000ad0 <SystemFSM+0x438>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2101      	movs	r1, #1
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fd7d 	bl	800046c <Updatebuffer>
			// 2 7SEG display mode
			Updatebuffer(MODE3_MANYELLOW, 2);
 8000972:	2102      	movs	r1, #2
 8000974:	2003      	movs	r0, #3
 8000976:	f7ff fd79 	bl	800046c <Updatebuffer>
			// if button2 is pressed and released after that
			// increasing value by 1
			if(is_button_pressed(1)){
 800097a:	2001      	movs	r0, #1
 800097c:	f000 fbac 	bl	80010d8 <is_button_pressed>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <SystemFSM+0x2f4>
				button2_press = 1;
 8000986:	4b53      	ldr	r3, [pc, #332]	; (8000ad4 <SystemFSM+0x43c>)
 8000988:	2201      	movs	r2, #1
 800098a:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(1) && button2_press){
 800098c:	2001      	movs	r0, #1
 800098e:	f000 fba3 	bl	80010d8 <is_button_pressed>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d110      	bne.n	80009ba <SystemFSM+0x322>
 8000998:	4b4e      	ldr	r3, [pc, #312]	; (8000ad4 <SystemFSM+0x43c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d00c      	beq.n	80009ba <SystemFSM+0x322>
				yellowlight++;
 80009a0:	4b4b      	ldr	r3, [pc, #300]	; (8000ad0 <SystemFSM+0x438>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	4a4a      	ldr	r2, [pc, #296]	; (8000ad0 <SystemFSM+0x438>)
 80009a8:	6013      	str	r3, [r2, #0]
				greenlight++;
 80009aa:	4b4b      	ldr	r3, [pc, #300]	; (8000ad8 <SystemFSM+0x440>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	4a49      	ldr	r2, [pc, #292]	; (8000ad8 <SystemFSM+0x440>)
 80009b2:	6013      	str	r3, [r2, #0]
				button2_press = 0;
 80009b4:	4b47      	ldr	r3, [pc, #284]	; (8000ad4 <SystemFSM+0x43c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
			}
			// if button2 is pressed long 1s
			if(is_button_pressed_1s(1)){
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 fba6 	bl	800110c <is_button_pressed_1s>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d01c      	beq.n	8000a00 <SystemFSM+0x368>
				if(button2_first_press1s){
 80009c6:	4b45      	ldr	r3, [pc, #276]	; (8000adc <SystemFSM+0x444>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d006      	beq.n	80009dc <SystemFSM+0x344>
					setTimer(50, 4);
 80009ce:	2104      	movs	r1, #4
 80009d0:	2032      	movs	r0, #50	; 0x32
 80009d2:	f7ff fe21 	bl	8000618 <setTimer>
					button2_first_press1s = 0;
 80009d6:	4b41      	ldr	r3, [pc, #260]	; (8000adc <SystemFSM+0x444>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
				}
				if(flag[4] == 1){
 80009dc:	4b3a      	ldr	r3, [pc, #232]	; (8000ac8 <SystemFSM+0x430>)
 80009de:	691b      	ldr	r3, [r3, #16]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d10d      	bne.n	8000a00 <SystemFSM+0x368>
					setTimer(50, 4);
 80009e4:	2104      	movs	r1, #4
 80009e6:	2032      	movs	r0, #50	; 0x32
 80009e8:	f7ff fe16 	bl	8000618 <setTimer>
					yellowlight++;
 80009ec:	4b38      	ldr	r3, [pc, #224]	; (8000ad0 <SystemFSM+0x438>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	4a37      	ldr	r2, [pc, #220]	; (8000ad0 <SystemFSM+0x438>)
 80009f4:	6013      	str	r3, [r2, #0]
					greenlight++;
 80009f6:	4b38      	ldr	r3, [pc, #224]	; (8000ad8 <SystemFSM+0x440>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	3301      	adds	r3, #1
 80009fc:	4a36      	ldr	r2, [pc, #216]	; (8000ad8 <SystemFSM+0x440>)
 80009fe:	6013      	str	r3, [r2, #0]
				}
			}
			// if button3 is pressed, turn back to mode 1 normal
			if(is_button_pressed(2)){
 8000a00:	2002      	movs	r0, #2
 8000a02:	f000 fb69 	bl	80010d8 <is_button_pressed>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <SystemFSM+0x37a>
				button3_press = 1;
 8000a0c:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <SystemFSM+0x448>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(2) && button3_press){
 8000a12:	2002      	movs	r0, #2
 8000a14:	f000 fb60 	bl	80010d8 <is_button_pressed>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d128      	bne.n	8000a70 <SystemFSM+0x3d8>
 8000a1e:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <SystemFSM+0x448>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d024      	beq.n	8000a70 <SystemFSM+0x3d8>
				status = MODE1_NORMAL;
 8000a26:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <SystemFSM+0x44c>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	601a      	str	r2, [r3, #0]
				// set timer for traffic light
				setTimer(100, 0);
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2064      	movs	r0, #100	; 0x64
 8000a30:	f7ff fdf2 	bl	8000618 <setTimer>
				setTimer(100, 1);
 8000a34:	2101      	movs	r1, #1
 8000a36:	2064      	movs	r0, #100	; 0x64
 8000a38:	f7ff fdee 	bl	8000618 <setTimer>

				redlight = default_redlight;
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <SystemFSM+0x450>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a2a      	ldr	r2, [pc, #168]	; (8000aec <SystemFSM+0x454>)
 8000a42:	6013      	str	r3, [r2, #0]
				yellowlight = default_yellowlight;
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <SystemFSM+0x458>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <SystemFSM+0x438>)
 8000a4a:	6013      	str	r3, [r2, #0]
				greenlight = default_greenlight;
 8000a4c:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <SystemFSM+0x45c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <SystemFSM+0x440>)
 8000a52:	6013      	str	r3, [r2, #0]

				// turn off traffic light
				HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2120      	movs	r1, #32
 8000a58:	481c      	ldr	r0, [pc, #112]	; (8000acc <SystemFSM+0x434>)
 8000a5a:	f001 fae6 	bl	800202a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a64:	4819      	ldr	r0, [pc, #100]	; (8000acc <SystemFSM+0x434>)
 8000a66:	f001 fae0 	bl	800202a <HAL_GPIO_WritePin>
				button3_press = 0;
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <SystemFSM+0x448>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
			}
			// if button1 is pressed, go to next status
			if(is_button_pressed(0)){
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 fb31 	bl	80010d8 <is_button_pressed>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d002      	beq.n	8000a82 <SystemFSM+0x3ea>
				button1_press = 1;
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <SystemFSM+0x460>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(0) && button1_press){
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 fb28 	bl	80010d8 <is_button_pressed>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f040 8101 	bne.w	8000c92 <SystemFSM+0x5fa>
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <SystemFSM+0x460>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f000 80fc 	beq.w	8000c92 <SystemFSM+0x5fa>
				status = MODE4_MANGREEN;
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <SystemFSM+0x44c>)
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	601a      	str	r2, [r3, #0]
				// set timer for blinking led
				setTimer(50, 3);
 8000aa0:	2103      	movs	r1, #3
 8000aa2:	2032      	movs	r0, #50	; 0x32
 8000aa4:	f7ff fdb8 	bl	8000618 <setTimer>
				// turn off traffic light
				HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2120      	movs	r1, #32
 8000aac:	4807      	ldr	r0, [pc, #28]	; (8000acc <SystemFSM+0x434>)
 8000aae:	f001 fabc 	bl	800202a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <SystemFSM+0x434>)
 8000aba:	f001 fab6 	bl	800202a <HAL_GPIO_WritePin>
				button1_press = 0;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <SystemFSM+0x460>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
			}
			break;
 8000ac4:	e0e5      	b.n	8000c92 <SystemFSM+0x5fa>
 8000ac6:	bf00      	nop
 8000ac8:	2000008c 	.word	0x2000008c
 8000acc:	40010800 	.word	0x40010800
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	2000004c 	.word	0x2000004c
 8000ad8:	20000004 	.word	0x20000004
 8000adc:	2000000c 	.word	0x2000000c
 8000ae0:	20000050 	.word	0x20000050
 8000ae4:	20000054 	.word	0x20000054
 8000ae8:	200003ac 	.word	0x200003ac
 8000aec:	20000000 	.word	0x20000000
 8000af0:	200003b4 	.word	0x200003b4
 8000af4:	200003b0 	.word	0x200003b0
 8000af8:	20000048 	.word	0x20000048
		case MODE4_MANGREEN:
			// red led blinking 2HZ
			if(flag[3] == 1){
 8000afc:	4b67      	ldr	r3, [pc, #412]	; (8000c9c <SystemFSM+0x604>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d10c      	bne.n	8000b1e <SystemFSM+0x486>
				setTimer(50, 3);
 8000b04:	2103      	movs	r1, #3
 8000b06:	2032      	movs	r0, #50	; 0x32
 8000b08:	f7ff fd86 	bl	8000618 <setTimer>
				HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 8000b0c:	2140      	movs	r1, #64	; 0x40
 8000b0e:	4864      	ldr	r0, [pc, #400]	; (8000ca0 <SystemFSM+0x608>)
 8000b10:	f001 faa3 	bl	800205a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 8000b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b18:	4861      	ldr	r0, [pc, #388]	; (8000ca0 <SystemFSM+0x608>)
 8000b1a:	f001 fa9e 	bl	800205a <HAL_GPIO_TogglePin>
			}
			// 2 7SEG display value
			Updatebuffer(greenlight, 1);
 8000b1e:	4b61      	ldr	r3, [pc, #388]	; (8000ca4 <SystemFSM+0x60c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2101      	movs	r1, #1
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fca1 	bl	800046c <Updatebuffer>
			// 2 7SEG display mode
			Updatebuffer(MODE4_MANGREEN, 2);
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	2004      	movs	r0, #4
 8000b2e:	f7ff fc9d 	bl	800046c <Updatebuffer>
			// if button2 is pressed and released after that
			// increasing value by 1
			if(is_button_pressed(1)){
 8000b32:	2001      	movs	r0, #1
 8000b34:	f000 fad0 	bl	80010d8 <is_button_pressed>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d002      	beq.n	8000b44 <SystemFSM+0x4ac>
				button2_press = 1;
 8000b3e:	4b5a      	ldr	r3, [pc, #360]	; (8000ca8 <SystemFSM+0x610>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(1) && button2_press){
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 fac7 	bl	80010d8 <is_button_pressed>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d110      	bne.n	8000b72 <SystemFSM+0x4da>
 8000b50:	4b55      	ldr	r3, [pc, #340]	; (8000ca8 <SystemFSM+0x610>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00c      	beq.n	8000b72 <SystemFSM+0x4da>
				greenlight++;
 8000b58:	4b52      	ldr	r3, [pc, #328]	; (8000ca4 <SystemFSM+0x60c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	4a51      	ldr	r2, [pc, #324]	; (8000ca4 <SystemFSM+0x60c>)
 8000b60:	6013      	str	r3, [r2, #0]
				redlight++;
 8000b62:	4b52      	ldr	r3, [pc, #328]	; (8000cac <SystemFSM+0x614>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	3301      	adds	r3, #1
 8000b68:	4a50      	ldr	r2, [pc, #320]	; (8000cac <SystemFSM+0x614>)
 8000b6a:	6013      	str	r3, [r2, #0]
				button2_press = 0;
 8000b6c:	4b4e      	ldr	r3, [pc, #312]	; (8000ca8 <SystemFSM+0x610>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
			}
			// if button2 is pressed long 1s
			if(is_button_pressed_1s(1)){
 8000b72:	2001      	movs	r0, #1
 8000b74:	f000 faca 	bl	800110c <is_button_pressed_1s>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d01c      	beq.n	8000bb8 <SystemFSM+0x520>
				if(button2_first_press1s){
 8000b7e:	4b4c      	ldr	r3, [pc, #304]	; (8000cb0 <SystemFSM+0x618>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d006      	beq.n	8000b94 <SystemFSM+0x4fc>
					setTimer(50, 4);
 8000b86:	2104      	movs	r1, #4
 8000b88:	2032      	movs	r0, #50	; 0x32
 8000b8a:	f7ff fd45 	bl	8000618 <setTimer>
					button2_first_press1s = 0;
 8000b8e:	4b48      	ldr	r3, [pc, #288]	; (8000cb0 <SystemFSM+0x618>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
				}
				if(flag[4] == 1){
 8000b94:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <SystemFSM+0x604>)
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d10d      	bne.n	8000bb8 <SystemFSM+0x520>
					setTimer(50, 4);
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	2032      	movs	r0, #50	; 0x32
 8000ba0:	f7ff fd3a 	bl	8000618 <setTimer>
					greenlight++;
 8000ba4:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <SystemFSM+0x60c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	4a3e      	ldr	r2, [pc, #248]	; (8000ca4 <SystemFSM+0x60c>)
 8000bac:	6013      	str	r3, [r2, #0]
					redlight++;
 8000bae:	4b3f      	ldr	r3, [pc, #252]	; (8000cac <SystemFSM+0x614>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	4a3d      	ldr	r2, [pc, #244]	; (8000cac <SystemFSM+0x614>)
 8000bb6:	6013      	str	r3, [r2, #0]
				}
			}
			// if button3 is pressed, turn back to mode 1 normal
			if(is_button_pressed(2)){
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f000 fa8d 	bl	80010d8 <is_button_pressed>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d002      	beq.n	8000bca <SystemFSM+0x532>
				button3_press = 1;
 8000bc4:	4b3b      	ldr	r3, [pc, #236]	; (8000cb4 <SystemFSM+0x61c>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(2) && button3_press){
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f000 fa84 	bl	80010d8 <is_button_pressed>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d128      	bne.n	8000c28 <SystemFSM+0x590>
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <SystemFSM+0x61c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d024      	beq.n	8000c28 <SystemFSM+0x590>
				status = MODE1_NORMAL;
 8000bde:	4b36      	ldr	r3, [pc, #216]	; (8000cb8 <SystemFSM+0x620>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
				// set timer for traffic light
				setTimer(100, 0);
 8000be4:	2100      	movs	r1, #0
 8000be6:	2064      	movs	r0, #100	; 0x64
 8000be8:	f7ff fd16 	bl	8000618 <setTimer>
				setTimer(100, 1);
 8000bec:	2101      	movs	r1, #1
 8000bee:	2064      	movs	r0, #100	; 0x64
 8000bf0:	f7ff fd12 	bl	8000618 <setTimer>

				redlight = default_redlight;
 8000bf4:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <SystemFSM+0x624>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a2c      	ldr	r2, [pc, #176]	; (8000cac <SystemFSM+0x614>)
 8000bfa:	6013      	str	r3, [r2, #0]
				yellowlight = default_yellowlight;
 8000bfc:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <SystemFSM+0x628>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a30      	ldr	r2, [pc, #192]	; (8000cc4 <SystemFSM+0x62c>)
 8000c02:	6013      	str	r3, [r2, #0]
				greenlight = default_greenlight;
 8000c04:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <SystemFSM+0x630>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <SystemFSM+0x60c>)
 8000c0a:	6013      	str	r3, [r2, #0]

				// turn off traffic light
				HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2140      	movs	r1, #64	; 0x40
 8000c10:	4823      	ldr	r0, [pc, #140]	; (8000ca0 <SystemFSM+0x608>)
 8000c12:	f001 fa0a 	bl	800202a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c1c:	4820      	ldr	r0, [pc, #128]	; (8000ca0 <SystemFSM+0x608>)
 8000c1e:	f001 fa04 	bl	800202a <HAL_GPIO_WritePin>
				button3_press = 0;
 8000c22:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <SystemFSM+0x61c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
			}
			// if button1 is pressed, go to next status
			if(is_button_pressed(0)){
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 fa55 	bl	80010d8 <is_button_pressed>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <SystemFSM+0x5a2>
				button1_press = 1;
 8000c34:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <SystemFSM+0x634>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(0) && button1_press){
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 fa4c 	bl	80010d8 <is_button_pressed>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d127      	bne.n	8000c96 <SystemFSM+0x5fe>
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <SystemFSM+0x634>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d023      	beq.n	8000c96 <SystemFSM+0x5fe>
				status = MODE1_NORMAL;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <SystemFSM+0x620>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	601a      	str	r2, [r3, #0]
				// set timer for traffic light
				setTimer(100, 0);
 8000c54:	2100      	movs	r1, #0
 8000c56:	2064      	movs	r0, #100	; 0x64
 8000c58:	f7ff fcde 	bl	8000618 <setTimer>
				setTimer(100, 1);
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	2064      	movs	r0, #100	; 0x64
 8000c60:	f7ff fcda 	bl	8000618 <setTimer>
				// turn off traffic light
				HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2140      	movs	r1, #64	; 0x40
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <SystemFSM+0x608>)
 8000c6a:	f001 f9de 	bl	800202a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c74:	480a      	ldr	r0, [pc, #40]	; (8000ca0 <SystemFSM+0x608>)
 8000c76:	f001 f9d8 	bl	800202a <HAL_GPIO_WritePin>
				button1_press = 0;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <SystemFSM+0x634>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000c80:	e009      	b.n	8000c96 <SystemFSM+0x5fe>
		default:
			break;
 8000c82:	bf00      	nop
 8000c84:	e008      	b.n	8000c98 <SystemFSM+0x600>
			break;
 8000c86:	bf00      	nop
 8000c88:	e006      	b.n	8000c98 <SystemFSM+0x600>
			break;
 8000c8a:	bf00      	nop
 8000c8c:	e004      	b.n	8000c98 <SystemFSM+0x600>
			break;
 8000c8e:	bf00      	nop
 8000c90:	e002      	b.n	8000c98 <SystemFSM+0x600>
			break;
 8000c92:	bf00      	nop
 8000c94:	e000      	b.n	8000c98 <SystemFSM+0x600>
			break;
 8000c96:	bf00      	nop
	}
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	2000008c 	.word	0x2000008c
 8000ca0:	40010800 	.word	0x40010800
 8000ca4:	20000004 	.word	0x20000004
 8000ca8:	2000004c 	.word	0x2000004c
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	2000000c 	.word	0x2000000c
 8000cb4:	20000050 	.word	0x20000050
 8000cb8:	20000054 	.word	0x20000054
 8000cbc:	200003ac 	.word	0x200003ac
 8000cc0:	200003b4 	.word	0x200003b4
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	200003b0 	.word	0x200003b0
 8000ccc:	20000048 	.word	0x20000048

08000cd0 <TrafficLightFSM1>:
 *      Author: Dell
 */

#include "Traffic_Light_FSM.h"

void TrafficLightFSM1(){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	switch(TL1){
 8000cd4:	4b4f      	ldr	r3, [pc, #316]	; (8000e14 <TrafficLightFSM1+0x144>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d007      	beq.n	8000cec <TrafficLightFSM1+0x1c>
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	f300 808f 	bgt.w	8000e00 <TrafficLightFSM1+0x130>
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d030      	beq.n	8000d48 <TrafficLightFSM1+0x78>
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d05c      	beq.n	8000da4 <TrafficLightFSM1+0xd4>
					Red1 = redlight;
				}
			}
			break;
		default:
			break;
 8000cea:	e089      	b.n	8000e00 <TrafficLightFSM1+0x130>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2110      	movs	r1, #16
 8000cf0:	4849      	ldr	r0, [pc, #292]	; (8000e18 <TrafficLightFSM1+0x148>)
 8000cf2:	f001 f99a 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4847      	ldr	r0, [pc, #284]	; (8000e18 <TrafficLightFSM1+0x148>)
 8000cfc:	f001 f995 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2140      	movs	r1, #64	; 0x40
 8000d04:	4844      	ldr	r0, [pc, #272]	; (8000e18 <TrafficLightFSM1+0x148>)
 8000d06:	f001 f990 	bl	800202a <HAL_GPIO_WritePin>
			Updatebuffer(Red1, 1);
 8000d0a:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <TrafficLightFSM1+0x14c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2101      	movs	r1, #1
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fbab 	bl	800046c <Updatebuffer>
			if(flag[0] == 1){
 8000d16:	4b42      	ldr	r3, [pc, #264]	; (8000e20 <TrafficLightFSM1+0x150>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d172      	bne.n	8000e04 <TrafficLightFSM1+0x134>
				setTimer(100, 0);
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2064      	movs	r0, #100	; 0x64
 8000d22:	f7ff fc79 	bl	8000618 <setTimer>
				Red1--;
 8000d26:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <TrafficLightFSM1+0x14c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	4a3b      	ldr	r2, [pc, #236]	; (8000e1c <TrafficLightFSM1+0x14c>)
 8000d2e:	6013      	str	r3, [r2, #0]
				if(Red1 < 0){
 8000d30:	4b3a      	ldr	r3, [pc, #232]	; (8000e1c <TrafficLightFSM1+0x14c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da65      	bge.n	8000e04 <TrafficLightFSM1+0x134>
					TL1 = GREEN;
 8000d38:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <TrafficLightFSM1+0x144>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
					Green1 = greenlight;
 8000d3e:	4b39      	ldr	r3, [pc, #228]	; (8000e24 <TrafficLightFSM1+0x154>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a39      	ldr	r2, [pc, #228]	; (8000e28 <TrafficLightFSM1+0x158>)
 8000d44:	6013      	str	r3, [r2, #0]
			break;
 8000d46:	e05d      	b.n	8000e04 <TrafficLightFSM1+0x134>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	4832      	ldr	r0, [pc, #200]	; (8000e18 <TrafficLightFSM1+0x148>)
 8000d4e:	f001 f96c 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	2120      	movs	r1, #32
 8000d56:	4830      	ldr	r0, [pc, #192]	; (8000e18 <TrafficLightFSM1+0x148>)
 8000d58:	f001 f967 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2140      	movs	r1, #64	; 0x40
 8000d60:	482d      	ldr	r0, [pc, #180]	; (8000e18 <TrafficLightFSM1+0x148>)
 8000d62:	f001 f962 	bl	800202a <HAL_GPIO_WritePin>
			Updatebuffer(Green1, 1);
 8000d66:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <TrafficLightFSM1+0x158>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fb7d 	bl	800046c <Updatebuffer>
			if(flag[0] == 1){
 8000d72:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <TrafficLightFSM1+0x150>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d146      	bne.n	8000e08 <TrafficLightFSM1+0x138>
				setTimer(100, 0);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2064      	movs	r0, #100	; 0x64
 8000d7e:	f7ff fc4b 	bl	8000618 <setTimer>
				Green1--;
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <TrafficLightFSM1+0x158>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <TrafficLightFSM1+0x158>)
 8000d8a:	6013      	str	r3, [r2, #0]
				if(Green1 < 0){
 8000d8c:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <TrafficLightFSM1+0x158>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	da39      	bge.n	8000e08 <TrafficLightFSM1+0x138>
					TL1 = YELLOW;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <TrafficLightFSM1+0x144>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	601a      	str	r2, [r3, #0]
					Yellow1 = yellowlight;
 8000d9a:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <TrafficLightFSM1+0x15c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a24      	ldr	r2, [pc, #144]	; (8000e30 <TrafficLightFSM1+0x160>)
 8000da0:	6013      	str	r3, [r2, #0]
			break;
 8000da2:	e031      	b.n	8000e08 <TrafficLightFSM1+0x138>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2110      	movs	r1, #16
 8000da8:	481b      	ldr	r0, [pc, #108]	; (8000e18 <TrafficLightFSM1+0x148>)
 8000daa:	f001 f93e 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2120      	movs	r1, #32
 8000db2:	4819      	ldr	r0, [pc, #100]	; (8000e18 <TrafficLightFSM1+0x148>)
 8000db4:	f001 f939 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2140      	movs	r1, #64	; 0x40
 8000dbc:	4816      	ldr	r0, [pc, #88]	; (8000e18 <TrafficLightFSM1+0x148>)
 8000dbe:	f001 f934 	bl	800202a <HAL_GPIO_WritePin>
			Updatebuffer(Yellow1, 1);
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <TrafficLightFSM1+0x160>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fb4f 	bl	800046c <Updatebuffer>
			if(flag[0] == 1){
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <TrafficLightFSM1+0x150>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d11a      	bne.n	8000e0c <TrafficLightFSM1+0x13c>
				setTimer(100, 0);
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2064      	movs	r0, #100	; 0x64
 8000dda:	f7ff fc1d 	bl	8000618 <setTimer>
				Yellow1--;
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <TrafficLightFSM1+0x160>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <TrafficLightFSM1+0x160>)
 8000de6:	6013      	str	r3, [r2, #0]
				if(Yellow1 < 0){
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <TrafficLightFSM1+0x160>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	da0d      	bge.n	8000e0c <TrafficLightFSM1+0x13c>
					TL1 = RED;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <TrafficLightFSM1+0x144>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	601a      	str	r2, [r3, #0]
					Red1 = redlight;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <TrafficLightFSM1+0x164>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <TrafficLightFSM1+0x14c>)
 8000dfc:	6013      	str	r3, [r2, #0]
			break;
 8000dfe:	e005      	b.n	8000e0c <TrafficLightFSM1+0x13c>
			break;
 8000e00:	bf00      	nop
 8000e02:	e004      	b.n	8000e0e <TrafficLightFSM1+0x13e>
			break;
 8000e04:	bf00      	nop
 8000e06:	e002      	b.n	8000e0e <TrafficLightFSM1+0x13e>
			break;
 8000e08:	bf00      	nop
 8000e0a:	e000      	b.n	8000e0e <TrafficLightFSM1+0x13e>
			break;
 8000e0c:	bf00      	nop
	}
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200003b8 	.word	0x200003b8
 8000e18:	40010800 	.word	0x40010800
 8000e1c:	200003d0 	.word	0x200003d0
 8000e20:	2000008c 	.word	0x2000008c
 8000e24:	20000004 	.word	0x20000004
 8000e28:	200003bc 	.word	0x200003bc
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	200003cc 	.word	0x200003cc
 8000e34:	20000000 	.word	0x20000000

08000e38 <TrafficLightFSM2>:

void TrafficLightFSM2(){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	switch(TL2){
 8000e3c:	4b52      	ldr	r3, [pc, #328]	; (8000f88 <TrafficLightFSM2+0x150>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d007      	beq.n	8000e54 <TrafficLightFSM2+0x1c>
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	f300 8095 	bgt.w	8000f74 <TrafficLightFSM2+0x13c>
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d032      	beq.n	8000eb4 <TrafficLightFSM2+0x7c>
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d060      	beq.n	8000f14 <TrafficLightFSM2+0xdc>
					Red2 = redlight;
				}
			}
			break;
		default:
			break;
 8000e52:	e08f      	b.n	8000f74 <TrafficLightFSM2+0x13c>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2180      	movs	r1, #128	; 0x80
 8000e58:	484c      	ldr	r0, [pc, #304]	; (8000f8c <TrafficLightFSM2+0x154>)
 8000e5a:	f001 f8e6 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e64:	4849      	ldr	r0, [pc, #292]	; (8000f8c <TrafficLightFSM2+0x154>)
 8000e66:	f001 f8e0 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e70:	4846      	ldr	r0, [pc, #280]	; (8000f8c <TrafficLightFSM2+0x154>)
 8000e72:	f001 f8da 	bl	800202a <HAL_GPIO_WritePin>
			Updatebuffer(Red2, 2);
 8000e76:	4b46      	ldr	r3, [pc, #280]	; (8000f90 <TrafficLightFSM2+0x158>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff faf5 	bl	800046c <Updatebuffer>
			if(flag[1] == 1){
 8000e82:	4b44      	ldr	r3, [pc, #272]	; (8000f94 <TrafficLightFSM2+0x15c>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d176      	bne.n	8000f78 <TrafficLightFSM2+0x140>
				setTimer(100, 1);
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2064      	movs	r0, #100	; 0x64
 8000e8e:	f7ff fbc3 	bl	8000618 <setTimer>
				Red2--;
 8000e92:	4b3f      	ldr	r3, [pc, #252]	; (8000f90 <TrafficLightFSM2+0x158>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	4a3d      	ldr	r2, [pc, #244]	; (8000f90 <TrafficLightFSM2+0x158>)
 8000e9a:	6013      	str	r3, [r2, #0]
				if(Red2 < 0){
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <TrafficLightFSM2+0x158>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	da69      	bge.n	8000f78 <TrafficLightFSM2+0x140>
					TL2 = GREEN;
 8000ea4:	4b38      	ldr	r3, [pc, #224]	; (8000f88 <TrafficLightFSM2+0x150>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
					Green2 = greenlight;
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <TrafficLightFSM2+0x160>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a3b      	ldr	r2, [pc, #236]	; (8000f9c <TrafficLightFSM2+0x164>)
 8000eb0:	6013      	str	r3, [r2, #0]
			break;
 8000eb2:	e061      	b.n	8000f78 <TrafficLightFSM2+0x140>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	4834      	ldr	r0, [pc, #208]	; (8000f8c <TrafficLightFSM2+0x154>)
 8000eba:	f001 f8b6 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec4:	4831      	ldr	r0, [pc, #196]	; (8000f8c <TrafficLightFSM2+0x154>)
 8000ec6:	f001 f8b0 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed0:	482e      	ldr	r0, [pc, #184]	; (8000f8c <TrafficLightFSM2+0x154>)
 8000ed2:	f001 f8aa 	bl	800202a <HAL_GPIO_WritePin>
			Updatebuffer(Green2, 2);
 8000ed6:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <TrafficLightFSM2+0x164>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2102      	movs	r1, #2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fac5 	bl	800046c <Updatebuffer>
			if(flag[1] == 1){
 8000ee2:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <TrafficLightFSM2+0x15c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d148      	bne.n	8000f7c <TrafficLightFSM2+0x144>
				setTimer(100, 1);
 8000eea:	2101      	movs	r1, #1
 8000eec:	2064      	movs	r0, #100	; 0x64
 8000eee:	f7ff fb93 	bl	8000618 <setTimer>
				Green2--;
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <TrafficLightFSM2+0x164>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	4a28      	ldr	r2, [pc, #160]	; (8000f9c <TrafficLightFSM2+0x164>)
 8000efa:	6013      	str	r3, [r2, #0]
				if(Green2 < 0){
 8000efc:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <TrafficLightFSM2+0x164>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	da3b      	bge.n	8000f7c <TrafficLightFSM2+0x144>
					TL2 = YELLOW;
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <TrafficLightFSM2+0x150>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	601a      	str	r2, [r3, #0]
					Yellow2 = yellowlight;
 8000f0a:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <TrafficLightFSM2+0x168>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a25      	ldr	r2, [pc, #148]	; (8000fa4 <TrafficLightFSM2+0x16c>)
 8000f10:	6013      	str	r3, [r2, #0]
			break;
 8000f12:	e033      	b.n	8000f7c <TrafficLightFSM2+0x144>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2180      	movs	r1, #128	; 0x80
 8000f18:	481c      	ldr	r0, [pc, #112]	; (8000f8c <TrafficLightFSM2+0x154>)
 8000f1a:	f001 f886 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f24:	4819      	ldr	r0, [pc, #100]	; (8000f8c <TrafficLightFSM2+0x154>)
 8000f26:	f001 f880 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f30:	4816      	ldr	r0, [pc, #88]	; (8000f8c <TrafficLightFSM2+0x154>)
 8000f32:	f001 f87a 	bl	800202a <HAL_GPIO_WritePin>
			Updatebuffer(Yellow2, 2);
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <TrafficLightFSM2+0x16c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fa95 	bl	800046c <Updatebuffer>
			if(flag[1] == 1){
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <TrafficLightFSM2+0x15c>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d11a      	bne.n	8000f80 <TrafficLightFSM2+0x148>
				setTimer(100, 1);
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2064      	movs	r0, #100	; 0x64
 8000f4e:	f7ff fb63 	bl	8000618 <setTimer>
				Yellow2--;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <TrafficLightFSM2+0x16c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <TrafficLightFSM2+0x16c>)
 8000f5a:	6013      	str	r3, [r2, #0]
				if(Yellow2 < 0){
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <TrafficLightFSM2+0x16c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	da0d      	bge.n	8000f80 <TrafficLightFSM2+0x148>
					TL2 = RED;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <TrafficLightFSM2+0x150>)
 8000f66:	2202      	movs	r2, #2
 8000f68:	601a      	str	r2, [r3, #0]
					Red2 = redlight;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <TrafficLightFSM2+0x170>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <TrafficLightFSM2+0x158>)
 8000f70:	6013      	str	r3, [r2, #0]
			break;
 8000f72:	e005      	b.n	8000f80 <TrafficLightFSM2+0x148>
			break;
 8000f74:	bf00      	nop
 8000f76:	e004      	b.n	8000f82 <TrafficLightFSM2+0x14a>
			break;
 8000f78:	bf00      	nop
 8000f7a:	e002      	b.n	8000f82 <TrafficLightFSM2+0x14a>
			break;
 8000f7c:	bf00      	nop
 8000f7e:	e000      	b.n	8000f82 <TrafficLightFSM2+0x14a>
			break;
 8000f80:	bf00      	nop
	}
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200003d4 	.word	0x200003d4
 8000f8c:	40010800 	.word	0x40010800
 8000f90:	200003c4 	.word	0x200003c4
 8000f94:	2000008c 	.word	0x2000008c
 8000f98:	20000004 	.word	0x20000004
 8000f9c:	200003c0 	.word	0x200003c0
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	200003c8 	.word	0x200003c8
 8000fa8:	20000000 	.word	0x20000000

08000fac <InitButton>:
static uint8_t flagForButtonPress1s[NO_OF_BUTTONS];

static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];


void InitButton(){
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i ++){
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	e00e      	b.n	8000fd6 <InitButton+0x2a>
		debounceButtonBuffer1[i] = BUTTON_IS_RELEASED;
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <InitButton+0x3c>)
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <InitButton+0x40>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	54d1      	strb	r1, [r2, r3]
		buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <InitButton+0x44>)
 8000fcc:	2101      	movs	r1, #1
 8000fce:	54d1      	strb	r1, [r2, r3]
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i ++){
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d9ed      	bls.n	8000fb8 <InitButton+0xc>
	}
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	2000005c 	.word	0x2000005c
 8000fec:	20000060 	.word	0x20000060
 8000ff0:	20000058 	.word	0x20000058

08000ff4 <button_reading>:
void button_reading(unsigned char index){
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	debounceButtonBuffer2[index] = debounceButtonBuffer1[index];
 8000ffe:	79fa      	ldrb	r2, [r7, #7]
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	492f      	ldr	r1, [pc, #188]	; (80010c0 <button_reading+0xcc>)
 8001004:	5c89      	ldrb	r1, [r1, r2]
 8001006:	4a2f      	ldr	r2, [pc, #188]	; (80010c4 <button_reading+0xd0>)
 8001008:	54d1      	strb	r1, [r2, r3]
	if(index == 0){
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10a      	bne.n	8001026 <button_reading+0x32>
		debounceButtonBuffer1[index] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8001010:	79fc      	ldrb	r4, [r7, #7]
 8001012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001016:	482c      	ldr	r0, [pc, #176]	; (80010c8 <button_reading+0xd4>)
 8001018:	f000 fff0 	bl	8001ffc <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <button_reading+0xcc>)
 8001022:	551a      	strb	r2, [r3, r4]
 8001024:	e017      	b.n	8001056 <button_reading+0x62>
	}
	else if(index == 1){
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d10a      	bne.n	8001042 <button_reading+0x4e>
		debounceButtonBuffer1[index] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 800102c:	79fc      	ldrb	r4, [r7, #7]
 800102e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001032:	4825      	ldr	r0, [pc, #148]	; (80010c8 <button_reading+0xd4>)
 8001034:	f000 ffe2 	bl	8001ffc <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <button_reading+0xcc>)
 800103e:	551a      	strb	r2, [r3, r4]
 8001040:	e009      	b.n	8001056 <button_reading+0x62>
	}
	else{
		debounceButtonBuffer1[index] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8001042:	79fc      	ldrb	r4, [r7, #7]
 8001044:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001048:	481f      	ldr	r0, [pc, #124]	; (80010c8 <button_reading+0xd4>)
 800104a:	f000 ffd7 	bl	8001ffc <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <button_reading+0xcc>)
 8001054:	551a      	strb	r2, [r3, r4]
	}

	if(debounceButtonBuffer1[index] == debounceButtonBuffer2[index]){
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <button_reading+0xcc>)
 800105a:	5cd2      	ldrb	r2, [r2, r3]
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4919      	ldr	r1, [pc, #100]	; (80010c4 <button_reading+0xd0>)
 8001060:	5ccb      	ldrb	r3, [r1, r3]
 8001062:	429a      	cmp	r2, r3
 8001064:	d128      	bne.n	80010b8 <button_reading+0xc4>
		buttonBuffer[index] = debounceButtonBuffer1[index];
 8001066:	79fa      	ldrb	r2, [r7, #7]
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4915      	ldr	r1, [pc, #84]	; (80010c0 <button_reading+0xcc>)
 800106c:	5c89      	ldrb	r1, [r1, r2]
 800106e:	4a17      	ldr	r2, [pc, #92]	; (80010cc <button_reading+0xd8>)
 8001070:	54d1      	strb	r1, [r2, r3]
		if(debounceButtonBuffer1[index] == BUTTON_IS_PRESSED){
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <button_reading+0xcc>)
 8001076:	5cd3      	ldrb	r3, [r2, r3]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d114      	bne.n	80010a6 <button_reading+0xb2>
			if(counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING){
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <button_reading+0xdc>)
 8001080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001084:	2b63      	cmp	r3, #99	; 0x63
 8001086:	d809      	bhi.n	800109c <button_reading+0xa8>
				counterForButtonPress1s[index]++;
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4a11      	ldr	r2, [pc, #68]	; (80010d0 <button_reading+0xdc>)
 800108c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001090:	3201      	adds	r2, #1
 8001092:	b291      	uxth	r1, r2
 8001094:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <button_reading+0xdc>)
 8001096:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		else{
			counterForButtonPress1s[index] = 0;
			flagForButtonPress1s[index] = 0;
		}
	}
}
 800109a:	e00d      	b.n	80010b8 <button_reading+0xc4>
				flagForButtonPress1s[index] = 1;
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <button_reading+0xe0>)
 80010a0:	2101      	movs	r1, #1
 80010a2:	54d1      	strb	r1, [r2, r3]
}
 80010a4:	e008      	b.n	80010b8 <button_reading+0xc4>
			counterForButtonPress1s[index] = 0;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <button_reading+0xdc>)
 80010aa:	2100      	movs	r1, #0
 80010ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[index] = 0;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <button_reading+0xe0>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	54d1      	strb	r1, [r2, r3]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd90      	pop	{r4, r7, pc}
 80010c0:	2000005c 	.word	0x2000005c
 80010c4:	20000060 	.word	0x20000060
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	20000058 	.word	0x20000058
 80010d0:	20000068 	.word	0x20000068
 80010d4:	20000064 	.word	0x20000064

080010d8 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <is_button_pressed+0x14>
 80010e8:	2300      	movs	r3, #0
 80010ea:	e007      	b.n	80010fc <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4a06      	ldr	r2, [pc, #24]	; (8001108 <is_button_pressed+0x30>)
 80010f0:	5cd3      	ldrb	r3, [r2, r3]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bf0c      	ite	eq
 80010f6:	2301      	moveq	r3, #1
 80010f8:	2300      	movne	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000058 	.word	0x20000058

0800110c <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <is_button_pressed_1s+0x14>
 800111c:	2300      	movs	r3, #0
 800111e:	e007      	b.n	8001130 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4a06      	ldr	r2, [pc, #24]	; (800113c <is_button_pressed_1s+0x30>)
 8001124:	5cd3      	ldrb	r3, [r2, r3]
 8001126:	2b01      	cmp	r3, #1
 8001128:	bf0c      	ite	eq
 800112a:	2301      	moveq	r3, #1
 800112c:	2300      	movne	r3, #0
 800112e:	b2db      	uxtb	r3, r3
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000064 	.word	0x20000064

08001140 <get_key>:
/* USER CODE BEGIN Includes */
#include "global.h"
#include "System_FSM.h"
#include "input_reading.h"
#include "scheduler.h"
void get_key(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 3; i++) {
 8001146:	2300      	movs	r3, #0
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	e006      	b.n	800115a <get_key+0x1a>
        button_reading(i);
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff50 	bl	8000ff4 <button_reading>
    for (uint8_t i = 0; i < 3; i++) {
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	3301      	adds	r3, #1
 8001158:	71fb      	strb	r3, [r7, #7]
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d9f5      	bls.n	800114c <get_key+0xc>
    }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <manager_state>:

void manager_state(void) {
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0
    SystemFSM();
 800116e:	f7ff fa93 	bl	8000698 <SystemFSM>
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117c:	f000 fba2 	bl	80018c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001180:	f000 f83e 	bl	8001200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001184:	f000 f914 	bl	80013b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001188:	f000 f876 	bl	8001278 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800118c:	f000 f8e6 	bl	800135c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001190:	4816      	ldr	r0, [pc, #88]	; (80011ec <main+0x74>)
 8001192:	f001 fbd9 	bl	8002948 <HAL_TIM_Base_Start_IT>

  InitButton();
 8001196:	f7ff ff09 	bl	8000fac <InitButton>
  setTimer(25, 2);
 800119a:	2102      	movs	r1, #2
 800119c:	2019      	movs	r0, #25
 800119e:	f7ff fa3b 	bl	8000618 <setTimer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(get_key, 10, 10);
 80011a2:	220a      	movs	r2, #10
 80011a4:	210a      	movs	r1, #10
 80011a6:	4812      	ldr	r0, [pc, #72]	; (80011f0 <main+0x78>)
 80011a8:	f000 f98a 	bl	80014c0 <SCH_Add_Task>
  SCH_Add_Task(manager_state, 10, 100);
 80011ac:	2264      	movs	r2, #100	; 0x64
 80011ae:	210a      	movs	r1, #10
 80011b0:	4810      	ldr	r0, [pc, #64]	; (80011f4 <main+0x7c>)
 80011b2:	f000 f985 	bl	80014c0 <SCH_Add_Task>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SystemFSM();
 80011b6:	f7ff fa6f 	bl	8000698 <SystemFSM>
	  if(flag[2] == 1){
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <main+0x80>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d1f9      	bne.n	80011b6 <main+0x3e>
		  setTimer(25, 2);
 80011c2:	2102      	movs	r1, #2
 80011c4:	2019      	movs	r0, #25
 80011c6:	f7ff fa27 	bl	8000618 <setTimer>
		  Update7SEG(id++);
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <main+0x84>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	490a      	ldr	r1, [pc, #40]	; (80011fc <main+0x84>)
 80011d2:	600a      	str	r2, [r1, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f989 	bl	80004ec <Update7SEG>
		  if(id >= 4) id = 0;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <main+0x84>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	dde9      	ble.n	80011b6 <main+0x3e>
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <main+0x84>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
	  SystemFSM();
 80011e8:	e7e5      	b.n	80011b6 <main+0x3e>
 80011ea:	bf00      	nop
 80011ec:	200003d8 	.word	0x200003d8
 80011f0:	08001141 	.word	0x08001141
 80011f4:	0800116b 	.word	0x0800116b
 80011f8:	2000008c 	.word	0x2000008c
 80011fc:	20000044 	.word	0x20000044

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b090      	sub	sp, #64	; 0x40
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	2228      	movs	r2, #40	; 0x28
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f002 fc7c 	bl	8003b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001226:	2301      	movs	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122a:	2310      	movs	r3, #16
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800122e:	2300      	movs	r3, #0
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001232:	f107 0318 	add.w	r3, r7, #24
 8001236:	4618      	mov	r0, r3
 8001238:	f000 ff28 	bl	800208c <HAL_RCC_OscConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001242:	f000 f937 	bl	80014b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001246:	230f      	movs	r3, #15
 8001248:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f001 f994 	bl	800258c <HAL_RCC_ClockConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800126a:	f000 f923 	bl	80014b4 <Error_Handler>
  }
}
 800126e:	bf00      	nop
 8001270:	3740      	adds	r7, #64	; 0x40
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001294:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <MX_TIM2_Init+0xd0>)
 8001296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <MX_TIM2_Init+0xd0>)
 800129e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <MX_TIM2_Init+0xd0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <MX_TIM2_Init+0xd0>)
 80012ac:	2209      	movs	r2, #9
 80012ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <MX_TIM2_Init+0xd0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <MX_TIM2_Init+0xd0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012bc:	4822      	ldr	r0, [pc, #136]	; (8001348 <MX_TIM2_Init+0xd0>)
 80012be:	f001 faf3 	bl	80028a8 <HAL_TIM_Base_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012c8:	f000 f8f4 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4619      	mov	r1, r3
 80012d8:	481b      	ldr	r0, [pc, #108]	; (8001348 <MX_TIM2_Init+0xd0>)
 80012da:	f001 fc71 	bl	8002bc0 <HAL_TIM_ConfigClockSource>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012e4:	f000 f8e6 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4814      	ldr	r0, [pc, #80]	; (8001348 <MX_TIM2_Init+0xd0>)
 80012f6:	f001 fe49 	bl	8002f8c <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001300:	f000 f8d8 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  prescaler = htim2.Init.Prescaler;
 8001304:	4b10      	ldr	r3, [pc, #64]	; (8001348 <MX_TIM2_Init+0xd0>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	461a      	mov	r2, r3
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_TIM2_Init+0xd4>)
 800130c:	601a      	str	r2, [r3, #0]
  period = htim2.Init.Period;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_TIM2_Init+0xd0>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	461a      	mov	r2, r3
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_TIM2_Init+0xd8>)
 8001316:	601a      	str	r2, [r3, #0]
  int frequency = Internalclock / ((1+prescaler)*(1+period));
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_TIM2_Init+0xd4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <MX_TIM2_Init+0xd8>)
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	3201      	adds	r2, #1
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <MX_TIM2_Init+0xdc>)
 800132a:	fb92 f3f3 	sdiv	r3, r2, r3
 800132e:	61fb      	str	r3, [r7, #28]
  time_cycle = Onesecond / frequency;
 8001330:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	fb92 f3f3 	sdiv	r3, r2, r3
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <MX_TIM2_Init+0xe0>)
 800133c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200003d8 	.word	0x200003d8
 800134c:	20000038 	.word	0x20000038
 8001350:	2000003c 	.word	0x2000003c
 8001354:	007a1200 	.word	0x007a1200
 8001358:	20000040 	.word	0x20000040

0800135c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <MX_USART2_UART_Init+0x50>)
 8001364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001368:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800136c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001394:	f001 fe64 	bl	8003060 <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800139e:	f000 f889 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000420 	.word	0x20000420
 80013ac:	40004400 	.word	0x40004400

080013b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <MX_GPIO_Init+0xb8>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a27      	ldr	r2, [pc, #156]	; (8001468 <MX_GPIO_Init+0xb8>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b25      	ldr	r3, [pc, #148]	; (8001468 <MX_GPIO_Init+0xb8>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <MX_GPIO_Init+0xb8>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a21      	ldr	r2, [pc, #132]	; (8001468 <MX_GPIO_Init+0xb8>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_GPIO_Init+0xb8>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 80013f4:	2200      	movs	r2, #0
 80013f6:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 80013fa:	481c      	ldr	r0, [pc, #112]	; (800146c <MX_GPIO_Init+0xbc>)
 80013fc:	f000 fe15 	bl	800202a <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin
 8001400:	2200      	movs	r2, #0
 8001402:	217f      	movs	r1, #127	; 0x7f
 8001404:	481a      	ldr	r0, [pc, #104]	; (8001470 <MX_GPIO_Init+0xc0>)
 8001406:	f000 fe10 	bl	800202a <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 800140a:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 800140e:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2302      	movs	r3, #2
 800141a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	4619      	mov	r1, r3
 8001422:	4812      	ldr	r0, [pc, #72]	; (800146c <MX_GPIO_Init+0xbc>)
 8001424:	f000 fc70 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 8001428:	237f      	movs	r3, #127	; 0x7f
 800142a:	60bb      	str	r3, [r7, #8]
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2302      	movs	r3, #2
 8001436:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4619      	mov	r1, r3
 800143e:	480c      	ldr	r0, [pc, #48]	; (8001470 <MX_GPIO_Init+0xc0>)
 8001440:	f000 fc62 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_3_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8001444:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001448:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144e:	2301      	movs	r3, #1
 8001450:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_GPIO_Init+0xc0>)
 800145a:	f000 fc55 	bl	8001d08 <HAL_GPIO_Init>

}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000
 800146c:	40010800 	.word	0x40010800
 8001470:	40010c00 	.word	0x40010c00

08001474 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	// timer run for traffic light 1
	timer_run(0);
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff f8e3 	bl	8000648 <timer_run>
	// timer run for traffic light 2
	timer_run(1);
 8001482:	2001      	movs	r0, #1
 8001484:	f7ff f8e0 	bl	8000648 <timer_run>
	// timer run for quet led
	timer_run(2);
 8001488:	2002      	movs	r0, #2
 800148a:	f7ff f8dd 	bl	8000648 <timer_run>
	// timer for blinking led 2HZ
	timer_run(3);
 800148e:	2003      	movs	r0, #3
 8001490:	f7ff f8da 	bl	8000648 <timer_run>
	// timer for long press 1s button2
	timer_run(4);
 8001494:	2004      	movs	r0, #4
 8001496:	f7ff f8d7 	bl	8000648 <timer_run>
	// read button 1
	button_reading(0);
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fdaa 	bl	8000ff4 <button_reading>
	// read button 2
	button_reading(1);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff fda7 	bl	8000ff4 <button_reading>
	// read button 3
	button_reading(2);
 80014a6:	2002      	movs	r0, #2
 80014a8:	f7ff fda4 	bl	8000ff4 <button_reading>
	// quet led
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	e7fe      	b.n	80014bc <Error_Handler+0x8>
	...

080014c0 <SCH_Add_Task>:
    }
}

// Add new task into array of task
uint8_t SCH_Add_Task(void (*pFunction)(), uint32_t Delay, uint32_t Period)
{
 80014c0:	b4b0      	push	{r4, r5, r7}
 80014c2:	b093      	sub	sp, #76	; 0x4c
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
    // Check array is full
    if (NumsOfTask == SCH_MAX_TASK)
 80014cc:	4b72      	ldr	r3, [pc, #456]	; (8001698 <SCH_Add_Task+0x1d8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b0a      	cmp	r3, #10
 80014d2:	d101      	bne.n	80014d8 <SCH_Add_Task+0x18>
        return 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e0d9      	b.n	800168c <SCH_Add_Task+0x1cc>

    // Add new task
    uint8_t success = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint32_t curTime = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t task;
    for (task = 0; task < NumsOfTask; task++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014e6:	e028      	b.n	800153a <SCH_Add_Task+0x7a>
    {
        if (curTime <= Delay)
 80014e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d80b      	bhi.n	8001508 <SCH_Add_Task+0x48>
        {
            curTime = curTime + SCH_Tasks_G[task].Delay;
 80014f0:	496a      	ldr	r1, [pc, #424]	; (800169c <SCH_Add_Task+0x1dc>)
 80014f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	3304      	adds	r3, #4
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001504:	4413      	add	r3, r2
 8001506:	643b      	str	r3, [r7, #64]	; 0x40
        }

        if (curTime > Delay)
 8001508:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	429a      	cmp	r2, r3
 800150e:	d911      	bls.n	8001534 <SCH_Add_Task+0x74>
        {
            Delay = Delay - (curTime - SCH_Tasks_G[task].Delay);
 8001510:	4962      	ldr	r1, [pc, #392]	; (800169c <SCH_Add_Task+0x1dc>)
 8001512:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	3304      	adds	r3, #4
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	4413      	add	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
            success = 1;
 800152c:	2301      	movs	r3, #1
 800152e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8001532:	e007      	b.n	8001544 <SCH_Add_Task+0x84>
    for (task = 0; task < NumsOfTask; task++)
 8001534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001536:	3301      	adds	r3, #1
 8001538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800153a:	4b57      	ldr	r3, [pc, #348]	; (8001698 <SCH_Add_Task+0x1d8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001540:	429a      	cmp	r2, r3
 8001542:	d3d1      	bcc.n	80014e8 <SCH_Add_Task+0x28>
        }
    }
    if (!success)
 8001544:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001548:	2b00      	cmp	r3, #0
 800154a:	d106      	bne.n	800155a <SCH_Add_Task+0x9a>
    {
        Delay = Delay - curTime;
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	60bb      	str	r3, [r7, #8]
        success = 1;
 8001554:	2301      	movs	r3, #1
 8001556:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    // Shift right the task 1 unit
    sTask curTask = SCH_Tasks_G[task];
 800155a:	4950      	ldr	r1, [pc, #320]	; (800169c <SCH_Add_Task+0x1dc>)
 800155c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800156c:	461d      	mov	r5, r3
 800156e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001572:	682b      	ldr	r3, [r5, #0]
 8001574:	6023      	str	r3, [r4, #0]
    curTask.Delay = curTask.Delay - Delay;
 8001576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint32_t i = task; i < NumsOfTask; i++)
 800157e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001580:	63bb      	str	r3, [r7, #56]	; 0x38
 8001582:	e03d      	b.n	8001600 <SCH_Add_Task+0x140>
    {
        sTask tempTask = SCH_Tasks_G[i + 1];
 8001584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	4944      	ldr	r1, [pc, #272]	; (800169c <SCH_Add_Task+0x1dc>)
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	f107 0410 	add.w	r4, r7, #16
 8001598:	461d      	mov	r5, r3
 800159a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800159c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800159e:	682b      	ldr	r3, [r5, #0]
 80015a0:	6023      	str	r3, [r4, #0]
        SCH_Tasks_G[i + 1] = curTask;
 80015a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	493d      	ldr	r1, [pc, #244]	; (800169c <SCH_Add_Task+0x1dc>)
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	461d      	mov	r5, r3
 80015b4:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80015b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015bc:	6823      	ldr	r3, [r4, #0]
 80015be:	602b      	str	r3, [r5, #0]
        SCH_Tasks_G[i + 1].TaskID = SCH_Tasks_G[i + 1].TaskID + 1; // update TaskID
 80015c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	4935      	ldr	r1, [pc, #212]	; (800169c <SCH_Add_Task+0x1dc>)
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	3310      	adds	r3, #16
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015d6:	3201      	adds	r2, #1
 80015d8:	1c59      	adds	r1, r3, #1
 80015da:	4830      	ldr	r0, [pc, #192]	; (800169c <SCH_Add_Task+0x1dc>)
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4403      	add	r3, r0
 80015e6:	3310      	adds	r3, #16
 80015e8:	6019      	str	r1, [r3, #0]
        curTask = tempTask;
 80015ea:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80015ee:	f107 0510 	add.w	r5, r7, #16
 80015f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f6:	682b      	ldr	r3, [r5, #0]
 80015f8:	6023      	str	r3, [r4, #0]
    for (uint32_t i = task; i < NumsOfTask; i++)
 80015fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015fc:	3301      	adds	r3, #1
 80015fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <SCH_Add_Task+0x1d8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001606:	429a      	cmp	r2, r3
 8001608:	d3bc      	bcc.n	8001584 <SCH_Add_Task+0xc4>
    }

    // Add new task with new Delay into the list
    SCH_Tasks_G[task].pTask = pFunction;
 800160a:	4924      	ldr	r1, [pc, #144]	; (800169c <SCH_Add_Task+0x1dc>)
 800160c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	601a      	str	r2, [r3, #0]
    SCH_Tasks_G[task].Delay = Delay;
 800161c:	491f      	ldr	r1, [pc, #124]	; (800169c <SCH_Add_Task+0x1dc>)
 800161e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	3304      	adds	r3, #4
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	601a      	str	r2, [r3, #0]
    SCH_Tasks_G[task].Period = Period;
 8001630:	491a      	ldr	r1, [pc, #104]	; (800169c <SCH_Add_Task+0x1dc>)
 8001632:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	3308      	adds	r3, #8
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	601a      	str	r2, [r3, #0]
    SCH_Tasks_G[task].RunMe = 0;
 8001644:	4915      	ldr	r1, [pc, #84]	; (800169c <SCH_Add_Task+0x1dc>)
 8001646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	330c      	adds	r3, #12
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
    SCH_Tasks_G[task].TaskID = task;
 8001658:	4910      	ldr	r1, [pc, #64]	; (800169c <SCH_Add_Task+0x1dc>)
 800165a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	3310      	adds	r3, #16
 8001668:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800166a:	601a      	str	r2, [r3, #0]

    // Update status of the array of task
    NumsOfTask = NumsOfTask + 1;
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <SCH_Add_Task+0x1d8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	4a09      	ldr	r2, [pc, #36]	; (8001698 <SCH_Add_Task+0x1d8>)
 8001674:	6013      	str	r3, [r2, #0]
    success = 1;
 8001676:	2301      	movs	r3, #1
 8001678:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    visited[NumsOfTask - 1] = 1;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <SCH_Add_Task+0x1d8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3b01      	subs	r3, #1
 8001682:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <SCH_Add_Task+0x1e0>)
 8001684:	2101      	movs	r1, #1
 8001686:	54d1      	strb	r1, [r2, r3]

    return success;
 8001688:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800168c:	4618      	mov	r0, r3
 800168e:	374c      	adds	r7, #76	; 0x4c
 8001690:	46bd      	mov	sp, r7
 8001692:	bcb0      	pop	{r4, r5, r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000534 	.word	0x20000534
 800169c:	2000046c 	.word	0x2000046c
 80016a0:	20000070 	.word	0x20000070

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_MspInit+0x5c>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <HAL_MspInit+0x5c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6193      	str	r3, [r2, #24]
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_MspInit+0x5c>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_MspInit+0x5c>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_MspInit+0x5c>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_MspInit+0x5c>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_MspInit+0x60>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_MspInit+0x60>)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000
 8001704:	40010000 	.word	0x40010000

08001708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001718:	d113      	bne.n	8001742 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <HAL_TIM_Base_MspInit+0x44>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a0b      	ldr	r2, [pc, #44]	; (800174c <HAL_TIM_Base_MspInit+0x44>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_TIM_Base_MspInit+0x44>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	201c      	movs	r0, #28
 8001738:	f000 f9fd 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800173c:	201c      	movs	r0, #28
 800173e:	f000 fa16 	bl	8001b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000

08001750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_UART_MspInit+0x98>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d137      	bne.n	80017e0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <HAL_UART_MspInit+0x9c>)
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <HAL_UART_MspInit+0x9c>)
 8001776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177a:	61d3      	str	r3, [r2, #28]
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_UART_MspInit+0x9c>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_UART_MspInit+0x9c>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a17      	ldr	r2, [pc, #92]	; (80017ec <HAL_UART_MspInit+0x9c>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_UART_MspInit+0x9c>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017a0:	2304      	movs	r3, #4
 80017a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	4619      	mov	r1, r3
 80017b2:	480f      	ldr	r0, [pc, #60]	; (80017f0 <HAL_UART_MspInit+0xa0>)
 80017b4:	f000 faa8 	bl	8001d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017b8:	2308      	movs	r3, #8
 80017ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	4619      	mov	r1, r3
 80017ca:	4809      	ldr	r0, [pc, #36]	; (80017f0 <HAL_UART_MspInit+0xa0>)
 80017cc:	f000 fa9c 	bl	8001d08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	2026      	movs	r0, #38	; 0x26
 80017d6:	f000 f9ae 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017da:	2026      	movs	r0, #38	; 0x26
 80017dc:	f000 f9c7 	bl	8001b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40004400 	.word	0x40004400
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010800 	.word	0x40010800

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <NMI_Handler+0x4>

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler+0x4>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <UsageFault_Handler+0x4>

08001812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183a:	f000 f889 	bl	8001950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <TIM2_IRQHandler+0x10>)
 800184a:	f001 f8c9 	bl	80029e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200003d8 	.word	0x200003d8

08001858 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <USART2_IRQHandler+0x10>)
 800185e:	f001 fc4f 	bl	8003100 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000420 	.word	0x20000420

0800186c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <Reset_Handler>:
 8001878:	f7ff fff8 	bl	800186c <SystemInit>
 800187c:	480b      	ldr	r0, [pc, #44]	; (80018ac <LoopFillZerobss+0xe>)
 800187e:	490c      	ldr	r1, [pc, #48]	; (80018b0 <LoopFillZerobss+0x12>)
 8001880:	4a0c      	ldr	r2, [pc, #48]	; (80018b4 <LoopFillZerobss+0x16>)
 8001882:	2300      	movs	r3, #0
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:
 8001886:	58d4      	ldr	r4, [r2, r3]
 8001888:	50c4      	str	r4, [r0, r3]
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:
 800188c:	18c4      	adds	r4, r0, r3
 800188e:	428c      	cmp	r4, r1
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <LoopFillZerobss+0x1a>)
 8001894:	4c09      	ldr	r4, [pc, #36]	; (80018bc <LoopFillZerobss+0x1e>)
 8001896:	2300      	movs	r3, #0
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:
 800189e:	42a2      	cmp	r2, r4
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>
 80018a2:	f002 f90f 	bl	8003ac4 <__libc_init_array>
 80018a6:	f7ff fc67 	bl	8001178 <main>
 80018aa:	4770      	bx	lr
 80018ac:	20000000 	.word	0x20000000
 80018b0:	2000001c 	.word	0x2000001c
 80018b4:	08003b68 	.word	0x08003b68
 80018b8:	2000001c 	.word	0x2000001c
 80018bc:	2000053c 	.word	0x2000053c

080018c0 <ADC1_2_IRQHandler>:
 80018c0:	e7fe      	b.n	80018c0 <ADC1_2_IRQHandler>
	...

080018c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_Init+0x28>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a07      	ldr	r2, [pc, #28]	; (80018ec <HAL_Init+0x28>)
 80018ce:	f043 0310 	orr.w	r3, r3, #16
 80018d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d4:	2003      	movs	r0, #3
 80018d6:	f000 f923 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018da:	200f      	movs	r0, #15
 80018dc:	f000 f808 	bl	80018f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e0:	f7ff fee0 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40022000 	.word	0x40022000

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_InitTick+0x54>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_InitTick+0x58>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001906:	fbb3 f3f1 	udiv	r3, r3, r1
 800190a:	fbb2 f3f3 	udiv	r3, r2, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f93b 	bl	8001b8a <HAL_SYSTICK_Config>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e00e      	b.n	800193c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b0f      	cmp	r3, #15
 8001922:	d80a      	bhi.n	800193a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001924:	2200      	movs	r2, #0
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f000 f903 	bl	8001b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001930:	4a06      	ldr	r2, [pc, #24]	; (800194c <HAL_InitTick+0x5c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000010 	.word	0x20000010
 8001948:	20000018 	.word	0x20000018
 800194c:	20000014 	.word	0x20000014

08001950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_IncTick+0x1c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_IncTick+0x20>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4413      	add	r3, r2
 8001960:	4a03      	ldr	r2, [pc, #12]	; (8001970 <HAL_IncTick+0x20>)
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	20000018 	.word	0x20000018
 8001970:	20000538 	.word	0x20000538

08001974 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b02      	ldr	r3, [pc, #8]	; (8001984 <HAL_GetTick+0x10>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	20000538 	.word	0x20000538

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4906      	ldr	r1, [pc, #24]	; (8001a20 <__NVIC_EnableIRQ+0x34>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aec:	d301      	bcc.n	8001af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00f      	b.n	8001b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <SysTick_Config+0x40>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afa:	210f      	movs	r1, #15
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f7ff ff90 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <SysTick_Config+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <SysTick_Config+0x40>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff2d 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b48:	f7ff ff42 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	6978      	ldr	r0, [r7, #20]
 8001b54:	f7ff ff90 	bl	8001a78 <NVIC_EncodePriority>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff5f 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff35 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ffa2 	bl	8001adc <SysTick_Config>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b085      	sub	sp, #20
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d008      	beq.n	8001bcc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e020      	b.n	8001c0e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 020e 	bic.w	r2, r2, #14
 8001bda:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d005      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2204      	movs	r2, #4
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	73fb      	strb	r3, [r7, #15]
 8001c3a:	e051      	b.n	8001ce0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 020e 	bic.w	r2, r2, #14
 8001c4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a22      	ldr	r2, [pc, #136]	; (8001cec <HAL_DMA_Abort_IT+0xd4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d029      	beq.n	8001cba <HAL_DMA_Abort_IT+0xa2>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <HAL_DMA_Abort_IT+0xd8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d022      	beq.n	8001cb6 <HAL_DMA_Abort_IT+0x9e>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a1f      	ldr	r2, [pc, #124]	; (8001cf4 <HAL_DMA_Abort_IT+0xdc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d01a      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x98>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <HAL_DMA_Abort_IT+0xe0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d012      	beq.n	8001caa <HAL_DMA_Abort_IT+0x92>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <HAL_DMA_Abort_IT+0xe4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_DMA_Abort_IT+0x8c>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <HAL_DMA_Abort_IT+0xe8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d102      	bne.n	8001c9e <HAL_DMA_Abort_IT+0x86>
 8001c98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c9c:	e00e      	b.n	8001cbc <HAL_DMA_Abort_IT+0xa4>
 8001c9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ca2:	e00b      	b.n	8001cbc <HAL_DMA_Abort_IT+0xa4>
 8001ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ca8:	e008      	b.n	8001cbc <HAL_DMA_Abort_IT+0xa4>
 8001caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cae:	e005      	b.n	8001cbc <HAL_DMA_Abort_IT+0xa4>
 8001cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb4:	e002      	b.n	8001cbc <HAL_DMA_Abort_IT+0xa4>
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	e000      	b.n	8001cbc <HAL_DMA_Abort_IT+0xa4>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <HAL_DMA_Abort_IT+0xec>)
 8001cbe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	4798      	blx	r3
    } 
  }
  return status;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40020008 	.word	0x40020008
 8001cf0:	4002001c 	.word	0x4002001c
 8001cf4:	40020030 	.word	0x40020030
 8001cf8:	40020044 	.word	0x40020044
 8001cfc:	40020058 	.word	0x40020058
 8001d00:	4002006c 	.word	0x4002006c
 8001d04:	40020000 	.word	0x40020000

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b08b      	sub	sp, #44	; 0x2c
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1a:	e148      	b.n	8001fae <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	f040 8137 	bne.w	8001fa8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4aa3      	ldr	r2, [pc, #652]	; (8001fcc <HAL_GPIO_Init+0x2c4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d05e      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d44:	4aa1      	ldr	r2, [pc, #644]	; (8001fcc <HAL_GPIO_Init+0x2c4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d875      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d4a:	4aa1      	ldr	r2, [pc, #644]	; (8001fd0 <HAL_GPIO_Init+0x2c8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d058      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d50:	4a9f      	ldr	r2, [pc, #636]	; (8001fd0 <HAL_GPIO_Init+0x2c8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d86f      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d56:	4a9f      	ldr	r2, [pc, #636]	; (8001fd4 <HAL_GPIO_Init+0x2cc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d052      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d5c:	4a9d      	ldr	r2, [pc, #628]	; (8001fd4 <HAL_GPIO_Init+0x2cc>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d869      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d62:	4a9d      	ldr	r2, [pc, #628]	; (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d04c      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d68:	4a9b      	ldr	r2, [pc, #620]	; (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d863      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d6e:	4a9b      	ldr	r2, [pc, #620]	; (8001fdc <HAL_GPIO_Init+0x2d4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d046      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d74:	4a99      	ldr	r2, [pc, #612]	; (8001fdc <HAL_GPIO_Init+0x2d4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d85d      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d7a:	2b12      	cmp	r3, #18
 8001d7c:	d82a      	bhi.n	8001dd4 <HAL_GPIO_Init+0xcc>
 8001d7e:	2b12      	cmp	r3, #18
 8001d80:	d859      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d82:	a201      	add	r2, pc, #4	; (adr r2, 8001d88 <HAL_GPIO_Init+0x80>)
 8001d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d88:	08001e03 	.word	0x08001e03
 8001d8c:	08001ddd 	.word	0x08001ddd
 8001d90:	08001def 	.word	0x08001def
 8001d94:	08001e31 	.word	0x08001e31
 8001d98:	08001e37 	.word	0x08001e37
 8001d9c:	08001e37 	.word	0x08001e37
 8001da0:	08001e37 	.word	0x08001e37
 8001da4:	08001e37 	.word	0x08001e37
 8001da8:	08001e37 	.word	0x08001e37
 8001dac:	08001e37 	.word	0x08001e37
 8001db0:	08001e37 	.word	0x08001e37
 8001db4:	08001e37 	.word	0x08001e37
 8001db8:	08001e37 	.word	0x08001e37
 8001dbc:	08001e37 	.word	0x08001e37
 8001dc0:	08001e37 	.word	0x08001e37
 8001dc4:	08001e37 	.word	0x08001e37
 8001dc8:	08001e37 	.word	0x08001e37
 8001dcc:	08001de5 	.word	0x08001de5
 8001dd0:	08001df9 	.word	0x08001df9
 8001dd4:	4a82      	ldr	r2, [pc, #520]	; (8001fe0 <HAL_GPIO_Init+0x2d8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dda:	e02c      	b.n	8001e36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e029      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	3304      	adds	r3, #4
 8001dea:	623b      	str	r3, [r7, #32]
          break;
 8001dec:	e024      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	3308      	adds	r3, #8
 8001df4:	623b      	str	r3, [r7, #32]
          break;
 8001df6:	e01f      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	330c      	adds	r3, #12
 8001dfe:	623b      	str	r3, [r7, #32]
          break;
 8001e00:	e01a      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	623b      	str	r3, [r7, #32]
          break;
 8001e0e:	e013      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e18:	2308      	movs	r3, #8
 8001e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	611a      	str	r2, [r3, #16]
          break;
 8001e22:	e009      	b.n	8001e38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e24:	2308      	movs	r3, #8
 8001e26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	615a      	str	r2, [r3, #20]
          break;
 8001e2e:	e003      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
          break;
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          break;
 8001e36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2bff      	cmp	r3, #255	; 0xff
 8001e3c:	d801      	bhi.n	8001e42 <HAL_GPIO_Init+0x13a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	e001      	b.n	8001e46 <HAL_GPIO_Init+0x13e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3304      	adds	r3, #4
 8001e46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2bff      	cmp	r3, #255	; 0xff
 8001e4c:	d802      	bhi.n	8001e54 <HAL_GPIO_Init+0x14c>
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	e002      	b.n	8001e5a <HAL_GPIO_Init+0x152>
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	3b08      	subs	r3, #8
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	210f      	movs	r1, #15
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	6a39      	ldr	r1, [r7, #32]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	431a      	orrs	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 8090 	beq.w	8001fa8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e88:	4b56      	ldr	r3, [pc, #344]	; (8001fe4 <HAL_GPIO_Init+0x2dc>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	4a55      	ldr	r2, [pc, #340]	; (8001fe4 <HAL_GPIO_Init+0x2dc>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6193      	str	r3, [r2, #24]
 8001e94:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_GPIO_Init+0x2dc>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea0:	4a51      	ldr	r2, [pc, #324]	; (8001fe8 <HAL_GPIO_Init+0x2e0>)
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a49      	ldr	r2, [pc, #292]	; (8001fec <HAL_GPIO_Init+0x2e4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00d      	beq.n	8001ee8 <HAL_GPIO_Init+0x1e0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a48      	ldr	r2, [pc, #288]	; (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <HAL_GPIO_Init+0x1dc>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a47      	ldr	r2, [pc, #284]	; (8001ff4 <HAL_GPIO_Init+0x2ec>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d101      	bne.n	8001ee0 <HAL_GPIO_Init+0x1d8>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e004      	b.n	8001eea <HAL_GPIO_Init+0x1e2>
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e002      	b.n	8001eea <HAL_GPIO_Init+0x1e2>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_GPIO_Init+0x1e2>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eec:	f002 0203 	and.w	r2, r2, #3
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	4093      	lsls	r3, r2
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001efa:	493b      	ldr	r1, [pc, #236]	; (8001fe8 <HAL_GPIO_Init+0x2e0>)
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f14:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	4937      	ldr	r1, [pc, #220]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f22:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	4933      	ldr	r1, [pc, #204]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	492d      	ldr	r1, [pc, #180]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60cb      	str	r3, [r1, #12]
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	4929      	ldr	r1, [pc, #164]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4923      	ldr	r1, [pc, #140]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	491f      	ldr	r1, [pc, #124]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4919      	ldr	r1, [pc, #100]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
 8001f98:	e006      	b.n	8001fa8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	4915      	ldr	r1, [pc, #84]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	3301      	adds	r3, #1
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f47f aeaf 	bne.w	8001d1c <HAL_GPIO_Init+0x14>
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	bf00      	nop
 8001fc2:	372c      	adds	r7, #44	; 0x2c
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	10320000 	.word	0x10320000
 8001fd0:	10310000 	.word	0x10310000
 8001fd4:	10220000 	.word	0x10220000
 8001fd8:	10210000 	.word	0x10210000
 8001fdc:	10120000 	.word	0x10120000
 8001fe0:	10110000 	.word	0x10110000
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40010800 	.word	0x40010800
 8001ff0:	40010c00 	.word	0x40010c00
 8001ff4:	40011000 	.word	0x40011000
 8001ff8:	40010400 	.word	0x40010400

08001ffc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	e001      	b.n	800201e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	807b      	strh	r3, [r7, #2]
 8002036:	4613      	mov	r3, r2
 8002038:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800203a:	787b      	ldrb	r3, [r7, #1]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002040:	887a      	ldrh	r2, [r7, #2]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002046:	e003      	b.n	8002050 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	041a      	lsls	r2, r3, #16
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	611a      	str	r2, [r3, #16]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800206c:	887a      	ldrh	r2, [r7, #2]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4013      	ands	r3, r2
 8002072:	041a      	lsls	r2, r3, #16
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	43d9      	mvns	r1, r3
 8002078:	887b      	ldrh	r3, [r7, #2]
 800207a:	400b      	ands	r3, r1
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	611a      	str	r2, [r3, #16]
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e26c      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8087 	beq.w	80021ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ac:	4b92      	ldr	r3, [pc, #584]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d00c      	beq.n	80020d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020b8:	4b8f      	ldr	r3, [pc, #572]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d112      	bne.n	80020ea <HAL_RCC_OscConfig+0x5e>
 80020c4:	4b8c      	ldr	r3, [pc, #560]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d0:	d10b      	bne.n	80020ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d2:	4b89      	ldr	r3, [pc, #548]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d06c      	beq.n	80021b8 <HAL_RCC_OscConfig+0x12c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d168      	bne.n	80021b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e246      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x76>
 80020f4:	4b80      	ldr	r3, [pc, #512]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a7f      	ldr	r2, [pc, #508]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	e02e      	b.n	8002160 <HAL_RCC_OscConfig+0xd4>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0x98>
 800210a:	4b7b      	ldr	r3, [pc, #492]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a7a      	ldr	r2, [pc, #488]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b78      	ldr	r3, [pc, #480]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a77      	ldr	r2, [pc, #476]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800211c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e01d      	b.n	8002160 <HAL_RCC_OscConfig+0xd4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0xbc>
 800212e:	4b72      	ldr	r3, [pc, #456]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a71      	ldr	r2, [pc, #452]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b6f      	ldr	r3, [pc, #444]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a6e      	ldr	r2, [pc, #440]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0xd4>
 8002148:	4b6b      	ldr	r3, [pc, #428]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a6a      	ldr	r2, [pc, #424]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800214e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	4b68      	ldr	r3, [pc, #416]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a67      	ldr	r2, [pc, #412]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800215a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7ff fc04 	bl	8001974 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7ff fc00 	bl	8001974 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1fa      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	4b5d      	ldr	r3, [pc, #372]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0xe4>
 800218e:	e014      	b.n	80021ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7ff fbf0 	bl	8001974 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7ff fbec 	bl	8001974 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1e6      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x10c>
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d063      	beq.n	800228e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c6:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021d2:	4b49      	ldr	r3, [pc, #292]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d11c      	bne.n	8002218 <HAL_RCC_OscConfig+0x18c>
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d116      	bne.n	8002218 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ea:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <HAL_RCC_OscConfig+0x176>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d001      	beq.n	8002202 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e1ba      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002202:	4b3d      	ldr	r3, [pc, #244]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4939      	ldr	r1, [pc, #228]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002216:	e03a      	b.n	800228e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002220:	4b36      	ldr	r3, [pc, #216]	; (80022fc <HAL_RCC_OscConfig+0x270>)
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7ff fba5 	bl	8001974 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222e:	f7ff fba1 	bl	8001974 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e19b      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224c:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4927      	ldr	r1, [pc, #156]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
 8002260:	e015      	b.n	800228e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002262:	4b26      	ldr	r3, [pc, #152]	; (80022fc <HAL_RCC_OscConfig+0x270>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7ff fb84 	bl	8001974 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002270:	f7ff fb80 	bl	8001974 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e17a      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d03a      	beq.n	8002310 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d019      	beq.n	80022d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a8:	f7ff fb64 	bl	8001974 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b0:	f7ff fb60 	bl	8001974 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e15a      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f000 facc 	bl	800286c <RCC_Delay>
 80022d4:	e01c      	b.n	8002310 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7ff fb4a 	bl	8001974 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e2:	e00f      	b.n	8002304 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7ff fb46 	bl	8001974 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d908      	bls.n	8002304 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e140      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	42420000 	.word	0x42420000
 8002300:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002304:	4b9e      	ldr	r3, [pc, #632]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e9      	bne.n	80022e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80a6 	beq.w	800246a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002322:	4b97      	ldr	r3, [pc, #604]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10d      	bne.n	800234a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	4b94      	ldr	r3, [pc, #592]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	4a93      	ldr	r2, [pc, #588]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002338:	61d3      	str	r3, [r2, #28]
 800233a:	4b91      	ldr	r3, [pc, #580]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002346:	2301      	movs	r3, #1
 8002348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	4b8e      	ldr	r3, [pc, #568]	; (8002584 <HAL_RCC_OscConfig+0x4f8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d118      	bne.n	8002388 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002356:	4b8b      	ldr	r3, [pc, #556]	; (8002584 <HAL_RCC_OscConfig+0x4f8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a8a      	ldr	r2, [pc, #552]	; (8002584 <HAL_RCC_OscConfig+0x4f8>)
 800235c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002362:	f7ff fb07 	bl	8001974 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236a:	f7ff fb03 	bl	8001974 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b64      	cmp	r3, #100	; 0x64
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0fd      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	4b81      	ldr	r3, [pc, #516]	; (8002584 <HAL_RCC_OscConfig+0x4f8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x312>
 8002390:	4b7b      	ldr	r3, [pc, #492]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4a7a      	ldr	r2, [pc, #488]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6213      	str	r3, [r2, #32]
 800239c:	e02d      	b.n	80023fa <HAL_RCC_OscConfig+0x36e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x334>
 80023a6:	4b76      	ldr	r3, [pc, #472]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a75      	ldr	r2, [pc, #468]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	4b73      	ldr	r3, [pc, #460]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a72      	ldr	r2, [pc, #456]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	f023 0304 	bic.w	r3, r3, #4
 80023bc:	6213      	str	r3, [r2, #32]
 80023be:	e01c      	b.n	80023fa <HAL_RCC_OscConfig+0x36e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d10c      	bne.n	80023e2 <HAL_RCC_OscConfig+0x356>
 80023c8:	4b6d      	ldr	r3, [pc, #436]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4a6c      	ldr	r2, [pc, #432]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	4b6a      	ldr	r3, [pc, #424]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a69      	ldr	r2, [pc, #420]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	e00b      	b.n	80023fa <HAL_RCC_OscConfig+0x36e>
 80023e2:	4b67      	ldr	r3, [pc, #412]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a66      	ldr	r2, [pc, #408]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6213      	str	r3, [r2, #32]
 80023ee:	4b64      	ldr	r3, [pc, #400]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a63      	ldr	r2, [pc, #396]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d015      	beq.n	800242e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7ff fab7 	bl	8001974 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7ff fab3 	bl	8001974 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f241 3288 	movw	r2, #5000	; 0x1388
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0ab      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002420:	4b57      	ldr	r3, [pc, #348]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0ee      	beq.n	800240a <HAL_RCC_OscConfig+0x37e>
 800242c:	e014      	b.n	8002458 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242e:	f7ff faa1 	bl	8001974 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7ff fa9d 	bl	8001974 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e095      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244c:	4b4c      	ldr	r3, [pc, #304]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1ee      	bne.n	8002436 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002458:	7dfb      	ldrb	r3, [r7, #23]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d105      	bne.n	800246a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245e:	4b48      	ldr	r3, [pc, #288]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a47      	ldr	r2, [pc, #284]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002468:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8081 	beq.w	8002576 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002474:	4b42      	ldr	r3, [pc, #264]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b08      	cmp	r3, #8
 800247e:	d061      	beq.n	8002544 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d146      	bne.n	8002516 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002488:	4b3f      	ldr	r3, [pc, #252]	; (8002588 <HAL_RCC_OscConfig+0x4fc>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7ff fa71 	bl	8001974 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002496:	f7ff fa6d 	bl	8001974 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e067      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a8:	4b35      	ldr	r3, [pc, #212]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f0      	bne.n	8002496 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024bc:	d108      	bne.n	80024d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024be:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	492d      	ldr	r1, [pc, #180]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a19      	ldr	r1, [r3, #32]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	430b      	orrs	r3, r1
 80024e2:	4927      	ldr	r1, [pc, #156]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <HAL_RCC_OscConfig+0x4fc>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7ff fa41 	bl	8001974 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f6:	f7ff fa3d 	bl	8001974 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e037      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x46a>
 8002514:	e02f      	b.n	8002576 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_RCC_OscConfig+0x4fc>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff fa2a 	bl	8001974 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002524:	f7ff fa26 	bl	8001974 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e020      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x498>
 8002542:	e018      	b.n	8002576 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e013      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	429a      	cmp	r2, r3
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	40007000 	.word	0x40007000
 8002588:	42420060 	.word	0x42420060

0800258c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0d0      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a0:	4b6a      	ldr	r3, [pc, #424]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d910      	bls.n	80025d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b67      	ldr	r3, [pc, #412]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 0207 	bic.w	r2, r3, #7
 80025b6:	4965      	ldr	r1, [pc, #404]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025be:	4b63      	ldr	r3, [pc, #396]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d001      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0b8      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d020      	beq.n	800261e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e8:	4b59      	ldr	r3, [pc, #356]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4a58      	ldr	r2, [pc, #352]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002600:	4b53      	ldr	r3, [pc, #332]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a52      	ldr	r2, [pc, #328]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800260a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260c:	4b50      	ldr	r3, [pc, #320]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	494d      	ldr	r1, [pc, #308]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d040      	beq.n	80026ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	4b47      	ldr	r3, [pc, #284]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d115      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e07f      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	4b41      	ldr	r3, [pc, #260]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e073      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	4b3d      	ldr	r3, [pc, #244]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e06b      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266a:	4b39      	ldr	r3, [pc, #228]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4936      	ldr	r1, [pc, #216]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800267c:	f7ff f97a 	bl	8001974 <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	e00a      	b.n	800269a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7ff f976 	bl	8001974 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e053      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 020c 	and.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1eb      	bne.n	8002684 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d210      	bcs.n	80026dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 0207 	bic.w	r2, r3, #7
 80026c2:	4922      	ldr	r1, [pc, #136]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e032      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4916      	ldr	r1, [pc, #88]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	490e      	ldr	r1, [pc, #56]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800271a:	f000 f821 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 800271e:	4602      	mov	r2, r0
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	490a      	ldr	r1, [pc, #40]	; (8002754 <HAL_RCC_ClockConfig+0x1c8>)
 800272c:	5ccb      	ldrb	r3, [r1, r3]
 800272e:	fa22 f303 	lsr.w	r3, r2, r3
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <HAL_RCC_ClockConfig+0x1cc>)
 8002734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_RCC_ClockConfig+0x1d0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff f8d8 	bl	80018f0 <HAL_InitTick>

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40022000 	.word	0x40022000
 8002750:	40021000 	.word	0x40021000
 8002754:	08003b34 	.word	0x08003b34
 8002758:	20000010 	.word	0x20000010
 800275c:	20000014 	.word	0x20000014

08002760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800277a:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b04      	cmp	r3, #4
 8002788:	d002      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x30>
 800278a:	2b08      	cmp	r3, #8
 800278c:	d003      	beq.n	8002796 <HAL_RCC_GetSysClockFreq+0x36>
 800278e:	e027      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002792:	613b      	str	r3, [r7, #16]
      break;
 8002794:	e027      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	0c9b      	lsrs	r3, r3, #18
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	4a17      	ldr	r2, [pc, #92]	; (80027fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80027a0:	5cd3      	ldrb	r3, [r2, r3]
 80027a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d010      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	0c5b      	lsrs	r3, r3, #17
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	4a11      	ldr	r2, [pc, #68]	; (8002800 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a0d      	ldr	r2, [pc, #52]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80027c2:	fb02 f203 	mul.w	r2, r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e004      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a0c      	ldr	r2, [pc, #48]	; (8002804 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027d4:	fb02 f303 	mul.w	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	613b      	str	r3, [r7, #16]
      break;
 80027de:	e002      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80027e2:	613b      	str	r3, [r7, #16]
      break;
 80027e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e6:	693b      	ldr	r3, [r7, #16]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	007a1200 	.word	0x007a1200
 80027fc:	08003b4c 	.word	0x08003b4c
 8002800:	08003b5c 	.word	0x08003b5c
 8002804:	003d0900 	.word	0x003d0900

08002808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800280c:	4b02      	ldr	r3, [pc, #8]	; (8002818 <HAL_RCC_GetHCLKFreq+0x10>)
 800280e:	681b      	ldr	r3, [r3, #0]
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	20000010 	.word	0x20000010

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002820:	f7ff fff2 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000
 8002840:	08003b44 	.word	0x08003b44

08002844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002848:	f7ff ffde 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	0adb      	lsrs	r3, r3, #11
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	; (8002868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40021000 	.word	0x40021000
 8002868:	08003b44 	.word	0x08003b44

0800286c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002874:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <RCC_Delay+0x34>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <RCC_Delay+0x38>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0a5b      	lsrs	r3, r3, #9
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002888:	bf00      	nop
  }
  while (Delay --);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1e5a      	subs	r2, r3, #1
 800288e:	60fa      	str	r2, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f9      	bne.n	8002888 <RCC_Delay+0x1c>
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	20000010 	.word	0x20000010
 80028a4:	10624dd3 	.word	0x10624dd3

080028a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e041      	b.n	800293e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe ff1a 	bl	8001708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3304      	adds	r3, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f000 fa56 	bl	8002d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	d001      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e035      	b.n	80029cc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a16      	ldr	r2, [pc, #88]	; (80029d8 <HAL_TIM_Base_Start_IT+0x90>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d009      	beq.n	8002996 <HAL_TIM_Base_Start_IT+0x4e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298a:	d004      	beq.n	8002996 <HAL_TIM_Base_Start_IT+0x4e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a12      	ldr	r2, [pc, #72]	; (80029dc <HAL_TIM_Base_Start_IT+0x94>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d111      	bne.n	80029ba <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b06      	cmp	r3, #6
 80029a6:	d010      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b8:	e007      	b.n	80029ca <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0201 	orr.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40000400 	.word	0x40000400

080029e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d020      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0202 	mvn.w	r2, #2
 8002a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f998 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f98b 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f99a 	bl	8002d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d020      	beq.n	8002a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01b      	beq.n	8002a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0204 	mvn.w	r2, #4
 8002a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f972 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f965 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f974 	bl	8002d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d020      	beq.n	8002adc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01b      	beq.n	8002adc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0208 	mvn.w	r2, #8
 8002aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f94c 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002ac8:	e005      	b.n	8002ad6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f93f 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f94e 	bl	8002d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d020      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01b      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0210 	mvn.w	r2, #16
 8002af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2208      	movs	r2, #8
 8002afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f926 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f919 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f928 	bl	8002d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00c      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0201 	mvn.w	r2, #1
 8002b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fc94 	bl	8001474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00c      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fa6f 	bl	800304e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00c      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f8f8 	bl	8002d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00c      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0220 	mvn.w	r2, #32
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fa42 	bl	800303c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_TIM_ConfigClockSource+0x1c>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e0b4      	b.n	8002d46 <HAL_TIM_ConfigClockSource+0x186>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c14:	d03e      	beq.n	8002c94 <HAL_TIM_ConfigClockSource+0xd4>
 8002c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1a:	f200 8087 	bhi.w	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c22:	f000 8086 	beq.w	8002d32 <HAL_TIM_ConfigClockSource+0x172>
 8002c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2a:	d87f      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c2c:	2b70      	cmp	r3, #112	; 0x70
 8002c2e:	d01a      	beq.n	8002c66 <HAL_TIM_ConfigClockSource+0xa6>
 8002c30:	2b70      	cmp	r3, #112	; 0x70
 8002c32:	d87b      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c34:	2b60      	cmp	r3, #96	; 0x60
 8002c36:	d050      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0x11a>
 8002c38:	2b60      	cmp	r3, #96	; 0x60
 8002c3a:	d877      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c3c:	2b50      	cmp	r3, #80	; 0x50
 8002c3e:	d03c      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0xfa>
 8002c40:	2b50      	cmp	r3, #80	; 0x50
 8002c42:	d873      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c44:	2b40      	cmp	r3, #64	; 0x40
 8002c46:	d058      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x13a>
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d86f      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c4c:	2b30      	cmp	r3, #48	; 0x30
 8002c4e:	d064      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x15a>
 8002c50:	2b30      	cmp	r3, #48	; 0x30
 8002c52:	d86b      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d060      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x15a>
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d867      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d05c      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x15a>
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d05a      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x15a>
 8002c64:	e062      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6899      	ldr	r1, [r3, #8]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f000 f96a 	bl	8002f4e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	609a      	str	r2, [r3, #8]
      break;
 8002c92:	e04f      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6899      	ldr	r1, [r3, #8]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f000 f953 	bl	8002f4e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cb6:	609a      	str	r2, [r3, #8]
      break;
 8002cb8:	e03c      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	6859      	ldr	r1, [r3, #4]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f000 f8ca 	bl	8002e60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2150      	movs	r1, #80	; 0x50
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f921 	bl	8002f1a <TIM_ITRx_SetConfig>
      break;
 8002cd8:	e02c      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6859      	ldr	r1, [r3, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f000 f8e8 	bl	8002ebc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2160      	movs	r1, #96	; 0x60
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f911 	bl	8002f1a <TIM_ITRx_SetConfig>
      break;
 8002cf8:	e01c      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6859      	ldr	r1, [r3, #4]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	461a      	mov	r2, r3
 8002d08:	f000 f8aa 	bl	8002e60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2140      	movs	r1, #64	; 0x40
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f901 	bl	8002f1a <TIM_ITRx_SetConfig>
      break;
 8002d18:	e00c      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4619      	mov	r1, r3
 8002d24:	4610      	mov	r0, r2
 8002d26:	f000 f8f8 	bl	8002f1a <TIM_ITRx_SetConfig>
      break;
 8002d2a:	e003      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d30:	e000      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
	...

08002d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a2b      	ldr	r2, [pc, #172]	; (8002e58 <TIM_Base_SetConfig+0xc0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d007      	beq.n	8002dc0 <TIM_Base_SetConfig+0x28>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db6:	d003      	beq.n	8002dc0 <TIM_Base_SetConfig+0x28>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a28      	ldr	r2, [pc, #160]	; (8002e5c <TIM_Base_SetConfig+0xc4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d108      	bne.n	8002dd2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a20      	ldr	r2, [pc, #128]	; (8002e58 <TIM_Base_SetConfig+0xc0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d007      	beq.n	8002dea <TIM_Base_SetConfig+0x52>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de0:	d003      	beq.n	8002dea <TIM_Base_SetConfig+0x52>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a1d      	ldr	r2, [pc, #116]	; (8002e5c <TIM_Base_SetConfig+0xc4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d108      	bne.n	8002dfc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a0d      	ldr	r2, [pc, #52]	; (8002e58 <TIM_Base_SetConfig+0xc0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d103      	bne.n	8002e30 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f023 0201 	bic.w	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	611a      	str	r2, [r3, #16]
  }
}
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	40000400 	.word	0x40000400

08002e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f023 0201 	bic.w	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f023 030a 	bic.w	r3, r3, #10
 8002e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	621a      	str	r2, [r3, #32]
}
 8002eb2:	bf00      	nop
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f023 0210 	bic.w	r2, r3, #16
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	031b      	lsls	r3, r3, #12
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	621a      	str	r2, [r3, #32]
}
 8002f10:	bf00      	nop
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f043 0307 	orr.w	r3, r3, #7
 8002f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	609a      	str	r2, [r3, #8]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b087      	sub	sp, #28
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	021a      	lsls	r2, r3, #8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	609a      	str	r2, [r3, #8]
}
 8002f82:	bf00      	nop
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e041      	b.n	8003028 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a14      	ldr	r2, [pc, #80]	; (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d009      	beq.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff0:	d004      	beq.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a10      	ldr	r2, [pc, #64]	; (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d10c      	bne.n	8003016 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003002:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	4313      	orrs	r3, r2
 800300c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40000400 	.word	0x40000400

0800303c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e042      	b.n	80030f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fe fb62 	bl	8001750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2224      	movs	r2, #36	; 0x24
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fc7f 	bl	80039a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b0ba      	sub	sp, #232	; 0xe8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003126:	2300      	movs	r3, #0
 8003128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800313e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_UART_IRQHandler+0x66>
 8003152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fb63 	bl	800382a <UART_Receive_IT>
      return;
 8003164:	e25b      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80de 	beq.w	800332c <HAL_UART_IRQHandler+0x22c>
 8003170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d106      	bne.n	800318a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003180:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80d1 	beq.w	800332c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800318a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <HAL_UART_IRQHandler+0xae>
 8003196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	f043 0201 	orr.w	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_UART_IRQHandler+0xd2>
 80031ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	f043 0202 	orr.w	r2, r3, #2
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_UART_IRQHandler+0xf6>
 80031de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f043 0204 	orr.w	r2, r3, #4
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d011      	beq.n	8003226 <HAL_UART_IRQHandler+0x126>
 8003202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800320e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f043 0208 	orr.w	r2, r3, #8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 81f2 	beq.w	8003614 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_UART_IRQHandler+0x14e>
 800323c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 faee 	bl	800382a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d103      	bne.n	800327a <HAL_UART_IRQHandler+0x17a>
 8003272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d04f      	beq.n	800331a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f9f8 	bl	8003670 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d041      	beq.n	8003312 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3314      	adds	r3, #20
 8003294:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003298:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800329c:	e853 3f00 	ldrex	r3, [r3]
 80032a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80032a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3314      	adds	r3, #20
 80032b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80032ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80032c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1d9      	bne.n	800328e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d013      	beq.n	800330a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	4a7e      	ldr	r2, [pc, #504]	; (80034e0 <HAL_UART_IRQHandler+0x3e0>)
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe fc92 	bl	8001c18 <HAL_DMA_Abort_IT>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d016      	beq.n	8003328 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003304:	4610      	mov	r0, r2
 8003306:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003308:	e00e      	b.n	8003328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f99c 	bl	8003648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003310:	e00a      	b.n	8003328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f998 	bl	8003648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003318:	e006      	b.n	8003328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f994 	bl	8003648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003326:	e175      	b.n	8003614 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003328:	bf00      	nop
    return;
 800332a:	e173      	b.n	8003614 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 814f 	bne.w	80035d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8148 	beq.w	80035d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8141 	beq.w	80035d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80b6 	beq.w	80034e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003384:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8145 	beq.w	8003618 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003396:	429a      	cmp	r2, r3
 8003398:	f080 813e 	bcs.w	8003618 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	f000 8088 	beq.w	80034c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	330c      	adds	r3, #12
 80033d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033dc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1d9      	bne.n	80033b0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3314      	adds	r3, #20
 8003402:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800340c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3314      	adds	r3, #20
 800341c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003420:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003424:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003426:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003428:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800342c:	e841 2300 	strex	r3, r2, [r1]
 8003430:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003432:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e1      	bne.n	80033fc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3314      	adds	r3, #20
 800343e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003442:	e853 3f00 	ldrex	r3, [r3]
 8003446:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800344e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3314      	adds	r3, #20
 8003458:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800345c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800345e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003460:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003462:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003464:	e841 2300 	strex	r3, r2, [r1]
 8003468:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800346a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e3      	bne.n	8003438 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800348e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003490:	f023 0310 	bic.w	r3, r3, #16
 8003494:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80034a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80034a4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80034b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e3      	bne.n	800347e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fb71 	bl	8001ba2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	4619      	mov	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f8bf 	bl	800365a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034dc:	e09c      	b.n	8003618 <HAL_UART_IRQHandler+0x518>
 80034de:	bf00      	nop
 80034e0:	08003735 	.word	0x08003735
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 808e 	beq.w	800361c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8089 	beq.w	800361c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	330c      	adds	r3, #12
 8003510:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800351a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003520:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800352e:	647a      	str	r2, [r7, #68]	; 0x44
 8003530:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800353c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e3      	bne.n	800350a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3314      	adds	r3, #20
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	623b      	str	r3, [r7, #32]
   return(result);
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3314      	adds	r3, #20
 8003562:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003566:	633a      	str	r2, [r7, #48]	; 0x30
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800356c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e3      	bne.n	8003542 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	330c      	adds	r3, #12
 800358e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	e853 3f00 	ldrex	r3, [r3]
 8003596:	60fb      	str	r3, [r7, #12]
   return(result);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0310 	bic.w	r3, r3, #16
 800359e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80035ac:	61fa      	str	r2, [r7, #28]
 80035ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	69b9      	ldr	r1, [r7, #24]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	617b      	str	r3, [r7, #20]
   return(result);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e3      	bne.n	8003588 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035ca:	4619      	mov	r1, r3
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f844 	bl	800365a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035d2:	e023      	b.n	800361c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <HAL_UART_IRQHandler+0x4f4>
 80035e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f8b5 	bl	800375c <UART_Transmit_IT>
    return;
 80035f2:	e014      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00e      	beq.n	800361e <HAL_UART_IRQHandler+0x51e>
 8003600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f8f4 	bl	80037fa <UART_EndTransmit_IT>
    return;
 8003612:	e004      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
    return;
 8003614:	bf00      	nop
 8003616:	e002      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
      return;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
      return;
 800361c:	bf00      	nop
  }
}
 800361e:	37e8      	adds	r7, #232	; 0xe8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	460b      	mov	r3, r1
 8003664:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003670:	b480      	push	{r7}
 8003672:	b095      	sub	sp, #84	; 0x54
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	330c      	adds	r3, #12
 800367e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003682:	e853 3f00 	ldrex	r3, [r3]
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	330c      	adds	r3, #12
 8003696:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003698:	643a      	str	r2, [r7, #64]	; 0x40
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800369e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e5      	bne.n	8003678 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3314      	adds	r3, #20
 80036b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	e853 3f00 	ldrex	r3, [r3]
 80036ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3314      	adds	r3, #20
 80036ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d4:	e841 2300 	strex	r3, r2, [r1]
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e5      	bne.n	80036ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d119      	bne.n	800371c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	e853 3f00 	ldrex	r3, [r3]
 80036f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f023 0310 	bic.w	r3, r3, #16
 80036fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	330c      	adds	r3, #12
 8003706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003708:	61ba      	str	r2, [r7, #24]
 800370a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370c:	6979      	ldr	r1, [r7, #20]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	e841 2300 	strex	r3, r2, [r1]
 8003714:	613b      	str	r3, [r7, #16]
   return(result);
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e5      	bne.n	80036e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
}
 800372a:	bf00      	nop
 800372c:	3754      	adds	r7, #84	; 0x54
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f7ff ff7a 	bl	8003648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b21      	cmp	r3, #33	; 0x21
 800376e:	d13e      	bne.n	80037ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003778:	d114      	bne.n	80037a4 <UART_Transmit_IT+0x48>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d110      	bne.n	80037a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003796:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	1c9a      	adds	r2, r3, #2
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	621a      	str	r2, [r3, #32]
 80037a2:	e008      	b.n	80037b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	1c59      	adds	r1, r3, #1
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6211      	str	r1, [r2, #32]
 80037ae:	781a      	ldrb	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29b      	uxth	r3, r3
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	4619      	mov	r1, r3
 80037c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10f      	bne.n	80037ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	e000      	b.n	80037f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr

080037fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003810:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ff02 	bl	8003624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b08c      	sub	sp, #48	; 0x30
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b22      	cmp	r3, #34	; 0x22
 800383c:	f040 80ae 	bne.w	800399c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003848:	d117      	bne.n	800387a <UART_Receive_IT+0x50>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d113      	bne.n	800387a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	b29b      	uxth	r3, r3
 8003864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003868:	b29a      	uxth	r2, r3
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	1c9a      	adds	r2, r3, #2
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	629a      	str	r2, [r3, #40]	; 0x28
 8003878:	e026      	b.n	80038c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003880:	2300      	movs	r3, #0
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388c:	d007      	beq.n	800389e <UART_Receive_IT+0x74>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <UART_Receive_IT+0x82>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	e008      	b.n	80038be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4619      	mov	r1, r3
 80038d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d15d      	bne.n	8003998 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0220 	bic.w	r2, r2, #32
 80038ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	2b01      	cmp	r3, #1
 8003920:	d135      	bne.n	800398e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	330c      	adds	r3, #12
 800392e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	e853 3f00 	ldrex	r3, [r3]
 8003936:	613b      	str	r3, [r7, #16]
   return(result);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f023 0310 	bic.w	r3, r3, #16
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003948:	623a      	str	r2, [r7, #32]
 800394a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	69f9      	ldr	r1, [r7, #28]
 800394e:	6a3a      	ldr	r2, [r7, #32]
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	61bb      	str	r3, [r7, #24]
   return(result);
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e5      	bne.n	8003928 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	2b10      	cmp	r3, #16
 8003968:	d10a      	bne.n	8003980 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003984:	4619      	mov	r1, r3
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff fe67 	bl	800365a <HAL_UARTEx_RxEventCallback>
 800398c:	e002      	b.n	8003994 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff fe51 	bl	8003636 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	e002      	b.n	800399e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	e000      	b.n	800399e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800399c:	2302      	movs	r3, #2
  }
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3730      	adds	r7, #48	; 0x30
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039e2:	f023 030c 	bic.w	r3, r3, #12
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	430b      	orrs	r3, r1
 80039ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2c      	ldr	r2, [pc, #176]	; (8003abc <UART_SetConfig+0x114>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d103      	bne.n	8003a18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a10:	f7fe ff18 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	e002      	b.n	8003a1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a18:	f7fe ff00 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8003a1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	009a      	lsls	r2, r3, #2
 8003a28:	441a      	add	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	4a22      	ldr	r2, [pc, #136]	; (8003ac0 <UART_SetConfig+0x118>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	0119      	lsls	r1, r3, #4
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009a      	lsls	r2, r3, #2
 8003a48:	441a      	add	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a54:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <UART_SetConfig+0x118>)
 8003a56:	fba3 0302 	umull	r0, r3, r3, r2
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	2064      	movs	r0, #100	; 0x64
 8003a5e:	fb00 f303 	mul.w	r3, r0, r3
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	3332      	adds	r3, #50	; 0x32
 8003a68:	4a15      	ldr	r2, [pc, #84]	; (8003ac0 <UART_SetConfig+0x118>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a74:	4419      	add	r1, r3
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009a      	lsls	r2, r3, #2
 8003a80:	441a      	add	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <UART_SetConfig+0x118>)
 8003a8e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	2064      	movs	r0, #100	; 0x64
 8003a96:	fb00 f303 	mul.w	r3, r0, r3
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	3332      	adds	r3, #50	; 0x32
 8003aa0:	4a07      	ldr	r2, [pc, #28]	; (8003ac0 <UART_SetConfig+0x118>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	f003 020f 	and.w	r2, r3, #15
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ab4:	bf00      	nop
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40013800 	.word	0x40013800
 8003ac0:	51eb851f 	.word	0x51eb851f

08003ac4 <__libc_init_array>:
 8003ac4:	b570      	push	{r4, r5, r6, lr}
 8003ac6:	2600      	movs	r6, #0
 8003ac8:	4d0c      	ldr	r5, [pc, #48]	; (8003afc <__libc_init_array+0x38>)
 8003aca:	4c0d      	ldr	r4, [pc, #52]	; (8003b00 <__libc_init_array+0x3c>)
 8003acc:	1b64      	subs	r4, r4, r5
 8003ace:	10a4      	asrs	r4, r4, #2
 8003ad0:	42a6      	cmp	r6, r4
 8003ad2:	d109      	bne.n	8003ae8 <__libc_init_array+0x24>
 8003ad4:	f000 f822 	bl	8003b1c <_init>
 8003ad8:	2600      	movs	r6, #0
 8003ada:	4d0a      	ldr	r5, [pc, #40]	; (8003b04 <__libc_init_array+0x40>)
 8003adc:	4c0a      	ldr	r4, [pc, #40]	; (8003b08 <__libc_init_array+0x44>)
 8003ade:	1b64      	subs	r4, r4, r5
 8003ae0:	10a4      	asrs	r4, r4, #2
 8003ae2:	42a6      	cmp	r6, r4
 8003ae4:	d105      	bne.n	8003af2 <__libc_init_array+0x2e>
 8003ae6:	bd70      	pop	{r4, r5, r6, pc}
 8003ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aec:	4798      	blx	r3
 8003aee:	3601      	adds	r6, #1
 8003af0:	e7ee      	b.n	8003ad0 <__libc_init_array+0xc>
 8003af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af6:	4798      	blx	r3
 8003af8:	3601      	adds	r6, #1
 8003afa:	e7f2      	b.n	8003ae2 <__libc_init_array+0x1e>
 8003afc:	08003b60 	.word	0x08003b60
 8003b00:	08003b60 	.word	0x08003b60
 8003b04:	08003b60 	.word	0x08003b60
 8003b08:	08003b64 	.word	0x08003b64

08003b0c <memset>:
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	4402      	add	r2, r0
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d100      	bne.n	8003b16 <memset+0xa>
 8003b14:	4770      	bx	lr
 8003b16:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1a:	e7f9      	b.n	8003b10 <memset+0x4>

08003b1c <_init>:
 8003b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1e:	bf00      	nop
 8003b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b22:	bc08      	pop	{r3}
 8003b24:	469e      	mov	lr, r3
 8003b26:	4770      	bx	lr

08003b28 <_fini>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	bf00      	nop
 8003b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2e:	bc08      	pop	{r3}
 8003b30:	469e      	mov	lr, r3
 8003b32:	4770      	bx	lr
